"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[6666],{3240:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=i(4848),t=i(8453);const s={},o="Tool Architecture",a={id:"made/advanced-topics/made_tool_architecture",title:"Tool Architecture",description:"The MADE Tool (leds-tools-made) is built as a VS Code extension with CLI support, using Langium for DSL processing.",source:"@site/docs/made/advanced-topics/2_made_tool_architecture.md",sourceDirName:"made/advanced-topics",slug:"/made/advanced-topics/made_tool_architecture",permalink:"/leds-tools-public/made/advanced-topics/made_tool_architecture",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"made",previous:{title:"Tool vs Library Architecture",permalink:"/leds-tools-public/made/advanced-topics/made_tool_vs_lib"},next:{title:"Library Architecture",permalink:"/leds-tools-public/made/advanced-topics/made_lib_architecture"}},c={},l=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Language Definition (<code>language/</code>)",id:"1-language-definition-language",level:3},{value:"DSL Grammar (<code>made.langium</code>)",id:"dsl-grammar-madelangium",level:4},{value:"Key Files",id:"key-files",level:4},{value:"Generated Code",id:"generated-code",level:4},{value:"2. Application Layer (<code>application/</code>)",id:"2-application-layer-application",level:3},{value:"Application Manager",id:"application-manager",level:4},{value:"Domain Applications",id:"domain-applications",level:4},{value:"3. VS Code Extension (<code>extension/</code>)",id:"3-vs-code-extension-extension",level:3},{value:"Main Extension File",id:"main-extension-file",level:4},{value:"Features",id:"features",level:4},{value:"4. CLI Interface (<code>cli/</code>)",id:"4-cli-interface-cli",level:3},{value:"Main CLI Entry Point",id:"main-cli-entry-point",level:4},{value:"Command Structure",id:"command-structure",level:4},{value:"Processing Flow",id:"processing-flow",level:2},{value:"1. <strong>File Parsing</strong>",id:"1-file-parsing",level:3},{value:"2. <strong>Component Processing</strong>",id:"2-component-processing",level:3},{value:"3. <strong>Data Transformation</strong>",id:"3-data-transformation",level:3},{value:"4. <strong>Output Generation</strong>",id:"4-output-generation",level:3},{value:"Key Technologies",id:"key-technologies",level:2},{value:"Langium Framework",id:"langium-framework",level:3},{value:"TypeScript Benefits",id:"typescript-benefits",level:3},{value:"Extension Points",id:"extension-points",level:2},{value:"Custom Applications",id:"custom-applications",level:3},{value:"Grammar Extensions",id:"grammar-extensions",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tool-architecture",children:"Tool Architecture"})}),"\n",(0,r.jsxs)(n.p,{children:["The MADE Tool (",(0,r.jsx)(n.code,{children:"leds-tools-made"}),") is built as a VS Code extension with CLI support, using Langium for DSL processing."]}),"\n",(0,r.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\r\n    A[VS Code Extension] --\x3e B[Language Server]\r\n    A --\x3e C[CLI Interface]\r\n    B --\x3e D[Langium Parser]\r\n    C --\x3e D\r\n    D --\x3e E[AST Generation]\r\n    E --\x3e F[Application Manager]\r\n    F --\x3e G[Domain Applications]\r\n    G --\x3e H[MADE Library Integration]"}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsxs)(n.h3,{id:"1-language-definition-language",children:["1. Language Definition (",(0,r.jsx)(n.code,{children:"language/"}),")"]}),"\n",(0,r.jsxs)(n.h4,{id:"dsl-grammar-madelangium",children:["DSL Grammar (",(0,r.jsx)(n.code,{children:"made.langium"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-langium",children:"grammar Made\r\n\r\nentry Model:\r\n    (project=Project)\r\n    (components+=(Team|Process|Backlog|TimeBox|Roadmap))*\n"})}),"\n",(0,r.jsx)(n.h4,{id:"key-files",children:"Key Files"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"made.langium"})," - Main grammar definition"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"backlog.langium"})," - Backlog-specific grammar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"team.langium"})," - Team structure grammar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"process.langium"})," - Process definition grammar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"roadmap.langium"})," - Roadmap and milestone grammar"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"generated-code",children:"Generated Code"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ast.ts"})," - AST node definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"grammar.ts"})," - Parser implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"module.ts"})," - Language service configuration"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-application-layer-application",children:["2. Application Layer (",(0,r.jsx)(n.code,{children:"application/"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"application-manager",children:"Application Manager"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class ApplicationManager {\r\n    private applications: Map<string, BaseApplication> = new Map();\r\n    \r\n    async initializeApplications() {\r\n        // Initialize domain-specific applications\r\n        this.applications.set('project', new ProjectApplication());\r\n        this.applications.set('backlog', new BacklogApplication());\r\n        this.applications.set('team', new TeamApplication());\r\n        // ...\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"domain-applications",children:"Domain Applications"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ProjectApplication"}),": Project metadata management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"BacklogApplication"}),": Epic/Story/Task processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TeamApplication"}),": Team member and role management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TimeBoxApplication"}),": Sprint and iteration handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ProcessApplication"}),": Workflow and process definition"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-vs-code-extension-extension",children:["3. VS Code Extension (",(0,r.jsx)(n.code,{children:"extension/"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"main-extension-file",children:"Main Extension File"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'export function activate(context: vscode.ExtensionContext): void {\r\n    registerGeneratorCommand(context);\r\n    client = startLanguageClient(context);\r\n}\r\n\r\nfunction registerGeneratorCommand(context: vscode.ExtensionContext): void {\r\n    const generateDocumentation = () => {\r\n        const filepath = vscode.window.activeTextEditor?.document.fileName;\r\n        if(filepath) {\r\n            generateAction(filepath, { only_project_documentation: true });\r\n        }\r\n    };\r\n    \r\n    context.subscriptions.push(\r\n        vscode.commands.registerCommand("made.generateDocumentation", generateDocumentation)\r\n    );\r\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Syntax Highlighting"}),": Based on Langium grammar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IntelliSense"}),": Auto-completion and error detection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Commands"}),": Right-click context menu actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Language Server"}),": Real-time validation"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-cli-interface-cli",children:["4. CLI Interface (",(0,r.jsx)(n.code,{children:"cli/"}),")"]}),"\n",(0,r.jsx)(n.h4,{id:"main-cli-entry-point",children:"Main CLI Entry Point"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const generateAction = async (fileName: string, opts: GenerateOptions): Promise<void> => {\r\n    const services = createMadeServices(NodeFileSystem).Made;\r\n    const model = await extractAstNode<Model>(fileName, services);\r\n    generate(model, fileName, opts.destination, opts);\r\n};\r\n\r\nexport const githubPushAction = async (fileName: string, token: string, org: string, repo: string): Promise<void> => {\r\n    const services = createMadeServices(NodeFileSystem).Made;\r\n    const model = await extractAstNode<Model>(fileName, services);\r\n    \r\n    // Process components and push to GitHub\r\n    const reportManager = new ReportManager();\r\n    await reportManager.githubPush(token, org, repo, project, epics, stories, tasks);\r\n};\n"})}),"\n",(0,r.jsx)(n.h4,{id:"command-structure",children:"Command Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"generate"})," - Documentation generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"github"})," - GitHub integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--help"})," - Command help"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"processing-flow",children:"Processing Flow"}),"\n",(0,r.jsxs)(n.h3,{id:"1-file-parsing",children:["1. ",(0,r.jsx)(n.strong,{children:"File Parsing"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Parse .made file into AST\r\nconst services = createMadeServices(NodeFileSystem).Made;\r\nconst model = await extractAstNode<Model>(fileName, services);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"2-component-processing",children:["2. ",(0,r.jsx)(n.strong,{children:"Component Processing"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Extract different component types\r\nconst backlogs = model.components.filter(c => c.$type === 'Backlog');\r\nconst teams = model.components.filter(c => c.$type === 'Team');\r\nconst timeboxes = model.components.filter(c => c.$type === 'TimeBox');\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"3-data-transformation",children:["3. ",(0,r.jsx)(n.strong,{children:"Data Transformation"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Transform AST to domain objects\r\nconst { epics, stories, tasks, backlogList } = processBacklogs(backlogs, assigneeMap);\r\nconst teamList = processTeams(teamsRaw);\r\nconst project = processProject(model.project);\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"4-output-generation",children:["4. ",(0,r.jsx)(n.strong,{children:"Output Generation"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Generate outputs via library\r\nconst reportManager = new ReportManager();\r\nawait reportManager.createReport(dbPath); // Documentation\r\nawait reportManager.githubPush(/* GitHub integration */);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-technologies",children:"Key Technologies"}),"\n",(0,r.jsx)(n.h3,{id:"langium-framework",children:"Langium Framework"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Grammar Definition"}),": Declarative DSL syntax"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Parser Generation"}),": Automatic parser creation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Language Server"}),": VS Code integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Real-time error checking"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"typescript-benefits",children:"TypeScript Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Compile-time error detection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"IntelliSense"}),": Better development experience"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Refactoring"}),": Safe code changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Self-documenting code"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,r.jsx)(n.h3,{id:"custom-applications",children:"Custom Applications"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class CustomApplication extends BaseApplication {\r\n    async process(component: CustomComponent): Promise<void> {\r\n        // Custom processing logic\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"grammar-extensions",children:"Grammar Extensions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-langium",children:"// Add new component types\r\nCustomComponent:\r\n    'custom' id=ID '{' \r\n        'property:' property=STRING\r\n    '}';\n"})}),"\n",(0,r.jsx)(n.p,{children:"This architecture provides a solid foundation for DSL processing while maintaining flexibility for extensions and customizations."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);