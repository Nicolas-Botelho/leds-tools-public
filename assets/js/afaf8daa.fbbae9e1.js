"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[4749],{6371:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=i(4848),s=i(8453);const t={sidebar_position:3,title:"Tool vs Library Architecture"},o="Tool vs Library Architecture",l={id:"spark/SparkVsSparklib",title:"Tool vs Library Architecture",description:"Spark is split into two main components: the Tool and the Library. Understanding this separation is crucial for developers who want to extend or integrate Spark.",source:"@site/docs/spark/3_SparkVsSparklib.md",sourceDirName:"spark",slug:"/spark/SparkVsSparklib",permalink:"/leds-tools-public/spark/SparkVsSparklib",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Tool vs Library Architecture"},sidebar:"spark",previous:{title:"An Advanced Study of Grammar",permalink:"/leds-tools-public/spark/how_to_use/advanced_study"},next:{title:"Metamodel",permalink:"/leds-tools-public/spark/spark_advanced/metamodel"}},a={},d=[{value:"Spark Tool (<code>leds-tools-spark</code>)",id:"spark-tool-leds-tools-spark",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Key Responsibilities",id:"key-responsibilities",level:3},{value:"Core Components",id:"core-components",level:3},{value:"Technologies",id:"technologies",level:3},{value:"Spark Library (<code>leds-tools-Spark-lib</code>)",id:"spark-library-leds-tools-spark-lib",level:2},{value:"Purpose",id:"purpose-1",level:3},{value:"Key Responsibilities",id:"key-responsibilities-1",level:3},{value:"Core Components",id:"core-components-1",level:3},{value:"Key Services",id:"key-services",level:3},{value:"Separation Benefits",id:"separation-benefits",level:2},{value:"1. <strong>Modularity</strong>",id:"1-modularity",level:3},{value:"2. <strong>Reusability</strong>",id:"2-reusability",level:3},{value:"3. <strong>Maintainability</strong>",id:"3-maintainability",level:3},{value:"4. <strong>Extensibility</strong>",id:"4-extensibility",level:3},{value:"Integration Flow",id:"integration-flow",level:2},{value:"Usage Patterns",id:"usage-patterns",level:2},{value:"Tool-mediated Usage",id:"tool-mediated-usage",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"tool-vs-library-architecture",children:"Tool vs Library Architecture"})}),"\n",(0,r.jsxs)(n.p,{children:["Spark is split into two main components: the ",(0,r.jsx)(n.strong,{children:"Tool"})," and the ",(0,r.jsx)(n.strong,{children:"Library"}),". Understanding this separation is crucial for developers who want to extend or integrate Spark."]}),"\n",(0,r.jsxs)(n.h2,{id:"spark-tool-leds-tools-spark",children:["Spark Tool (",(0,r.jsx)(n.code,{children:"leds-tools-spark"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"The VS Code extension and CLI interface that provides user interaction and DSL parsing."}),"\n",(0,r.jsx)(n.h3,{id:"key-responsibilities",children:"Key Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DSL Parsing"}),": Interprets ",(0,r.jsx)(n.code,{children:".Spark"})," files using Langium grammar"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Interface"}),": VS Code extension with syntax highlighting and commands"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CLI Interface"}),": Command-line tool for automation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration"}),": Connects user input to the processing library"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"application/       # Domain applications (Project, Team, TimeBox, etc.)\r\nlanguage/          # Langium DSL grammar and parser\r\nstatic/            # Monaco Editor UI files\r\ncli/               # Command-line interface\r\nextension/         # VS Code extension code\n"})}),"\n",(0,r.jsx)(n.h3,{id:"technologies",children:"Technologies"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Langium"}),": DSL creation and parsing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"VS Code Extension API"}),": Editor integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node.js"}),": CLI and backend processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TypeScript"}),": Type-safe development"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"spark-library-leds-tools-spark-lib",children:["Spark Library (",(0,r.jsx)(n.code,{children:"leds-tools-Spark-lib"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"purpose-1",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"The core processing engine that generates documentation, charts, and handles GitHub integration."}),"\n",(0,r.jsx)(n.h3,{id:"key-responsibilities-1",children:"Key Responsibilities"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Processing"}),": Transforms parsed DSL into actionable data structures"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation Generation"}),": Creates markdown reports and documentation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Visualization"}),": Generates SVG charts and dependency diagrams"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GitHub Integration"}),": Pushes data to GitHub Issues and Projects"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"core-components-1",children:"Core Components"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"models/            # Data models (Project, Sprint, Issue, etc.)\r\nmarkdown/          # Documentation generation services\r\nchart/             # SVG chart generators (CFD, throughput, dependencies)\r\nutil/              # Common utilities and helpers\r\nservice/           # GitHub API integration\n"})}),"\n",(0,r.jsx)(n.h3,{id:"key-services",children:"Key Services"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MarkdownService"}),": Orchestrates documentation generation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GitHubService"}),": Handles GitHub API operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ChartGenerators"}),": Creates visual diagrams"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DependencyAnalyzer"}),": Analyzes task relationships"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"separation-benefits",children:"Separation Benefits"}),"\n",(0,r.jsxs)(n.h3,{id:"1-modularity",children:["1. ",(0,r.jsx)(n.strong,{children:"Modularity"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tool focuses on user interaction"}),"\n",(0,r.jsx)(n.li,{children:"Library focuses on data processing"}),"\n",(0,r.jsx)(n.li,{children:"Clear separation of concerns"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-reusability",children:["2. ",(0,r.jsx)(n.strong,{children:"Reusability"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Library can be used independently"}),"\n",(0,r.jsx)(n.li,{children:"Multiple frontends can use the same library"}),"\n",(0,r.jsx)(n.li,{children:"Different deployment scenarios supported"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-maintainability",children:["3. ",(0,r.jsx)(n.strong,{children:"Maintainability"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Easier to test individual components"}),"\n",(0,r.jsx)(n.li,{children:"Clear API boundaries"}),"\n",(0,r.jsx)(n.li,{children:"Independent versioning possible"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-extensibility",children:["4. ",(0,r.jsx)(n.strong,{children:"Extensibility"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"New frontends can be added easily"}),"\n",(0,r.jsx)(n.li,{children:"Library features can be extended independently"}),"\n",(0,r.jsx)(n.li,{children:"Plugin architecture support"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-flow",children:"Integration Flow"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TD\r\n    A["User Input (.Spark file)"] --\x3e B["Spark Tool"]\r\n    B --\x3e C["DSL Parser"]\r\n    C --\x3e D["AST Generation"]\r\n    D --\x3e E["Spark Library"]\r\n    E --\x3e F["Data Processing"]\r\n    F --\x3e G["Output Generation"]\r\n    G --\x3e H["Documentation"]\r\n    G --\x3e I["Backend Code"]\r\n    G --\x3e J["Frontend Code"]'}),"\n",(0,r.jsx)(n.h2,{id:"usage-patterns",children:"Usage Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"tool-mediated-usage",children:"Tool-mediated Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Via CLI\r\nspark-cli generate path/to/spark/file\r\n\r\n# Via VS Code Extension\r\n# Right-click > Generate All\r\n# Right-click > Generate Backend\r\n# Right-click > Generate Frontend\r\n# Right-click > Project Documentation\n"})}),"\n",(0,r.jsx)(n.p,{children:"This architecture allows Spark to be both user-friendly through the tool interface and powerful through direct library integration."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);