"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[5799],{3511:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=s(4848),o=s(8453);const i={sidebar_position:3,title:"Running Locally and Debugging"},t=void 0,l={id:"spark/basic_concepts/how_to_use/run_and_debug",title:"Running Locally and Debugging",description:"This guide walks you through running and debugging your custom language extension locally. You'll prepare the environment, generate code from the grammar, build the project, and launch a debug session in VS Code to test language features in real time.",source:"@site/docs/spark/basic_concepts/2_how_to_use/3_run_and_debug.md",sourceDirName:"spark/basic_concepts/2_how_to_use",slug:"/spark/basic_concepts/how_to_use/run_and_debug",permalink:"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Running Locally and Debugging"},sidebar:"spark",previous:{title:"Moranguinho - Spark Example",permalink:"/leds-tools-public/spark/basic_concepts/how_to_use/file_examples/moranguinho"},next:{title:"Tool vs Library Architecture",permalink:"/leds-tools-public/spark/basic_concepts/SparkVsSparklib"}},a={},c=[{value:"Repository and branch",id:"repository-and-branch",level:2},{value:"1. Install Dependencies",id:"1-install-dependencies",level:2},{value:"2. Generate Code from Grammar",id:"2-generate-code-from-grammar",level:2},{value:"3. Compile the Project",id:"3-compile-the-project",level:2},{value:"4. Launch the Development Environment",id:"4-launch-the-development-environment",level:2},{value:"5. Test Language Features",id:"5-test-language-features",level:2},{value:"6. Use the Command-Line Interface (CLI)",id:"6-use-the-command-line-interface-cli",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This guide walks you through running and debugging your custom language extension locally. You'll prepare the environment, generate code from the grammar, build the project, and launch a debug session in VS Code to test language features in real time."}),"\n",(0,r.jsx)(n.h2,{id:"repository-and-branch",children:"Repository and branch"}),"\n",(0,r.jsxs)(n.p,{children:["All steps in this guide are intended to be run inside the LEDs Tools Spark repository on the ",(0,r.jsx)(n.code,{children:"developing"})," branch:"]}),"\n",(0,r.jsxs)(n.p,{children:["Repository: ",(0,r.jsx)(n.a,{href:"https://github.com/leds-org/leds-tools-spark/tree/developing",children:"https://github.com/leds-org/leds-tools-spark/tree/developing"})]}),"\n",(0,r.jsx)(n.p,{children:"Clone and check out the correct branch:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-powershell",children:"git clone https://github.com/leds-org/leds-tools-spark.git\r\ncd leds-tools-spark\r\ngit fetch --all\r\ngit checkout developing\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then run the following steps from the repository root."}),"\n",(0,r.jsx)(n.h2,{id:"1-install-dependencies",children:"1. Install Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Install the project dependencies defined in ",(0,r.jsx)(n.code,{children:"package.json"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Note: ",(0,r.jsx)(n.code,{children:"npm i"})," is a shortcut for ",(0,r.jsx)(n.code,{children:"npm install"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"2-generate-code-from-grammar",children:"2. Generate Code from Grammar"}),"\n",(0,r.jsxs)(n.p,{children:["Translate your language's grammar (for example, a ",(0,r.jsx)(n.code,{children:".langium"})," file) into executable TypeScript. This generates the parser and core language server components."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run langium:generate\n"})}),"\n",(0,r.jsx)(n.h2,{id:"3-compile-the-project",children:"3. Compile the Project"}),"\n",(0,r.jsx)(n.p,{children:"Compile the entire TypeScript project (generated files + your custom code) into JavaScript so the extension can run."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm run build\n"})}),"\n",(0,r.jsx)(n.h2,{id:"4-launch-the-development-environment",children:"4. Launch the Development Environment"}),"\n",(0,r.jsx)(n.p,{children:"Start a special VS Code instance with your extension loaded."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Press ",(0,r.jsx)(n.code,{children:"F5"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'This opens a new window named "Extension Development Host" where your extension is active for testing.'}),"\n",(0,r.jsx)(n.h2,{id:"5-test-language-features",children:"5. Test Language Features"}),"\n",(0,r.jsx)(n.p,{children:"In the new VS Code window:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a new file using your language's file extension ( ",(0,r.jsx)(n.code,{children:"example.spark"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Start writing code and verify that features work as expected:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Syntax Highlighting: keywords, strings, and comments are colored correctly."}),"\n",(0,r.jsx)(n.li,{children:"Validation: errors and warnings are underlined in the editor."}),"\n",(0,r.jsx)(n.li,{children:"Code Completion: suggestions appear as you type (if implemented)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"6-use-the-command-line-interface-cli",children:"6. Use the Command-Line Interface (CLI)"}),"\n",(0,r.jsx)(n.p,{children:"The project includes a CLI to interact with your language outside VS Code (useful for code generation and batch processing)."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Show available options:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./bin/cli\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generate code from a specific DSL file:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./bin/cli generate <file>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node ./bin/cli generate src/example.spark\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If you're on Windows PowerShell, the above ",(0,r.jsx)(n.code,{children:"npm"})," and ",(0,r.jsx)(n.code,{children:"node"})," commands work the same."]}),"\n",(0,r.jsx)(n.li,{children:"If generation or build fails, re-run step 2 (grammar generation) before building to ensure generated sources are up to date."}),"\n",(0,r.jsx)(n.li,{children:'Use the "Developer: Toggle Developer Tools" command in the Extension Development Host to inspect runtime logs.'}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(6540);const o={},i=r.createContext(o);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);