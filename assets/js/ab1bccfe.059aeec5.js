"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[3414],{4023:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=n(4848),s=n(8453);const a={sidebar_position:8.1,title:"Java Architecture",parent:"Architecture"},t="Java Spark Architecture",o={id:"spark/sparklib_advanced/backend/generated_arch/Java",title:"Java Architecture",description:"This document describes the backend project structure in Java Spark, organized in layers to facilitate maintenance, testability, and component reuse.",source:"@site/docs/spark/5_sparklib_advanced/4_backend/4_generated_arch/1_Java.md",sourceDirName:"spark/5_sparklib_advanced/4_backend/4_generated_arch",slug:"/spark/sparklib_advanced/backend/generated_arch/Java",permalink:"/leds-tools-public/spark/sparklib_advanced/backend/generated_arch/Java",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8.1,frontMatter:{sidebar_position:8.1,title:"Java Architecture",parent:"Architecture"},sidebar:"spark",previous:{title:"Minimal API Csharp",permalink:"/leds-tools-public/spark/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API"},next:{title:"Front-End Architecture",permalink:"/leds-tools-public/spark/sparklib_advanced/frontend/frontend"}},c={},l=[{value:"Layered Architecture",id:"layered-architecture",level:2},{value:"Data Layer",id:"data-layer",level:3},{value:"Application/API Layer",id:"applicationapi-layer",level:3},{value:"Main Folders",id:"main-folders",level:2},{value:"Entity",id:"entity",level:3},{value:"models/",id:"models",level:4},{value:"repositories/",id:"repositories",level:4},{value:"sql/",id:"sql",level:4},{value:"register/",id:"register",level:4},{value:"resources/",id:"resources",level:4},{value:"Webservice",id:"webservice",level:3},{value:"application/",id:"application",level:4},{value:"controllers/",id:"controllers",level:4},{value:"records/",id:"records",level:4},{value:"repositories/",id:"repositories-1",level:4},{value:"resources/graphql/",id:"resourcesgraphql",level:4},{value:"References",id:"references",level:2},{value:"Improvement Points",id:"improvement-points",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"java-spark-architecture",children:"Java Spark Architecture"})}),"\n",(0,i.jsxs)(r.p,{children:["This document describes the backend project structure in ",(0,i.jsx)(r.strong,{children:"Java Spark"}),", organized in layers to facilitate maintenance, testability, and component reuse."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"layered-architecture",children:"Layered Architecture"}),"\n",(0,i.jsx)(r.p,{children:"Backend development in Java was structured in layers, organizing the system in hierarchies, each with its own responsibilities. The division was made as follows:"}),"\n",(0,i.jsx)(r.mermaid,{value:'%%{init: {\'theme\': \'neutral\'}}%%\r\nflowchart TB\r\n    subgraph "Java Spark Architecture"\r\n        subgraph DataLayer["Data Layer (entity)"]\r\n            Models["models/\\nContains entity classes with\\nJPA annotations"]\r\n            Repositories["repositories/\\nJPA Repository interfaces\\nfor database access"]\r\n            SQL["sql/\\nSQL scripts for\\ndata replication and\\ndatabase constraints"]\r\n            Register["register/\\nProject metadata"]\r\n            Resources1["resources/\\nConfiguration files\\n(application.properties)"]\r\n        end\r\n\r\n        subgraph ApplicationLayer["Application/API Layer (webservice)"]\r\n            Application["application/\\nContains Application.java\\n(Spring Boot initialization)"]\r\n            Controllers["controllers/\\nREST/GraphQL controllers\\nfor API endpoints"]\r\n            Records["records/\\nData Transfer Objects\\n(DTOs)"]\r\n            ReposWeb["repositories/\\nAdapters between\\ncontrollers and domain layer"]\r\n            GraphQL["resources/graphql/\\nGraphQL schema definitions"]\r\n        end\r\n\r\n        %% Relationships between packages\r\n        DataLayer --\x3e ApplicationLayer\r\n        Repositories --\x3e ReposWeb\r\n        Models --\x3e Records\r\n    end\r\n\r\n    %% External components\r\n    Frontend["Frontend\\n(UI)"]\r\n    APIConsumers["API Consumers"]\r\n    Database["Database"]\r\n\r\n    %% External relationships\r\n    Frontend --\x3e Controllers\r\n    APIConsumers --\x3e Controllers\r\n    Repositories --\x3e Database'}),"\n",(0,i.jsx)(r.h3,{id:"data-layer",children:"Data Layer"}),"\n",(0,i.jsxs)(r.p,{children:["Responsible for entities and repositories (",(0,i.jsx)(r.code,{children:"entity/"})," folder)."]}),"\n",(0,i.jsx)(r.h3,{id:"applicationapi-layer",children:"Application/API Layer"}),"\n",(0,i.jsxs)(r.p,{children:["Includes controllers and exposed services (",(0,i.jsx)(r.code,{children:"webservice/"})," folder)."]}),"\n",(0,i.jsx)(r.p,{children:"This structure facilitated maintenance, testability, and the reuse of components."}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"main-folders",children:"Main Folders"}),"\n",(0,i.jsx)(r.h3,{id:"entity",children:"Entity"}),"\n",(0,i.jsx)(r.h4,{id:"models",children:"models/"}),"\n",(0,i.jsxs)(r.p,{children:["Contains Java classes corresponding to entities defined in the ",(0,i.jsx)(r.code,{children:".spark"})," file (e.g., ",(0,i.jsx)(r.code,{children:"Agricultor"}),", ",(0,i.jsx)(r.code,{children:"Propriedade"}),"). These entities reflect database tables and include JPA annotations."]}),"\n",(0,i.jsx)(r.h4,{id:"repositories",children:"repositories/"}),"\n",(0,i.jsxs)(r.p,{children:["Database access interfaces such as ",(0,i.jsx)(r.code,{children:"AgricultorRepository.java"}),", which extend ",(0,i.jsx)(r.code,{children:"JpaRepository"})," and are used for queries."]}),"\n",(0,i.jsx)(r.h4,{id:"sql",children:"sql/"}),"\n",(0,i.jsx)(r.p,{children:"SQL scripts useful for data replication setup and database constraint creation."}),"\n",(0,i.jsx)(r.h4,{id:"register",children:"register/"}),"\n",(0,i.jsxs)(r.p,{children:["Stores project metadata, such as the ",(0,i.jsx)(r.code,{children:"morango-register.json"})," file, which registers information about created modules and entities."]}),"\n",(0,i.jsx)(r.h4,{id:"resources",children:"resources/"}),"\n",(0,i.jsxs)(r.p,{children:["Application configuration files such as ",(0,i.jsx)(r.code,{children:"application.properties"}),", containing Spring Boot configurations."]}),"\n",(0,i.jsx)(r.h3,{id:"webservice",children:"Webservice"}),"\n",(0,i.jsx)(r.p,{children:"Service exposure layer of the application. This is where application logic interfaces with the outside world (frontend or API consumers)."}),"\n",(0,i.jsx)(r.h4,{id:"application",children:"application/"}),"\n",(0,i.jsxs)(r.p,{children:["Contains the ",(0,i.jsx)(r.code,{children:"Application.java"})," class that initializes the Spring Boot project."]}),"\n",(0,i.jsx)(r.h4,{id:"controllers",children:"controllers/"}),"\n",(0,i.jsx)(r.p,{children:"REST/GraphQL controllers generated for each entity. Handle requests and define endpoints."}),"\n",(0,i.jsx)(r.h4,{id:"records",children:"records/"}),"\n",(0,i.jsxs)(r.p,{children:["DTOs (Data Transfer Objects), which carry input and output data of the API. Example: ",(0,i.jsx)(r.code,{children:"AgricultorInput.java"}),"."]}),"\n",(0,i.jsx)(r.h4,{id:"repositories-1",children:"repositories/"}),"\n",(0,i.jsx)(r.p,{children:"Serve as adapters between controllers and domain-layer repositories."}),"\n",(0,i.jsx)(r.h4,{id:"resourcesgraphql",children:"resources/graphql/"}),"\n",(0,i.jsxs)(r.p,{children:["Contains the ",(0,i.jsx)(r.code,{children:"schema.graphqls"})," file, which defines the types, queries, and mutations of the GraphQL API, based on the entities defined in the ",(0,i.jsx)(r.code,{children:".spark"})," file."]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.alura.com.br/artigos/padroes-arquiteturais-arquitetura-software-descomplicada",children:"https://www.alura.com.br/artigos/padroes-arquiteturais-arquitetura-software-descomplicada"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://jeziellago.medium.com/padr%C3%B5es-de-arquitetura-de-software-parte-i-a1d23c323a40",children:"https://jeziellago.medium.com/padr%C3%B5es-de-arquitetura-de-software-parte-i-a1d23c323a40"})}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"improvement-points",children:"Improvement Points"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Better naming of web repositories"}),": ",(0,i.jsx)(r.code,{children:"AgricultorRepositoryWeb.java"})," can be confused with ",(0,i.jsx)(r.code,{children:"AgricultorRepository.java"}),". More specific names like ",(0,i.jsx)(r.code,{children:"AgricultorGraphQLAdapter"})," would prevent such issues we encountered during analysis."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Creation of a service layer"}),": Adding an intermediate layer between controllers and repositories with pure business logic would increase separation of concerns."]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>o});var i=n(6540);const s={},a=i.createContext(s);function t(e){const r=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(a.Provider,{value:r},e.children)}}}]);