"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[7538],{6340:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const i={sidebar_position:1,title:"Architecture"},c="Advanced Concepts",a={id:"oraculo/advanced_concepts/architecture",title:"Architecture",description:"Architecture",source:"@site/docs/oraculo/2_advanced_concepts/1_architecture.md",sourceDirName:"oraculo/2_advanced_concepts",slug:"/oraculo/advanced_concepts/architecture",permalink:"/leds-tools-public/oraculo/advanced_concepts/architecture",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Architecture"},sidebar:"oraculo",previous:{title:"Contribution Prerequisites",permalink:"/leds-tools-public/oraculo/basic_concepts/development_prerequisites"},next:{title:"How to Contribute",permalink:"/leds-tools-public/oraculo/how_to_contribute/"}},o={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Roles",id:"roles",level:3},{value:"Components",id:"components",level:3},{value:"\ud83d\udc33 Docker",id:"-docker",level:4},{value:"\ud83d\udd04 Airbyte (ETL)",id:"-airbyte-etl",level:4},{value:"\ud83d\udd0c Fast API (Backend)",id:"-fast-api-backend",level:3},{value:"API Usage",id:"api-usage",level:5},{value:"\ud83e\udde0 Vanna.ai (LLM)",id:"-vannaai-llm",level:4},{value:"\ud83e\udde0 Gemini (LLM)",id:"-gemini-llm",level:4},{value:"\ud83c\udf10 OpenWebUI (Interface)",id:"-openwebui-interface",level:4},{value:"OpenWebUI Usage",id:"openwebui-usage",level:5}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"advanced-concepts",children:"Advanced Concepts"})}),"\n",(0,s.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"roles",children:"Roles"}),"\n",(0,s.jsx)(n.p,{children:"Components mapped by role"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Component"}),(0,s.jsx)(n.th,{children:"Role"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"OpenWebUI"}),(0,s.jsx)(n.td,{children:"Interface"}),(0,s.jsx)(n.td,{children:"Frontend for user interaction, sends the question directly to web api endpoint."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"FastAPI"}),(0,s.jsx)(n.td,{children:"Backend/API"}),(0,s.jsx)(n.td,{children:"Processing questions and response coordenation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Airbyte"}),(0,s.jsx)(n.td,{children:"ETL"}),(0,s.jsx)(n.td,{children:"Imports github external data and loads it in the database"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Vanna.AI"}),(0,s.jsx)(n.td,{children:"LLM / IA"}),(0,s.jsx)(n.td,{children:"Converts questions to SQL based on natural language"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Gemini"}),(0,s.jsx)(n.td,{children:"LLM / IA"}),(0,s.jsx)(n.td,{children:"Converts questions and given SQL query into the answer"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Postgres/Chromadb"}),(0,s.jsx)(n.td,{children:"Banco de Dados"}),(0,s.jsx)(n.td,{children:"Stores collected data used by Gemini"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,s.jsx)(n.p,{children:"The set of technologies that compose the app."}),"\n",(0,s.jsx)(n.h4,{id:"-docker",children:"\ud83d\udc33 Docker"}),"\n",(0,s.jsx)(n.p,{children:"Used to isolate different services, that of being:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Database (Postgres)"}),"\n",(0,s.jsx)(n.li,{children:"Backend (ETL + FastAPI)"}),"\n",(0,s.jsx)(n.li,{children:"Frontend (OpenWeb UI)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["On running ",(0,s.jsx)(n.code,{children:"bash docker compose up -d"})," docker starts downloading and setting up the containers.\r\nThe docker compose executing sequence is as follows:\r\nDatabase: Postgres setting and startup\r\n\u2193\r\nBackend: ETL process from start to finish, then, starts the web app listening.\r\n\u2193\r\nFrontend: Only stars after everything necessary (both services above)."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"-airbyte-etl",children:"\ud83d\udd04 Airbyte (ETL)"}),"\n",(0,s.jsx)(n.p,{children:"On backend startup, automatically starts the ETL process, using Airbyte."}),"\n",(0,s.jsx)(n.p,{children:"Extract: Via PyAirbyte, it access the github api, fetches de data and caches it."}),"\n",(0,s.jsx)(n.p,{children:"Transform: Acess the cached data and stores it in local variables for the load process."}),"\n",(0,s.jsx)(n.p,{children:"Load: Performs a sort of upsert, checking if a unique value exists in the table, if not, then executes insert into the database."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"-fast-api-backend",children:"\ud83d\udd0c Fast API (Backend)"}),"\n",(0,s.jsx)(n.p,{children:"The API starts after the ETL process is concluded."}),"\n",(0,s.jsxs)(n.p,{children:["Fast API is started via ",(0,s.jsx)(n.a,{href:"https://www.uvicorn.org/",children:"uvicorn"})," and starts listening on port: 8000."]}),"\n",(0,s.jsx)(n.p,{children:"Now the web server is ready to accept requests."}),"\n",(0,s.jsx)(n.h5,{id:"api-usage",children:"API Usage"}),"\n",(0,s.jsx)(n.p,{children:"Locally, you can access:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast API"}),": ",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Once the app is running, you can send ",(0,s.jsx)(n.strong,{children:"POST"})," requests to ",(0,s.jsx)(n.code,{children:"localhost:8000/ask"}),", with a ",(0,s.jsx)(n.strong,{children:"JSON"}),' with a  "question" field in the JSON body. For example:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "question": "What was user x last commit?"\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"The app will send the input through Vanna, Gemini, then return the answer."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"-vannaai-llm",children:"\ud83e\udde0 Vanna.ai (LLM)"}),"\n",(0,s.jsx)(n.p,{children:"Converts natural language questions into accurate SQL queries for your database, after recognizing your schema and was recently trained with customized questions."}),"\n",(0,s.jsx)(n.p,{children:"In the execution flow, its accessed right after receiving input from the user and before calling the Gemini API."}),"\n",(0,s.jsx)(n.p,{children:"The SQL generated by Vanna will be run and the query result will be sent to Gemini with the question."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"-gemini-llm",children:"\ud83e\udde0 Gemini (LLM)"}),"\n",(0,s.jsx)(n.p,{children:"The Gemini model will simply receive the input together with the query results and is asked to form a response with this given context and data."}),"\n",(0,s.jsx)(n.p,{children:"Its given output will be returned by the API, to the user interface."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"-openwebui-interface",children:"\ud83c\udf10 OpenWebUI (Interface)"}),"\n",(0,s.jsx)(n.p,{children:"Interface for user interaction, not complex at all."}),"\n",(0,s.jsx)(n.p,{children:"Has to setup manually, inserting the function at startup."}),"\n",(0,s.jsx)(n.p,{children:"The function works as a pipeline, so the service knows what to do with your input. In this case, send to the backend through the endpoint."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h5,{id:"openwebui-usage",children:"OpenWebUI Usage"}),"\n",(0,s.jsx)(n.p,{children:"OpenWeb UI can be accessed:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OpenWebUI"}),": ",(0,s.jsx)(n.a,{href:"http://localhost:3000",children:"http://localhost:3000"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/leds-tools-public/oraculo/basic_concepts/how_to_use",children:"Click here"})," to view the step-by-step setup."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);