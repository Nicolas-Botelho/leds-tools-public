"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[4762],{6358:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var t=n(4848),i=n(8453);const s={},a="Library Architecture",o={id:"made/advanced-topics/made_lib_architecture",title:"Library Architecture",description:"The MADE Library (leds-tools-made-lib) is the core processing engine that handles data transformation, documentation generation, and GitHub integration.",source:"@site/docs/made/advanced-topics/3_made_lib_architecture.md",sourceDirName:"made/advanced-topics",slug:"/made/advanced-topics/made_lib_architecture",permalink:"/leds-tools-public/made/advanced-topics/made_lib_architecture",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"made",previous:{title:"Tool Architecture",permalink:"/leds-tools-public/made/advanced-topics/made_tool_architecture"},next:{title:"Grammar Tokens",permalink:"/leds-tools-public/made/advanced-topics/made_grammar_tokens"}},c={},d=[{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Core Components",id:"core-components",level:2},{value:"1. Data Models (<code>model/models.ts</code>)",id:"1-data-models-modelmodelsts",level:3},{value:"Primary Models",id:"primary-models",level:4},{value:"2. Report Manager (<code>index.ts</code>)",id:"2-report-manager-indexts",level:3},{value:"Main Entry Point",id:"main-entry-point",level:4},{value:"3. Markdown Services (<code>markdown/</code>)",id:"3-markdown-services-markdown",level:3},{value:"MarkdownService Orchestrator",id:"markdownservice-orchestrator",level:4},{value:"Specialized Services",id:"specialized-services",level:4},{value:"4. Chart Generation (<code>chart/</code>)",id:"4-chart-generation-chart",level:3},{value:"Chart Generators",id:"chart-generators",level:4},{value:"5. GitHub Integration (<code>service/</code>)",id:"5-github-integration-service",level:3},{value:"GitHubService (Data Extraction)",id:"githubservice-data-extraction",level:4},{value:"GitHubPushService (Data Publishing)",id:"githubpushservice-data-publishing",level:4},{value:"Data Flow",id:"data-flow",level:2},{value:"1. <strong>Input Processing</strong>",id:"1-input-processing",level:3},{value:"2. <strong>Documentation Generation</strong>",id:"2-documentation-generation",level:3},{value:"3. <strong>GitHub Integration</strong>",id:"3-github-integration",level:3},{value:"Key Features",id:"key-features",level:2},{value:"Repository Pattern",id:"repository-pattern",level:3},{value:"Dependency Analysis",id:"dependency-analysis",level:3},{value:"Chart Generation Pipeline",id:"chart-generation-pipeline",level:3},{value:"Extension Points",id:"extension-points",level:2},{value:"Custom Chart Generators",id:"custom-chart-generators",level:3},{value:"Custom Markdown Services",id:"custom-markdown-services",level:3}];function l(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"library-architecture",children:"Library Architecture"})}),"\n",(0,t.jsxs)(r.p,{children:["The MADE Library (",(0,t.jsx)(r.code,{children:"leds-tools-made-lib"}),") is the core processing engine that handles data transformation, documentation generation, and GitHub integration."]}),"\n",(0,t.jsx)(r.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,t.jsx)(r.mermaid,{value:"graph TD\r\n    A[Data Input] --\x3e B[ReportManager]\r\n    B --\x3e C[MarkdownService]\r\n    B --\x3e D[GitHubService]\r\n    B --\x3e E[ChartGenerators]\r\n    C --\x3e F[Documentation Output]\r\n    D --\x3e G[GitHub Issues/Projects]\r\n    E --\x3e H[SVG Charts & Diagrams]"}),"\n",(0,t.jsx)(r.h2,{id:"core-components",children:"Core Components"}),"\n",(0,t.jsxs)(r.h3,{id:"1-data-models-modelmodelsts",children:["1. Data Models (",(0,t.jsx)(r.code,{children:"model/models.ts"}),")"]}),"\n",(0,t.jsx)(r.h4,{id:"primary-models",children:"Primary Models"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"interface Project {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    startDate?: string;\r\n    dueDate?: string;\r\n}\r\n\r\ninterface Issue {\r\n    id: string;\r\n    type: string;\r\n    subtype: string;\r\n    title: string;\r\n    description?: string;\r\n    labels?: string[];\r\n    assignee?: TeamMember;\r\n    dependencies?: string[];\r\n}\r\n\r\ninterface TimeBox {\r\n    id: string;\r\n    name: string;\r\n    description?: string;\r\n    startDate?: string;\r\n    endDate?: string;\r\n    status?: string;\r\n    sprintItems: SprintItem[];\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"2-report-manager-indexts",children:["2. Report Manager (",(0,t.jsx)(r.code,{children:"index.ts"}),")"]}),"\n",(0,t.jsx)(r.h4,{id:"main-entry-point",children:"Main Entry Point"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"export class ReportManager {\r\n    // Generate documentation\r\n    public createReport(dbPath: string): void {\r\n        const markdownService = new MarkdownService(dbPath);\r\n        markdownService.createManagementDocumentation();\r\n    }\r\n\r\n    // GitHub ETL (Extract, Transform, Load)\r\n    public async githubETL(token: string, org: string, project: string): Promise<void> {\r\n        GitHubTokenManager.initialize(token);\r\n        const githubService = new GitHubService();\r\n        \r\n        await githubService.ETLProject(org, project);\r\n        await githubService.ETLIssue(org, project);\r\n        await githubService.ETLBacklog(org, project);\r\n        await githubService.ETLTimeBox(org, project);\r\n        await githubService.ETLTeam(org);\r\n    }\r\n\r\n    // Push to GitHub\r\n    public async githubPush(/* parameters */): Promise<void> {\r\n        GitHubTokenManager.initialize(token);\r\n        const pushService = new GitHubPushService();\r\n        await pushService.fullPush(org, repo, project, epics, stories, tasks);\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"3-markdown-services-markdown",children:["3. Markdown Services (",(0,t.jsx)(r.code,{children:"markdown/"}),")"]}),"\n",(0,t.jsx)(r.h4,{id:"markdownservice-orchestrator",children:"MarkdownService Orchestrator"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class MarkdownService {\r\n    constructor(private dbPath: string) {}\r\n\r\n    createManagementDocumentation(): void {\r\n        this.generateBacklogDocumentation();\r\n        this.generateTimeBoxDocumentation();\r\n        this.generateRoadmapDocumentation();\r\n        this.generateProjectSummary();\r\n    }\r\n\r\n    private generateBacklogDocumentation(): void {\r\n        const backlogService = new MarkdownBacklogService(this.dbPath);\r\n        backlogService.generate();\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"specialized-services",children:"Specialized Services"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"MarkdownBacklogService"}),": Epic/Story/Task documentation"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"MarkdownTimeBoxService"}),": Sprint and iteration reports"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"MarkdownRoadmapService"}),": Milestone and release planning"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"MarkdownTeamService"}),": Team structure and assignments"]}),"\n"]}),"\n",(0,t.jsxs)(r.h3,{id:"4-chart-generation-chart",children:["4. Chart Generation (",(0,t.jsx)(r.code,{children:"chart/"}),")"]}),"\n",(0,t.jsx)(r.h4,{id:"chart-generators",children:"Chart Generators"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Cumulative Flow Diagram\r\nclass CumulativeFlowDiagram {\r\n    generate(timeboxes: TimeBox[]): string {\r\n        // Generate SVG chart showing work progress\r\n        return svgContent;\r\n    }\r\n}\r\n\r\n// Project Throughput\r\nclass ProjectThroughputGenerator {\r\n    generate(issues: Issue[]): string {\r\n        // Generate throughput analysis chart\r\n        return svgContent;\r\n    }\r\n}\r\n\r\n// Dependency Analysis\r\nclass ProjectDependencyAnalyzer {\r\n    generateMermaidDiagram(issues: Issue[]): string {\r\n        // Generate Mermaid dependency diagram\r\n        return mermaidContent;\r\n    }\r\n}\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"5-github-integration-service",children:["5. GitHub Integration (",(0,t.jsx)(r.code,{children:"service/"}),")"]}),"\n",(0,t.jsx)(r.h4,{id:"githubservice-data-extraction",children:"GitHubService (Data Extraction)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class GitHubService {\r\n    async ETLProject(org: string, projectName: string): Promise<Project> {\r\n        const githubProject = await this.getProjectByTitle(org, projectName);\r\n        const project = await this.mapGitHubProjectToProject(githubProject);\r\n        \r\n        // Save to local data store\r\n        FileSystemRepository.save('project.json', project);\r\n        return project;\r\n    }\r\n\r\n    async ETLIssue(org: string, projectName: string): Promise<Issue[]> {\r\n        // Extract issues from GitHub\r\n        // Transform to internal format\r\n        // Load into local storage\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"githubpushservice-data-publishing",children:"GitHubPushService (Data Publishing)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class GitHubPushService {\r\n    async fullPush(\r\n        org: string,\r\n        repo: string,\r\n        project: Project,\r\n        epics: Issue[],\r\n        stories: Issue[],\r\n        tasks: Issue[]\r\n    ): Promise<void> {\r\n        const projectId = await this.pushProject(org, project);\r\n        \r\n        for (const epic of epics) {\r\n            await this.pushIssue(org, repo, projectId, epic);\r\n        }\r\n        // ... push stories and tasks\r\n    }\r\n\r\n    private async pushProject(org: string, project: Project): Promise<string> {\r\n        const mutation = `\r\n            mutation CreateProject($input: CreateProjectV2Input!) {\r\n                createProjectV2(input: $input) {\r\n                    projectV2 { id }\r\n                }\r\n            }\r\n        `;\r\n        \r\n        return await this.graphqlRequest(mutation, variables);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"data-flow",children:"Data Flow"}),"\n",(0,t.jsxs)(r.h3,{id:"1-input-processing",children:["1. ",(0,t.jsx)(r.strong,{children:"Input Processing"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// From MADE Tool or direct usage\r\nconst project: Project = { /* project data */ };\r\nconst issues: Issue[] = [ /* issues data */ ];\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"2-documentation-generation",children:["2. ",(0,t.jsx)(r.strong,{children:"Documentation Generation"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Create comprehensive documentation\r\nconst markdownService = new MarkdownService('./data');\r\nmarkdownService.createManagementDocumentation();\r\n\r\n// Output:\r\n// - 01_project_overview.md\r\n// - 02_backlogs.md  \r\n// - 03_sprints.md\r\n// - 04_roadmap.md\r\n// - charts/dependencies.svg\n"})}),"\n",(0,t.jsxs)(r.h3,{id:"3-github-integration",children:["3. ",(0,t.jsx)(r.strong,{children:"GitHub Integration"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// Push to GitHub\r\nawait reportManager.githubPush(token, org, repo, project, epics, stories, tasks);\r\n\r\n// Creates:\r\n// - GitHub Issues for each Epic/Story/Task\r\n// - GitHub Project with proper structure\r\n// - Milestones for roadmap items\r\n// - Team assignments and labels\n"})}),"\n",(0,t.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsx)(r.h3,{id:"repository-pattern",children:"Repository Pattern"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"interface Repository<T> {\r\n    save(filename: string, data: T): void;\r\n    load(filename: string): T;\r\n    exists(filename: string): boolean;\r\n}\r\n\r\nclass FileSystemRepository<T> implements Repository<T> {\r\n    // File-based data persistence\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"dependency-analysis",children:"Dependency Analysis"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class DependencyGraph {\r\n    addNode(id: string, dependencies: string[]): void;\r\n    detectCycles(): string[][];\r\n    getTopologicalOrder(): string[];\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"chart-generation-pipeline",children:"Chart Generation Pipeline"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Data Extraction"}),": Pull relevant metrics from data models"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Processing"}),": Calculate charts data points"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Rendering"}),": Generate SVG or Mermaid output"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Integration"}),": Embed in markdown documentation"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"extension-points",children:"Extension Points"}),"\n",(0,t.jsx)(r.h3,{id:"custom-chart-generators",children:"Custom Chart Generators"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class CustomChartGenerator extends BaseChartGenerator {\r\n    generate(data: any[]): string {\r\n        // Custom chart logic\r\n        return svgContent;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"custom-markdown-services",children:"Custom Markdown Services"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class CustomMarkdownService {\r\n    constructor(private dbPath: string) {}\r\n    \r\n    generateCustomReport(): void {\r\n        // Custom documentation logic\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"This architecture provides a robust foundation for data processing while maintaining extensibility for custom requirements."})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);