"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[823],{2708:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=r(4848),t=r(8453);const a={},s="Grammar Tokens",o={id:"made/advanced-topics/made_grammar_tokens",title:"Grammar Tokens",description:"The MADE DSL uses Langium grammar to define its syntax. Understanding the grammar structure is essential for developers extending or integrating with MADE.",source:"@site/docs/made/advanced-topics/4_made_grammar_tokens.md",sourceDirName:"made/advanced-topics",slug:"/made/advanced-topics/made_grammar_tokens",permalink:"/leds-tools-public/made/advanced-topics/made_grammar_tokens",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"made",previous:{title:"Library Architecture",permalink:"/leds-tools-public/made/advanced-topics/made_lib_architecture"},next:{title:"Artifact Map",permalink:"/leds-tools-public/made/advanced-topics/made_artifact_map"}},d={},l=[{value:"Grammar Structure",id:"grammar-structure",level:2},{value:"Main Grammar Entry Point",id:"main-grammar-entry-point",level:3},{value:"Core Tokens",id:"core-tokens",level:2},{value:"1. Project Definition",id:"1-project-definition",level:3},{value:"2. Team Structure",id:"2-team-structure",level:3},{value:"3. Process Definition",id:"3-process-definition",level:3},{value:"4. Backlog Structure",id:"4-backlog-structure",level:3},{value:"5. TimeBox (Sprint) Definition",id:"5-timebox-sprint-definition",level:3},{value:"6. Roadmap Structure",id:"6-roadmap-structure",level:3},{value:"Terminal Definitions",id:"terminal-definitions",level:2},{value:"Basic Types",id:"basic-types",level:3},{value:"Enumerations",id:"enumerations",level:3},{value:"Helper Types",id:"helper-types",level:3},{value:"Advanced Grammar Features",id:"advanced-grammar-features",level:2},{value:"Cross-References",id:"cross-references",level:3},{value:"Optional Properties",id:"optional-properties",level:3},{value:"Collections",id:"collections",level:3},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Date Format Validation",id:"date-format-validation",level:3},{value:"Reference Validation",id:"reference-validation",level:3},{value:"Grammar Extension Points",id:"grammar-extension-points",level:2},{value:"Adding New Component Types",id:"adding-new-component-types",level:3},{value:"Adding New Properties",id:"adding-new-properties",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"grammar-tokens",children:"Grammar Tokens"})}),"\n",(0,i.jsx)(n.p,{children:"The MADE DSL uses Langium grammar to define its syntax. Understanding the grammar structure is essential for developers extending or integrating with MADE."}),"\n",(0,i.jsx)(n.h2,{id:"grammar-structure",children:"Grammar Structure"}),"\n",(0,i.jsx)(n.h3,{id:"main-grammar-entry-point",children:"Main Grammar Entry Point"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"grammar Made\r\n\r\nimport 'helpers'\r\nimport 'terminals'\r\nimport 'projects'\r\nimport 'backlog'\r\nimport 'processes'\r\nimport 'timebox'\r\nimport 'team'\r\nimport 'roadmap'\r\n\r\nentry Model:\r\n    (project=Project)\r\n    (components+=(Team|Process|Backlog|TimeBox|Roadmap))*\n"})}),"\n",(0,i.jsx)(n.h2,{id:"core-tokens",children:"Core Tokens"}),"\n",(0,i.jsx)(n.h3,{id:"1-project-definition",children:"1. Project Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"Project:\r\n    'project' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('startDate:' startDate=DATE)?\r\n        ('dueDate:' dueDate=DATE)?\r\n        ('completedDate:' completedDate=DATE)?\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-team-structure",children:"2. Team Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"Team:\r\n    'team' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        (teammember+=TeamMember)*\r\n    '}';\r\n\r\nTeamMember:\r\n    'teammember' id=ID '{'\r\n        'name:' name=STRING\r\n        'email:' email=STRING\r\n        ('discord:' discord=STRING)?\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-process-definition",children:"3. Process Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"Process:\r\n    'process' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        (activities+=Activity)*\r\n    '}';\r\n\r\nActivity:\r\n    'activity' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('DefinitionDone:' definitionDone=STRING)?\r\n        ('DefinitionReady:' definitionReady=STRING)?\r\n        ('Learning:' learning=STRING)?\r\n        ('Label:' label=ID)?\r\n        (tasks+=TaskProcess)*\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"4-backlog-structure",children:"4. Backlog Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"Backlog:\r\n    'backlog' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        (items+=BacklogItem)*\r\n    '}';\r\n\r\nEpic:\r\n    'epic' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('process:' process=[Process:QualifiedName])?\r\n        ('Criterions:' criterions=StringList)?\r\n        ('observation:' observation=STRING)?\r\n        (userstories+=UserStory)*\r\n    '}';\r\n\r\nUserStory:\r\n    'story' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('activity:' activity=[Activity:QualifiedName])?\r\n        ('depends:' depends=ReferenceList)?\r\n        ('Requirements:' requirements=StringList)?\r\n        ('Criterions:' criterions=StringList)?\r\n        ('observation:' observation=STRING)?\r\n        (tasks+=Task)*\r\n    '}';\r\n\r\nTask:\r\n    'task' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('task:' taskRef=[TaskProcess:QualifiedName])?\r\n        ('depends:' depends=ReferenceList)?\r\n        ('Deliverables:' deliverables=StringList)?\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"5-timebox-sprint-definition",children:"5. TimeBox (Sprint) Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"TimeBox:\r\n    'sprint' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('startDate:' startDate=DATE)?\r\n        ('endDate:' endDate=DATE)?\r\n        ('status:' status=SprintStatus)?\r\n        ('comment:' comment=STRING)?\r\n        ('completeDate:' completeDate=DATE)?\r\n        (sprintbacklog+=SprintBacklog)*\r\n    '}';\r\n\r\nSprintBacklog:\r\n    'sprintbacklog' id=ID '{'\r\n        (items+=SprintItem)*\r\n    '}';\r\n\r\nSprintItem:\r\n    'item' reference=[BacklogItem:QualifiedName] '{'\r\n        ('assignee:' assignee=[TeamMember:QualifiedName])?\r\n        ('dueDate:' dueDate=DATE)?\r\n        ('startDate:' startDate=DATE)?\r\n        ('completedDate:' completedDate=DATE)?\r\n        ('status:' status=ItemStatus)?\r\n        ('complexity:' complexity=Complexity)?\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"6-roadmap-structure",children:"6. Roadmap Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"Roadmap:\r\n    'roadmap' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        (milestones+=Milestone)*\r\n    '}';\r\n\r\nMilestone:\r\n    'milestone' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('startDate:' startDate=DATE)?\r\n        ('dueDate:' dueDate=DATE)?\r\n        ('completedDate:' completedDate=DATE)?\r\n        ('status:' status=MilestoneStatus)?\r\n        ('depends:' depends=[Milestone:QualifiedName])?\r\n        (releases+=Release)*\r\n    '}';\r\n\r\nRelease:\r\n    'release' id=ID '{'\r\n        ('name:' name=STRING)?\r\n        ('description:' description=STRING)?\r\n        ('version:' version=STRING)?\r\n        ('dueDate:' dueDate=DATE)?\r\n        ('releasedDate:' releasedDate=DATE)?\r\n        ('status:' status=ReleaseStatus)?\r\n        (('item:' item=[BacklogItem:QualifiedName]) | \r\n         ('itens:' items=ReferenceList))?\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h2,{id:"terminal-definitions",children:"Terminal Definitions"}),"\n",(0,i.jsx)(n.h3,{id:"basic-types",children:"Basic Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:'terminal ID: /[_a-zA-Z][\\w_]*/;\r\nterminal STRING: /"[^"]*"/;\r\nterminal DATE: /\\d{4}-\\d{2}-\\d{2}/;\r\nterminal INT returns number: /[0-9]+/;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"enumerations",children:"Enumerations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"enum SprintStatus:\r\n    PLANNED | IN_PROGRESS | CLOSED;\r\n\r\nenum ItemStatus:\r\n    TODO | DOING | DONE;\r\n\r\nenum Complexity:\r\n    LOW | MEDIUM | HIGH;\r\n\r\nenum MilestoneStatus:\r\n    PLANNED | IN_PROGRESS | COMPLETED | CANCELLED;\r\n\r\nenum ReleaseStatus:\r\n    PLANNED | IN_DEVELOPMENT | RELEASED | CANCELLED;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"helper-types",children:"Helper Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"StringList:\r\n    values+=STRING (',' values+=STRING)*;\r\n\r\nReferenceList:\r\n    references+=[BacklogItem:QualifiedName] (',' references+=[BacklogItem:QualifiedName])*;\r\n\r\nQualifiedName:\r\n    ID ('.' ID)*;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-grammar-features",children:"Advanced Grammar Features"}),"\n",(0,i.jsx)(n.h3,{id:"cross-references",children:"Cross-References"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"// Reference to team member\r\n'assignee:' assignee=[TeamMember:QualifiedName]\r\n\r\n// Reference to process activity\r\n'activity:' activity=[Activity:QualifiedName]\r\n\r\n// Reference to other backlog items for dependencies\r\n'depends:' depends=ReferenceList\n"})}),"\n",(0,i.jsx)(n.h3,{id:"optional-properties",children:"Optional Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"// Optional description field\r\n('description:' description=STRING)?\r\n\r\n// Optional date fields\r\n('startDate:' startDate=DATE)?\r\n('dueDate:' dueDate=DATE)?\n"})}),"\n",(0,i.jsx)(n.h3,{id:"collections",children:"Collections"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"// Multiple team members\r\n(teammember+=TeamMember)*\r\n\r\n// Multiple tasks in user story\r\n(tasks+=Task)*\r\n\r\n// Multiple items in sprint backlog\r\n(items+=SprintItem)*\n"})}),"\n",(0,i.jsx)(n.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,i.jsx)(n.h3,{id:"date-format-validation",children:"Date Format Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"export function validateDates(node: any, accept: any) {\r\n    const typeMeta = reflection.getTypeMetaData(node.$type);\r\n    for (const prop of typeMeta.properties) {\r\n        if (prop.name.match(/date$/i) && typeof node[prop.name] === 'string') {\r\n            const value = node[prop.name];\r\n            if (value && !/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) {\r\n                accept('error', `Property \"${prop.name}\" must be in ISO 8601 format (YYYY-MM-DD)`, \r\n                      { node, property: prop.name });\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reference-validation",children:"Reference Validation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cross-references are validated at parse time"}),"\n",(0,i.jsx)(n.li,{children:"Scoped resolution ensures correct reference targets"}),"\n",(0,i.jsx)(n.li,{children:"Dependency cycles are detected and reported"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"grammar-extension-points",children:"Grammar Extension Points"}),"\n",(0,i.jsx)(n.h3,{id:"adding-new-component-types",children:"Adding New Component Types"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"// Add to main grammar\r\nentry Model:\r\n    (project=Project)\r\n    (components+=(Team|Process|Backlog|TimeBox|Roadmap|CustomComponent))*;\r\n\r\n// Define new component\r\nCustomComponent:\r\n    'custom' id=ID '{'\r\n        'property:' property=STRING\r\n        // ... additional properties\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.h3,{id:"adding-new-properties",children:"Adding New Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-langium",children:"// Extend existing components\r\nTask:\r\n    'task' id=ID '{'\r\n        'name:' name=STRING\r\n        ('description:' description=STRING)?\r\n        ('priority:' priority=Priority)?  // New property\r\n        // ... existing properties\r\n    '}';\n"})}),"\n",(0,i.jsx)(n.p,{children:"This grammar structure provides a solid foundation for the MADE DSL while maintaining flexibility for extensions and customizations."})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(6540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);