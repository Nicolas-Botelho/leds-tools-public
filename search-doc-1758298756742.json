{"searchDocs":[{"title":"Andes Lib Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture","content":"","keywords":"","version":"Next"},{"title":"Overview of the Modules​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#overview-of-the-modules","content":" src/ ├── application/ # High-level applications (builders, creators, parsers) ├── documentation/ # Integration with Docusaurus ├── graph/ # Graph manipulation ├── model/ # Model and type definitions ├── renders/ # Rendering in different formats     ","version":"Next","tagName":"h2"},{"title":"Modules​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#modules","content":" ","version":"Next","tagName":"h2"},{"title":"1. application/​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#1-application","content":" Contains the application logic that orchestrates the models and generates artifacts.  domain/ → Main domain construction (e.g., BuildDomain.ts).purpose/ → Purpose and scope of the modules.requirements/ → Requirements parsers (GraphParser, TableParser, RequirementsExtractor).usecase/ → Creation and parsing of use cases.made/ → Creation of applications based on defaults (backlog, epics, stories).Root files → ApplicationCreator.ts, DocusaurusCreator.ts, IO.ts.  ⚡ Role: transform the models (in model/) into usable/documentable applications.    ","version":"Next","tagName":"h3"},{"title":"2. documentation/​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#2-documentation","content":" Integration with Docusaurus, including generation of diagrams and use cases.  docusaurus/ ClassDiagram.ts → Class diagram creation.ModelUseCases.ts → Use case documentation.DocksaurusService.ts → Central integration service.application.ts → Orchestrator.  ⚡ Role: automatic generation of visual and technical documentation.    ","version":"Next","tagName":"h3"},{"title":"3. graph/​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#3-graph","content":" Contains graph.ts, responsible for manipulation of graphs used in parsing, requirements analysis, and model generation.  ⚡ Role: structural support for relationships between entities.    ","version":"Next","tagName":"h3"},{"title":"4. model/​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#4-model","content":" Defines the core structure of the domain.  andes/ → Classes and types for analysis, projects, and requirements.made/ → Classes related to backlog, roadmap, sprint, tasks, and teams.spark/ → Structures for entities, enums, packages, and inheritance.  ⚡ Role: formally represent the elements modeled by the Andes language.    ","version":"Next","tagName":"h3"},{"title":"5. renders/​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#5-renders","content":" Layer responsible for exporting and visualizing the models in different formats.  dsl/ made/ and spark/ → Renders for DSL elements. markdown/ MermaidRender.ts → Generation of Mermaid diagrams (flowchart, state machine).FileRender.ts, MarkdownRender.ts → Markdown file rendering. plantuml/ PlantUmlRender.ts, classDiagram.ts → UML diagram generation. Other renders → TableRender.ts, SectionRender.ts, ParagraphRender.ts, etc.  ⚡ Role: transform models into visual and documentary representations.    ","version":"Next","tagName":"h3"},{"title":"Architectural Flow​","type":1,"pageTitle":"Andes Lib Architecture","url":"/leds-tools-public/andes/advanced_concepts/lib_architecture#architectural-flow","content":" Modeling → The user defines projects, requirements, use cases, and backlog (in model/).Application → The application/ module processes the models, generates representations, and prepares for documentation.Graph → Provides structural support in the organization and relationships between entities.Documentation → documentation/ generates structured documents and integrates with Docusaurus.Rendering → renders/ exports in Markdown, UML, Mermaid, and other visual formats. ","version":"Next","tagName":"h2"},{"title":"Andes Lib - Documentation","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/advanced_concepts/andes-lib_DOCUMENTATION","content":"","keywords":"","version":"Next"},{"title":"IRender Interface​","type":1,"pageTitle":"Andes Lib - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-lib_DOCUMENTATION#irender-interface","content":" export default interface IRender { public render(identationStartLevel: number = 0): string; }   ","version":"Next","tagName":"h2"},{"title":"Identation Interface​","type":1,"pageTitle":"Andes Lib - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-lib_DOCUMENTATION#identation-interface","content":" export function identate(times: number = 0): string { return '\\t'.repeat(times); }   This interface is responsible for adding \\t on any section or subsection you are trying to render.  ","version":"Next","tagName":"h2"},{"title":"There are other renderes​","type":1,"pageTitle":"Andes Lib - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-lib_DOCUMENTATION#there-are-other-renderes","content":" If you take a look, you'll see that there are many other renditions available to create a new function for the library. They're designed to work with Markdown features like Pages, Sections, Paragraphs, and even Platuml and Mermaid.  Don't worry, they have similar structures to the renditions you've seen so far. ","version":"Next","tagName":"h2"},{"title":"Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/basic_concepts/AndesOverview","content":"Overview Andes (Analysis as Code) is a tool that helps Software Requirements Engineers model requirements, use cases, and actors, including their interrelations. From these models, Andes automatically generates: Markdown documentation with requirements, use cases, and actors;End-to-end test cases in Gherkin language;Documents for Made, assisting in project management;Documents for Spark, supporting software development. With Andes, you transform requirements models into ready-to-use documentation and tests, saving time and reducing errors.","keywords":"","version":"Next"},{"title":"How to use Andes","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/basic_concepts/howtouse","content":"","keywords":"","version":"Next"},{"title":"ANDES VS Code Extension​","type":1,"pageTitle":"How to use Andes","url":"/leds-tools-public/andes/basic_concepts/howtouse#andes-vs-code-extension","content":" Installation via Marketplace​  Open Visual Studio Code.Navigate to the Extensions tab on the left sidebar or press Ctrl+Shift+X.In the search field, type &quot;ANDES&quot;.Find the extension published by ledsifes and click the Install button.    Writing ANDES Code​  After installation, the extension will be activated automatically whenever you open or create a file with the .andes extension. Create a new file (e.g., myproject.andes) and begin describing your requirements and use cases according to the language's syntax.    Generating Artifacts (Documents and Tests)​  With an .andes file open in the editor, you can trigger the generation commands by right-clicking inside the text editor. The ANDES generation options will appear in the menu (in some cases, you may need to restart VS Code).  The available commands are:  Generate AllGenerate Management Documentation to MADEGenerate Project DocumentationGenerate Spark DocumentGenerate Test Documentation with OpenAI  Once you select an option, the corresponding files will be generated in your project.    ","version":"Next","tagName":"h3"},{"title":"Command-Line Interface (CLI)​","type":1,"pageTitle":"How to use Andes","url":"/leds-tools-public/andes/basic_concepts/howtouse#command-line-interface-cli","content":" Development Environment Setup​  Clone the Repository: Get the project's source code from GitHub by running git clone https://github.com/leds-org/leds-tools-andes.git and then change to the project directory with cd leds-tools-andes.Install Dependencies: The project is Node.js-based. Use npm install to install all dependencies.Compile the Project: The TypeScript source code needs to be compiled to JavaScript using npm run build.    Syntax and Usage Examples​  Basic Syntax: Use node bin/cli.js generate &lt;source_file.andes&gt;.Options: Use -d, --destination &lt;dir&gt; to specify the destination directory for the generated files. If omitted, a generated directory is created by default.Example: To generate artifacts from the requisitos.andes file and save them to a folder named documentacao, run node bin/cli.js generate/requisitos.andes -d./documentacao. The tool will process and validate the file, and if there are no errors, it will create the artifacts in the specified destination ","version":"Next","tagName":"h3"},{"title":"Andes - Documentation","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION","content":"","keywords":"","version":"Next"},{"title":"Grammar Structure​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#grammar-structure","content":" The Andes grammar is defined in .langium files. It describes the tokens and rules that make up the model.    ","version":"Next","tagName":"h2"},{"title":"andes.langium​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#andeslangium","content":" Defines the high-level elements of the model:  Project: describes general information (name, description, purpose, mini-world, architecture).Module: encapsulates local entities, enums, and submodules.AbstractElement: can be Module or EnumX.    ","version":"Next","tagName":"h3"},{"title":"entities.langium​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#entitieslangium","content":" Defines the structure of entities and their elements:  LocalEntity: entities defined in the project.ImportedEntity: imported entities.Attributes: Attribute: primitive attributes (with constraints like unique, max, min).EnumEntityAtribute: attributes based on enums. Relationships: OneToOne, OneToMany, ManyToOne, ManyToMany. Functions: FunctionEntity: allows defining operations on entities.    ","version":"Next","tagName":"h3"},{"title":"usecase.langium​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#usecaselangium","content":" Defines actors, use cases, and events:  Actor: links an actor to an entity.UseCase: a use case containing requirements, events, and actors.Event: an event with an action, requirements, and dependencies.    ","version":"Next","tagName":"h3"},{"title":"requirements.langium​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#requirementslangium","content":" Defines requirements:  FunctionalRequirementNonFunctionalRequirementBussinesRule  Each requirement can have:  DescriptionPriorityDependencies on other requirements    ","version":"Next","tagName":"h3"},{"title":"Parse and Translation Process​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#parse-and-translation-process","content":" The translation is done in the translatorutils.ts file, which converts the AST (Abstract Syntax Tree of the Andes grammar) into Andes Lib classes.  ","version":"Next","tagName":"h2"},{"title":"Translation Examples:​","type":1,"pageTitle":"Andes - Documentation","url":"/leds-tools-public/andes/advanced_concepts/andes-gps-projeto_DOCUMENTATION#translation-examples","content":" Entities translateLocalEntity(entity: LocalEntity): EntityTypeConverts grammar entities into EntityType objects. Attributes translateAttribute(attr: Attribute): AttributeType Enums translateEnumx(enumX: EnumX): EnumEntityType Relationships translateRelation(rel: Relation): RelationType Use Cases translateUseCase(useCase: UseCase): UseCaseClassGenerates a UseCaseClass instance with translated requirements and events. Events translateEvent(event: Event, ucRef: UseCaseClass): EventType Requirements translateRequirements(req: Requirements): RequirimentAgregationClasstranslateRequirement(req: FunctionalRequirement | NonFunctionalRequirement | BussinesRule): RequirimentsBaseClass Actors translateActor(actor: Actor): ActorType  Thus, the tool ensures that any model written in the Andes DSL is converted into a structured and typed representation, ready for use in documentation generation or analysis. ","version":"Next","tagName":"h3"},{"title":"Difference between Andes Lib and Andes GPS Project","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/basic_concepts/andeslib_vs_andestool","content":"","keywords":"","version":"Next"},{"title":"📚 Andes Lib​","type":1,"pageTitle":"Difference between Andes Lib and Andes GPS Project","url":"/leds-tools-public/andes/basic_concepts/andeslib_vs_andestool#-andes-lib","content":" Acts as an auxiliary compiler.Defines interfaces, base classes, and fundamental types that represent entities in the Andes model.Serves as an abstraction layer for: Use casesRequirementsEntitiesRelationshipsEvents    ","version":"Next","tagName":"h2"},{"title":"Andes​","type":1,"pageTitle":"Difference between Andes Lib and Andes GPS Project","url":"/leds-tools-public/andes/basic_concepts/andeslib_vs_andestool#andes","content":" Is the main tool.Responsible for: Defining the Andes grammar (.langium)Parsing models written in the Andes DSLTranslating the grammar elements into Andes Lib types (via translatorutils) ","version":"Next","tagName":"h2"},{"title":"I Want to Improve Andes","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/how_to_contribute/how_to_contribute","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"I Want to Improve Andes","url":"/leds-tools-public/andes/how_to_contribute/how_to_contribute#prerequisites","content":" Here we will specify each major knowledge area you will need to know to improve the code. In each area, there are too many references. You don’t need to get all of them, just choose the ones that work best for you.  For Theoretical Principles, you will need to know about:  Análise de requisitos. Automata Theory: Internet Text Content: Wikipedia, a Great Start;State Machines Reference;Chomsky Hierarchy; Books: Introduction to Automata Theory, Languages, and Computation, third edition (John E. Hopcroft, Rajeev Motwani, and Jeffrey D. Ullman); Video Content: A Complete Introduction to Computation Theory; Portuguese Content: Linguagens Formais e Autômatos, playlist;Linguagens Formais e Autômatos, fifth edition (Paulo Blauth Menezes);Apostila, Linguagens Formais e Autômatos; Domain-Specific Languages (DSL): Internet Text Content: Wikipedia, a Great Start;State Machines Reference; Articles and Papers: Ontology-Driven Development of Domain-Specific Languages; The Abstract Syntax Tree (AST) data structure: Wikipedia, a Great Start;Another Simple Explanation.  In the Technical Area, you will need:  Langium: Internet Text Content: Lib Reference; Object-Oriented Programming: Internet Content: Wikipedia, a Great Start;Advanced Content with Refactoring Guru; Video Content: What is OOP; Portuguese Content: Um bom começo com a Alura;Curso de POO do Gustavo Guanabara; TypeScript: Internet Text Content: Official Documentation;Official Handbook; Video Content: Learn TypeScript in 1 Hour; Portuguese Content: Cursinho de TypeScript. Domain-Specific Languages (DSL) Internet Text Content: Wikipedia, a Great Start Articles and Papers: Ontology-Driven Development of Domain-Specific Languages Abstract Syntax Tree (AST) Wikipedia, a Great StartAnother Simple Explanation ","version":"Next","tagName":"h2"},{"title":"Project Management","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/project_management/project_managment","content":"","keywords":"","version":"Next"},{"title":"Backlog​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/andes/project_management/project_managment#backlog","content":" ID\tFeature\tDescription\tImportance\tProposal1\tCreate Analysis Document\tCreate an analysis document in Markdown with the following information: Requirements, Use Cases, Class Diagram, and State Diagram, to be published on Docusaurus.\t100\tImprove Comunication betwen teams in 10% 2\tDependency Analysis\tUpdate the analysis document with a section for dependencies between use cases and events.\t90\tImprove project management in 15% 3\tModule Planning\tCreate a planning document in the Made format, based on use cases.\t80\tImprove project management in 5% 4\tUpdate Planning with Tasks\tUpdate the planning document with tasks for each event, based on the development process.\t82\tImprove project management in 10% 5\tCreate Development Artifacts\tCreate a Spark-type document, using the data from the analysis.\t70\tImprove developing process int in 10%  ","version":"Next","tagName":"h2"},{"title":"General planning​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/andes/project_management/project_managment#general-planning","content":" Release 1.0 - (14/10/2024 - 01/11/2024): create a documentation using Software Requirement information.Release 2.0 - (04/11/2024 - 31/11/2024): create a Made and Spark documents  ","version":"Next","tagName":"h2"},{"title":"Release 1.0 - 01/11/2024​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/andes/project_management/project_managment#release-10---01112024","content":" Goal: Create an analysis document in Markdown with the following information: Requirements, Use Cases, Class Diagram, and State Diagram, to be published on Docusaurus and Update the analysis document with a section for dependencies between use cases and events. . Features: ID 1 and ID 2 Deadline I - 25/10/2024 ID 1: Create an analysis document in Markdown with the following information: Requirements, Use Cases, Class Diagram, and State Diagram, to be published on Docusaurus Deadline II - 01/11/2024 ID 2: Update the analysis document with a section for dependencies between use cases and events.  ","version":"Next","tagName":"h2"},{"title":"Andes Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Andes Architecture","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture#overview","content":" The project is divided into three main parts:  CLI (src/cli/) → Command-line interface, responsible for interacting with the user via terminal and executing commands.Extension (src/extension/) → Entry point for the extension (e.g., VSCode).Language (src/language/) → DSL definitions (based on Langium), including grammar, validation, and scope.    ","version":"Next","tagName":"h2"},{"title":"Directory Structure​","type":1,"pageTitle":"Andes Architecture","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture#directory-structure","content":" ","version":"Next","tagName":"h2"},{"title":"src/cli/​","type":1,"pageTitle":"Andes Architecture","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture#srccli","content":" Contains the implementation of the CLI and its utilities.  artifacts/ bdd/ BDDService.ts → Main service for executing BDD scenarios.application.ts → Application that integrates BDD with the rest of the CLI.generator.ts → Generation of BDD-related files. generative_ai/ application.ts → Integration with AI tools. graph/ graph.ts → Graph manipulation and generation. made/ application.ts → Service specific to generation/execution of made artifacts. spark/ application.ts → Service specific to generation/execution of spark artifacts. utils/ envLoader.ts → Utility for loading environment variables. vscode_utils/ vscode-utils.ts → Utility functions for integration with VSCode. Main CLI files cli-utils.ts → Common functions for CLI execution.generator-utils.ts → Helper functions for generators.generator.ts → Orchestrator of artifact generation.main.ts → CLI entry point.translate-utils.ts → Translates objects generated by Langium into objects interpretable by the main library.    ","version":"Next","tagName":"h3"},{"title":"src/extension/​","type":1,"pageTitle":"Andes Architecture","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture#srcextension","content":" Contains the extension (integration with VSCode).  main.ts → Extension entry point, initializes communication between the editor and the language.    ","version":"Next","tagName":"h3"},{"title":"src/language/​","type":1,"pageTitle":"Andes Architecture","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture#srclanguage","content":" This is the core of the DSL, built with Langium.  Language definition files: andes.langium → Main grammar of the Andes language.entities.langium → Entity definitions.helpers.langium → Auxiliary rules.requirements.langium → Requirement definitions.terminals.langium → Token/terminal definitions.usecases.langium → Use case definitions. Supporting TypeScript files: andes-module.ts → Main module connecting the parts of the language.andes-scope.ts → Scope rules and reference resolution.andes-validator.ts → Semantic validations of the language.main.ts → Language initialization entry point.main-browser.ts → Initialization for browser environments.    ","version":"Next","tagName":"h3"},{"title":"Architectural Flow​","type":1,"pageTitle":"Andes Architecture","url":"/leds-tools-public/andes/advanced_concepts/tool_architcture#architectural-flow","content":" User runs the CLI Entry at src/cli/main.ts.Invokes modules such as BDD, graph generation, and made/spark files.When it needs to interpret language models, it uses translate-utils.ts. Extension (VSCode) Loaded via src/extension/main.ts.Uses the DSL definition in src/language/ for parsing, validation, and scope.Displays feedback in the editor. Language (Langium) DSL defined in .langium files.Parsing + validation → generates AST.The AST is translated by translate-utils.ts into domain objects understood by the CLI modules.   ","version":"Next","tagName":"h2"},{"title":"Use Exemple","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/advanced_concepts/andes_example","content":"Use Exemple Here you can find a example of the grammar used in the Andes' files. overview Todolist { name: &quot;ToDoList&quot; description: &quot;System for organizing daily tasks&quot; purpose: &quot;Help users manage their tasks in a simple, efficient, and organized way&quot; miniworld: &quot;Users can register tasks, organize by categories, track deadlines and statuses&quot; Architecture: python } requirements Requirements { name: &quot;ToDo Requirements&quot; description: &quot;Requirements for the functioning of the To-Do List system&quot; functional_requirement RF01 { description: &quot;The system must allow users to register with name, email, and password&quot; priority: &quot;High&quot; } functional_requirement RF02 { description: &quot;The system must allow user authentication&quot; priority: &quot;High&quot; depend: Requirements.RF01 } functional_requirement RF03 { description: &quot;The system must allow users to create new tasks&quot; priority: &quot;High&quot; } functional_requirement RF04 { description: &quot;The system must allow users to edit existing tasks&quot; priority: &quot;High&quot; } functional_requirement RF05 { description: &quot;The system must allow users to delete tasks&quot; priority: &quot;High&quot; } functional_requirement RF06 { description: &quot;The system must list the user's tasks&quot; priority: &quot;High&quot; } functional_requirement RF07 { description: &quot;The system must allow changing the status of tasks&quot; priority: &quot;High&quot; } functional_requirement RF08 { description: &quot;The system must allow users to create and manage categories&quot; priority: &quot;Medium&quot; } functional_requirement RF09 { description: &quot;The system must allow filtering tasks by status, date, and category&quot; priority: &quot;Medium&quot; } functional_requirement RF10 { description: &quot;The system may send notifications about pending or upcoming tasks&quot; priority: &quot;Low&quot; } non_functional_requirement RNF01 { description: &quot;The system must have secure authentication with password encryption&quot; priority: &quot;High&quot; } non_functional_requirement RNF02 { description: &quot;It must be a responsive application, working well on desktop and mobile&quot; priority: &quot;High&quot; } non_functional_requirement RNF03 { description: &quot;The backend must be developed in Django&quot; priority: &quot;High&quot; } non_functional_requirement RNF04 { description: &quot;The frontend must be developed in React&quot; priority: &quot;High&quot; } non_functional_requirement RNF05 { description: &quot;The system must support at least 100 simultaneous users&quot; priority: &quot;Medium&quot; } non_functional_requirement RNF06 { description: &quot;Request response time must not exceed 2 seconds in 95% of cases&quot; priority: &quot;High&quot; } } usecase Registration { name: &quot;Registration and Authentication&quot; description: &quot;User registers and logs in&quot; requirements: Requirements.RF01, Requirements.RF02 } usecase TaskManagement { name: &quot;Task Management&quot; description: &quot;User creates, edits, deletes, and changes task statuses&quot; requirements: Requirements.RF03, Requirements.RF04 } usecase TaskOrganization { name: &quot;Task Organization&quot; description: &quot;User organizes tasks by category, date, and status&quot; requirements: Requirements.RF06, Requirements.RF08 } usecase Notifications { name: &quot;Notifications&quot; description: &quot;System sends reminders to the user&quot; requirements: Requirements.RF10 event EventX{ name: &quot;Name&quot; action: &quot;User Does Something&quot;, &quot;System Responds With Something&quot; } } module ToDoApp { description: &quot;Main module of the To-Do List application&quot; enum Priority { low medium high } enum Status { pending in_progress completed canceled } // Description of the User class entity User { name: string _email: email password: string } entity Category { name: string user OneToMany User } entity Task { title: string description: string due_date: date priority uses Priority status uses Status category ManyToOne Category user ManyToOne User } } ","keywords":"","version":"Next"},{"title":"Description","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Advanced_concepts/factory_method","content":"Description Factory Method is a creational design pattern that provides an interface for creating objects in a superclass, but allows subclasses to alter the type of objects that will be created.","keywords":"","version":"Next"},{"title":"Suport a new agent","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Advanced_concepts/suport_a_new_agent","content":"Suport a new agent Create a const variable, from which the build method asynchronously receives, with the phrase for the agent as a parameter and add the list of agents to be invoked and then add the response from this new agent in the text of the commit_analysis_report.md file.","keywords":"","version":"Next"},{"title":"Suport a llm","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Advanced_concepts/suport_a_new_llm","content":"Suport a llm To include a new llm, simply create a factory for it with the parameters: apikey and model, using the &quot;registerFactory&quot; decorator and add it to the providerEnvMap hashmap of the LangWise class.","keywords":"","version":"Next"},{"title":"Description","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Advanced_concepts/observer_method","content":"Description Observer is a behavioral design pattern that lets you define a subscription mechanism to notify multiple objects about any events that happen to the object they’re observing.","keywords":"","version":"Next"},{"title":"How to Use","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/how_to_use","content":"How to Use This action runs automatically on every commit. It analyzes code files changed in the commit and sends a file (commit_analysis_report.md) with analysis about performance and code smell suggestions to the root of projects.","keywords":"","version":"Next"},{"title":"Instalation","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/installation","content":"Instalation To use this action in your repository, follow the steps below: Install the extension locally Configure your .env file with the appropriate LLM credentials: (name of your provider)_API_KEY=your-api-key (ex. GEMINI_API_KEY) MODEL=your-model-name PROVIDER=gemini Supported providers: openai google (Gemini) groq ollama mistral cohere anthropic together Ensure your project has the necessary dependencies: &quot;@types/node&quot;: &quot;20.x&quot;&quot;typescript&quot;: &quot;^5.8.3&quot;&quot;node.js&quot;: &quot;^v20.18.0&quot;&quot;npm&quot;: &quot;^11.4.1&quot;Visual Studio Code (v1.85+)","keywords":"","version":"Next"},{"title":"Metamodel","type":0,"sectionRef":"#","url":"/leds-tools-public/andes/advanced_concepts/metamodel","content":"","keywords":"","version":"Next"},{"title":"Model​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#model","content":" Description: The Model serves as the entry point of the grammar. It encapsulates the overall project structure by containing multiple Project, Requirements, and UseCase instances.Attributes: projects: A collection of Project instances associated with the model.requirements: A collection of Requirements instances defining the system's requirements.useCases: A collection of UseCase instances representing the system's use cases. Relationships: Contains: Multiple Project instances.Multiple Requirements instances.Multiple UseCase instances.  ","version":"Next","tagName":"h2"},{"title":"Project​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#project","content":" Description: Represents a project within the model, providing an overview and specific details about the project's purpose and scope.Attributes: id: A unique identifier for the project.name: The name of the project.description: A detailed description of the project.purpose: The primary purpose of the project.miniworld: A string describing the project's mini-world or domain context. Relationships: Contained By: Belongs to one Model.  ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#requirements","content":" Description: Encapsulates the system's requirements, categorizing them into functional and non-functional types.Attributes: id: A unique identifier for the requirements section.name: The name of the requirements section.description: A description outlining the scope of the requirements.requirements: A collection of Requirement instances detailing individual requirements. Relationships: Contains: Multiple Requirement instances.  ","version":"Next","tagName":"h2"},{"title":"Requirement (Abstract Class)​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#requirement-abstract-class","content":" Description: An abstract representation of a system requirement. Serves as a base for more specific requirement types.Attributes: name: The name of the requirement.description: A detailed description of the requirement. Inheritance: FunctionalRequirement and NonFunctionalRequirement inherit from Requirement.  ","version":"Next","tagName":"h2"},{"title":"FunctionalRequirement​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#functionalrequirement","content":" Description: Represents a functional requirement detailing specific behaviors or functions the system must perform.Inheritance: Inherits from Requirement.  ","version":"Next","tagName":"h2"},{"title":"NonFunctionalRequirement​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#nonfunctionalrequirement","content":" Description: Represents a non-functional requirement specifying system attributes such as performance, security, or usability.Inheritance: Inherits from Requirement.  ","version":"Next","tagName":"h2"},{"title":"UseCase​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#usecase","content":" Description: Represents a use case within the system, defining a specific functionality or behavior that actors can perform.Attributes: name: A QualifiedName that uniquely identifies the use case.fullName: A string representing the full name of the use case.kind: An enumeration (Kind) indicating the type of use case (manage or view).performedActors: A collection of Actor instances that perform this use case.involvedEntities: A collection of Entity instances involved in this use case.extendsUseCases: A collection of UseCase instances that this use case extends.includesUseCases: A collection of UseCase instances that this use case includes. Relationships: Performed By: Multiple Actor instances. Involves: Multiple Entity instances. Extends: Can extend multiple UseCase instances. Includes: Can include multiple UseCase instances.  ","version":"Next","tagName":"h2"},{"title":"Actor​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/andes/advanced_concepts/metamodel#actor","content":" Description: Represents an actor within the system, typically a user or external system that interacts with use cases.Attributes: name: A QualifiedName that uniquely identifies the actor.entity: An Entity that the actor is associated with.superType: An optional reference to another Actor that this actor extends. Relationships: Extends: An Actor can optionally extend another Actor, establishing an inheritance relationship.Implements: Implements the Entity interface. ","version":"Next","tagName":"h2"},{"title":"Workflow Breakdown","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Advanced_concepts/workflow_breakdown","content":"Workflow Breakdown The following steps describe the internal process behind CodeWise: Git Commit Detection CodeWise watches the .git/logs/HEAD file to detect when a new commit is made. This enables real-time, non-intrusive monitoring of commit activity without requiring Git hooks. Extract Commit Information Once a commit is detected, the system extracts: Commit hash, author, date, and messageChanged files and corresponding diffs This information is formatted and saved in a temporary file (gitInput.txt) to serve as input for the language models. Invoke LLM Agents in Parallel CodeWise leverages a set of specialized agents (built on top of LangChain + LangGraph), each trained to analyze a specific dimension of the codebase: Architect Agent: Analyzes folder structure and determines the architectural pattern used (e.g., MVC, Clean Architecture).Integration Agent: Reviews module coupling and suggests integration improvements.SOLID Agent: Detects violations of SOLID principles and proposes corrections.Framework Analyst: Suggests alternative frameworks or improvements in the usage of existing ones.Design Pattern Advisor: Recommends design patterns suitable for scalability, reusability, or maintainability. Merge Results into Markdown Report The results from all LLMs are aggregated into a structured markdown report (commit_analysis_report.md), which includes individual sections for each agent’s findings. Clean Up and Await Next Commit After the report is generated, temporary files are deleted and the extension continues monitoring for future commits. This automated cycle ensures that every commit is reviewed by AI before it even reaches the remote repository — enabling proactive quality control and faster feedback for developers.","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/overview","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/overview#overview","content":" Once installed and configured, CodeWise operates silently in the background. It monitors your Git repository for new commits and automatically triggers a set of intelligent agents that review the code changes, offering structured, insightful feedback saved directly into your workspace.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/overview#features","content":" Pre-commit Code Analysis Automatically analyzes code right after a local commit is made, ensuring issues are caught before pushing to the repository. LLM-Based Multi-Agent Architecture Utilizes multiple specialized Language Model agents (Architect, Integration Analyst, SOLID Reviewer, Design Pattern Advisor, etc.) working in parallel for deep, context-aware code evaluation. Support for Multiple LLM Providers Compatible with various LLM providers (OpenAI, Google Gemini, Ollama, Mistral, Groq, Cohere, and more) with plug-and-play extensibility via a factory pattern and reflection-based dynamic loading. Automatic Report Generation Produces a detailed markdown report (commit_analysis_report.md) after each commit, summarizing architectural insights, design flaws, and suggestions. No User Disruption Fully background operation – developers commit code as usual while CodeWise silently processes and reports. Multi-language Project Support Can analyze projects written in multiple programming languages, especially those structured around standard architectural patterns (e.g., MVC, DDD). Cross-Platform Compatibility Designed to work on Windows, macOS, and Linux environments (as long as Node.js and VS Code are installed). Modular and Extensible Design Easy to extend with new agent roles, models, or analysis types using a clean and maintainable architecture. CI/CD Ready CodeWise is built to support packaging and publishing via GitHub Actions, enabling streamlined deployment of new versions.  ","version":"Next","tagName":"h3"},{"title":"Requirements​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/overview#requirements","content":" &quot;@types/node&quot;: &quot;20.x&quot; &quot;typescript&quot;: &quot;^5.8.3&quot; &quot;node.js&quot;: &quot;^v20.18.0&quot; &quot;npm&quot;: &quot;^11.4.1&quot; Visual Studio Code (v1.85+)  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/code_wise/code_wise_extension/Basic_Concepts/overview#usage","content":" Once installed and activated, CodeWise automatically monitors your Git workspace for new commits. When a commit is made, the extension triggers a background process that analyzes the committed code and generates a comprehensive report with architectural insights and improvement suggestions.  Follow these steps to use CodeWise:  Open a Git-based project in VS Code. Ensure the project is tracked by Git and has at least one workspace folder opened. Make a commit. When you commit code, CodeWise detects the change and analyzes it automatically. Wait for the analysis. Within seconds, CodeWise runs a set of LLM agents to analyze your code based on architecture, integration, design patterns, SOLID principles, and framework usage. Check the output report. A new file named commit_analysis_report.md will be created in the root of your project, containing a detailed summary of findings and suggestions. Review and refactor. Open the report to review the suggestions. Use the insights to refactor and improve your code quality before pushing to remote repositories.  The process is fully automated and non-intrusive. Developers commit code as usual; CodeWise works silently in the background. ","version":"Next","tagName":"h3"},{"title":"I Want to Improve the code wise extension code","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/How_to_Contribute/","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"I Want to Improve the code wise extension code","url":"/leds-tools-public/code_wise/code_wise_extension/How_to_Contribute/#prerequisites","content":" Here we will specify each major knowledge area you will need to know to improve the code. In each area, there are too many references. You don’t need to get all of them, just choose the ones that work best for you.  For code this extension, you will need to know about:  Clean code: Internet Text Content: refactoring guru;introduction to clean code;S.O.L.I.D; Books: clean code; Langchain: Internet Text Content: langgraph in javascript;Langchain in javascript;Asimov introduction; Books: Learning LangChain: Building Ai And LLM Applications With LangChain And LangGraph; Typescript: Internet Text Content: Starting;Basics; Books: Aprendendo TypeScript (Josh Goldberg); ","version":"Next","tagName":"h2"},{"title":"Design Concept: Automation via Git Hooks","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/design-concept-git-hooks","content":"","keywords":"","version":"Next"},{"title":"How CodeWise Uses Hooks​","type":1,"pageTitle":"Design Concept: Automation via Git Hooks","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/design-concept-git-hooks#how-codewise-uses-hooks","content":" By placing scripts in the .git/hooks/ directory, CodeWise can intercept the developer's workflow without being intrusive.  pre-commit Hook: Event: Triggered when git commit is run.CodeWise Action: Executes the codewise-lint command. This provides a fast, lightweight analysis of the code before it's even committed to the local history. It's a first line of defense for quality control. pre-push Hook: Event: Triggered when git push is run.CodeWise Action: Executes the full codewise-pr process. This is the main event, where the complete code analysis is performed and the Pull Request on GitHub is automatically created or updated. This ensures that no code is pushed to the remote repository without its corresponding documentation and AI analysis.  The codewise-init --all command is responsible for automatically creating and configuring these hook files, making the setup process seamless for the end-user. ","version":"Next","tagName":"h3"},{"title":"Project Management","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment","content":"","keywords":"","version":"Next"},{"title":"Backlog​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment#backlog","content":" ID\tFeature\tDescription\tImportance\tProposal1\tArchitectural Improvements\tReplace the JSON file with a more robust data structure and improve the internal code architecture.\t100\tImprove software developmen quality in 10%Increase project security and maintainability by 30%. 2\tAnalysis Improvements\tAdd commands for different types of analysis, code documentation, and hierarchical analysis between agents.\t95\tIncrease the depth and versatility of the analysis by 40%. 3\tConfiguration Interface\tCreate a dedicated configuration interface within VS Code for a better user experience.\t90\tImprove the user experience and customization of the extension by 25%. 4\tAutomated Testing\tImplement an automated testing pipeline to ensure code stability and quality.\t85\tReduce the bug and failure rate by 50%. 5\tModularization and Core\tDecouple the textual part from the processing part and create an NPM package for the core.\t80\tFacilitate the reuse and development of the extension's core. 6\tEmbedding and Database\tAdd embedding functionality for advanced analysis and the option to save information in a database.\t75\tIncrease the intelligence and analysis history of the extension by 20%.  ","version":"Next","tagName":"h2"},{"title":"General planning​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment#general-planning","content":" Release 1.0 (Done): Pre-commit code analysis and feedback.Release 2.0 (In Progress): Adding analysis and configuration features.Release 3.0 (Undefined): Refactoring and architectural improvements.Release 4.0 (Undefined): Implementing tests and advanced features.  ","version":"Next","tagName":"h2"},{"title":"Release 1.0 - 10/07/2025​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment#release-10---10072025","content":" Goal: Write Feedback about the code to developer. Features: Automatically analyzes your codebase at pre-commitidentify architectural improvementsidentify SOLID principle violationsidentify code smellsidentify design patternsProblems: Spend much time to analysis many code Oportunity Develop our IA to improve time and no spend money Deadline I 01/10/2023: Send Feedback about a code to developer.    ","version":"Next","tagName":"h2"},{"title":"Release 2.0 - September 28, 2025​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment#release-20---september-28-2025","content":" Goal: Add commands for different types of analysis and Create a dedicated configuration interface. Features: ID 2, ID 3 Add command to basic analysis. Add command to average analysis. Add command to heavy analysis. Add command to personalized analysis. Create a dedicated configuration interface. Problems: The current system lacks advanced analytical capabilities and a user-friendly configuration interface. Opportunity: Implementing these features will make the extension more powerful, context-aware, and easier for developers to use. Deadline: September 28, 2025: All new features implemented and ready for testing.    ","version":"Next","tagName":"h2"},{"title":"Release 3.0 - November 02, 2025​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment#release-30---november-02-2025","content":" Goal: Refactoring and architectural improvements. Features: ID 5, ID 6 Decouple the textual part from the processing part. Create an NPM package for the project's core. Add embedding functionality for advanced analysis. Add an option to save information in a database. Problems: The current architecture is tightly coupled, making it difficult to maintain and reuse, and it lacks the ability to perform deep, historical analysis. Opportunity: By modularizing the core and adding embeddings and a database, the extension will become more scalable, maintainable, and intelligent, providing richer, more powerful insights over time. Deadline: November 02, 2025: All new features implemented and ready for testing.    ","version":"Next","tagName":"h2"},{"title":"Release 4.0 - November 30, 2025​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/code_wise/code_wise_extension/Project_management/project_managment#release-40---november-30-2025","content":" Goal: Implementing an automated testing flow and enhancing code quality with robust error handling. Features: ID 4 Create an automated testing flow for the project itself. Add error and exception handling in the LLM payload. Problems: The lack of automated tests may lead to bugs and instability. Opportunity: A robust testing flow will ensure the project's stability and quality, reducing the rate of bugs and failures. Deadline: November 30, 2025: All new features implemented and ready for testing.  ","version":"Next","tagName":"h2"},{"title":"How to Support a New LLM (e.g., via Ollama)","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/llms","content":"","keywords":"","version":"Next"},{"title":"1. Update the Configuration (.env)​","type":1,"pageTitle":"How to Support a New LLM (e.g., via Ollama)","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/llms#1-update-the-configuration-env","content":" The first step is to allow the user to choose their LLM provider. This can be done by adding a new variable to the .env file:  # Options: &quot;gemini&quot; or &quot;ollama&quot; LLM_PROVIDER=ollama # Specify the local model to be used by Ollama OLLAMA_MODEL=llama3   ","version":"Next","tagName":"h3"},{"title":"2. Modify the AI Core (codewise_lib/crew.py)​","type":1,"pageTitle":"How to Support a New LLM (e.g., via Ollama)","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/llms#2-modify-the-ai-core-codewise_libcrewpy","content":" In the Codewise class constructor, implement a factory logic that instantiates the correct LLM based on the environment variable. CrewAI has native support for Ollama, making this straightforward.  # At the beginning of the file from crewai_tools import Ollama # Inside the Codewise class __init__ method llm_provider = os.getenv(&quot;LLM_PROVIDER&quot;, &quot;gemini&quot;) if llm_provider == &quot;ollama&quot;: ollama_model = os.getenv(&quot;OLLAMA_MODEL&quot;, &quot;llama3&quot;) # Assumes Ollama is running on the default local address self.llm = Ollama(model=ollama_model) else: # The existing Gemini LLM instantiation self.llm = LLM(model=&quot;gemini/gemini-2.0-flash&quot;, ...)   ","version":"Next","tagName":"h3"},{"title":"3. Update the Documentation​","type":1,"pageTitle":"How to Support a New LLM (e.g., via Ollama)","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/llms#3-update-the-documentation","content":" The installation guide must be updated to include instructions on how to install Ollama, download a model (e.g., ollama pull llama3), and configure the new variables in the .env file. ","version":"Next","tagName":"h3"},{"title":"Architecture Overview: CodeWise Lib vs. CLI Tools","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/architecture-overview","content":"","keywords":"","version":"Next"},{"title":"CodeWise Lib​","type":1,"pageTitle":"Architecture Overview: CodeWise Lib vs. CLI Tools","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/architecture-overview#codewise-lib","content":" This is the core engine or the &quot;brains&quot; of the project. It's the actual package that gets installed from PyPI when you run pip install codewise-lib.It contains all the essential logic, including: The AI Agents and their orchestration via CrewAI.The module for interacting with Git to extract code changes.The runner that manages the entire analysis workflow.The scripts for installing the Git hooks.    ","version":"Next","tagName":"h2"},{"title":"CodeWise CLI Tools​","type":1,"pageTitle":"Architecture Overview: CodeWise Lib vs. CLI Tools","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/architecture-overview#codewise-cli-tools","content":" These are the user-facing commands that you type in your terminal. They act as the interface to the core library's functionalities.The main tools are: codewise-init: Executes the hook installation script from the library.codewise-lint: Triggers the lightweight analysis function for staged files.codewise-pr: Activates the full workflow for PR creation and analysis.codewise-help: Displays the help message.  In short, the CodeWise Lib does all the heavy lifting, while the CLI Tools provide a simple and direct way for you to command that power. ","version":"Next","tagName":"h2"},{"title":"CodeWise Workflow Breakdown","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Advanced_Concepts/workflow-breakdown","content":"CodeWise Workflow Breakdown The following steps describe the internal process behind CodeWise, from a user action to the final AI-generated Pull Request. Git Hook Trigger (pre-commit or pre-push)The process is initiated by standard Git commands executed by the user. CodeWise's automation is tied directly into the repository via Git Hooks installed by the codewise-init command. On git commit: The pre-commit hook is triggered.On git push: The pre-push hook is triggered. Context Extraction (entradagit.py)Once a hook is triggered, the system extracts all necessary context from the local Git repository. For pre-commit, it captures the staged changes (git diff --cached).For pre-push, it gathers the range of commits and the complete code differences (git diff) between the user's branch and the remote target branch (main or develop). AI Agent Orchestration (crew.py &amp; cw_runner.py)The extracted context is passed to the AI core, which uses a &quot;crew&quot; of specialized agents (built with CrewAI) to analyze the code in parallel: Summary Specialist: Generates the PR title (following Conventional Commits) and a concise description.Senior Architect: Analyzes the project structure and architectural patterns.Quality Consultant: Detects violations of S.O.L.I.D. principles and identifies &quot;code smells&quot;.Design Pattern Advisor: Recommends design patterns suitable for the changes made. GitHub API Interaction (gh)With the AI-generated content ready, CodeWise interacts with the GitHub API via the GitHub CLI (gh): It checks if a Pull Request already exists for the current branch.If yes, it updates the existing PR's title and description and posts the new technical analysis as a comment.If no, it creates a new Pull Request with the generated title and description, then posts the technical analysis as a comment. Completion and User FeedbackAfter interacting with GitHub, the script finishes, and the original Git command (commit or push) is allowed to complete. The user sees the output and results directly in their terminal.","keywords":"","version":"Next"},{"title":"Mini-World To-Do List","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/Mini-World CW-PR","content":"Mini-World To-Do List Video showing the tool in action: https://drive.google.com/file/d/1UEOB0TPu_5w2-L1Y-MoRSM9j5j_0AvyM/view?usp=sharing CodeWise aims to optimize the code review process in software projects, reducing the time spent on manual reviews and increasing the quality of the code delivered by development teams. It works in an integrated way with GitHub, automatically analyzing Pull Requests through generative language models. The solution identifies architectural improvements, possible code smells, violations of S.O.L.I.D. principles, and suggests appropriate design patterns. Additionally, it is capable of generating automatic PR titles and descriptions, contributing to clearer and more standardized documentation. The tool will be available as a library, installable via pip, and will feature integration hooks to act directly within repositories. Its central proposal is to reduce the manual effort of reviewers, standardize code architecture, and make the development process more efficient and sustainable.","keywords":"","version":"Next"},{"title":"CodeWise Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/overview","content":"","keywords":"","version":"Next"},{"title":"Key Features​","type":1,"pageTitle":"CodeWise Overview","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/overview#key-features","content":" Title Generation: Creates clear and concise PR titles following the Conventional Commits standard.Description Generation: Writes detailed descriptions based on code changes.Technical Analysis: Posts a comment on the PR with an executive summary of architectural improvements, adherence to S.O.L.I.D. principles, and other quality points.Automation with Hooks: Integrates into your Git workflow to run automatically on every git commit and git push. ","version":"Next","tagName":"h2"},{"title":"Prerequisites","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/pre_requisites","content":"","keywords":"","version":"Next"},{"title":"1. Python​","type":1,"pageTitle":"Prerequisites","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/pre_requisites#1-python","content":" Requirement: Version 3.11 or higher.Why: CodeWise is a Python application and requires a modern version of the language to run.Download: python.org  ","version":"Next","tagName":"h3"},{"title":"2. Git​","type":1,"pageTitle":"Prerequisites","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/pre_requisites#2-git","content":" Requirement: A recent version of Git.Why: CodeWise is deeply integrated with Git. It reads repository data and uses Git Hooks (pre-commit, pre-push) for automation.Download: git-scm.com  ","version":"Next","tagName":"h3"},{"title":"3. GitHub CLI (gh)​","type":1,"pageTitle":"Prerequisites","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/pre_requisites#3-github-cli-gh","content":" Requirement: The official GitHub Command-Line Interface.Why: CodeWise uses gh to interact with the GitHub API, which is necessary for creating and updating Pull Requests automatically.Download: cli.github.comImportant: After installing, you must authenticate with your GitHub account. Run the following command in your terminal and follow the instructions: gh auth login   ","version":"Next","tagName":"h3"},{"title":"4. Google Gemini API Key​","type":1,"pageTitle":"Prerequisites","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/pre_requisites#4-google-gemini-api-key","content":" Requirement: An active API key for the Google Gemini model.Why: The core of CodeWise's analysis is powered by the Gemini generative AI. The tool sends code snippets to this API to generate titles, descriptions, and technical analyses.How to get one: You can generate a free API key at Google AI Studio.Action: This key must be saved in the .env file during the setup process, as described in the Installation Guide.  ","version":"Next","tagName":"h3"},{"title":"5. Python Virtual Environment (Venv)​","type":1,"pageTitle":"Prerequisites","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/pre_requisites#5-python-virtual-environment-venv","content":" Requirement: Strongly recommended for any Python project.  What it is: A native Python tool that creates an isolated environment for your project's dependencies.Why: It prevents conflicts between the libraries required by different projects on your computer. Using a venv ensures that CodeWise and its dependencies will not interfere with other tools you may have installed.Action: Creating and activating the virtual environment is the first practical step in our Installation Guide.  With these prerequisites installed and configured, you are ready to proceed with the CodeWise installation. ","version":"Next","tagName":"h3"},{"title":"How to Add a New AI Agent","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/new_agents","content":"","keywords":"","version":"Next"},{"title":"1. Create a New Agent Definition (config/agents.yaml)​","type":1,"pageTitle":"How to Add a New AI Agent","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/new_agents#1-create-a-new-agent-definition-configagentsyaml","content":" Define your new agent with a specific role and goal. For example, a security_specialist_agent:  security_specialist_agent: role: 'CyberSecurity Specialist' goal: 'Analyze code for common security vulnerabilities (like SQL Injection, XSS) and suggest best practices for secure coding.' backstory: 'An experienced security expert focused on proactive threat detection in code.'   ","version":"Next","tagName":"h3"},{"title":"2. Create a New Task Definition (config/tasks.yaml)​","type":1,"pageTitle":"How to Add a New AI Agent","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/new_agents#2-create-a-new-task-definition-configtasksyaml","content":" Define a task that instructs your new agent on what to do with the code context it receives.  security_analysis_task: description: 'Review the provided code diff for potential security vulnerabilities. Provide a list of findings and suggest concrete code changes to mitigate them.' expected_output: 'A markdown list of security vulnerabilities found, with code examples for correction.'   ","version":"Next","tagName":"h3"},{"title":"3. Integrate into the Crew (codewise_lib/crew.py)​","type":1,"pageTitle":"How to Add a New AI Agent","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/new_agents#3-integrate-into-the-crew-codewise_libcrewpy","content":" Add the new agent and task to the main analysis Crew. This ensures it will be executed along with the other agents.  ","version":"Next","tagName":"h3"},{"title":"4. Orchestrate the New Task (codewise_lib/cw_runner.py)​","type":1,"pageTitle":"How to Add a New AI Agent","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/new_agents#4-orchestrate-the-new-task-codewise_libcw_runnerpy","content":" Ensure the output of your new task is captured and correctly formatted into the final Pull Request comment, likely under a new &quot;Security Analysis&quot; section. ","version":"Next","tagName":"h3"},{"title":"Project Vision and Goals","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/project_goals","content":"","keywords":"","version":"Next"},{"title":"Project Vision​","type":1,"pageTitle":"Project Vision and Goals","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/project_goals#project-vision","content":" To optimize the code review process in software projects, transforming a manual and time-consuming task into an automated, intelligent, and sustainable part of the development cycle.  ","version":"Next","tagName":"h2"},{"title":"Problem Statement​","type":1,"pageTitle":"Project Vision and Goals","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/project_goals#problem-statement","content":" Development teams spend a significant amount of time on manual code reviews, which can be subjective and lead to inconsistencies in code quality. Furthermore, the documentation of changes in Pull Requests is often rushed, creating a knowledge gap in the project's history.  ","version":"Next","tagName":"h2"},{"title":"Key Goals​","type":1,"pageTitle":"Project Vision and Goals","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/project_goals#key-goals","content":" The central proposal of CodeWise is to address these challenges by focusing on three main goals:  Reduce Manual Effort: Significantly decrease the time reviewers spend on routine checks and documentation.Standardize Code Architecture: Enforce quality standards and principles like S.O.L.I.D. automatically and consistently across the team.Improve Development Efficiency: Make the overall development process more efficient by providing faster feedback and clearer, standardized documentation.  ","version":"Next","tagName":"h2"},{"title":"Core Solution​","type":1,"pageTitle":"Project Vision and Goals","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/project_goals#core-solution","content":" The tool will be delivered as a library installable via pip, featuring integration hooks to act directly within repositories. It will leverage generative language models to automatically analyze Pull Requests, identify architectural improvements, suggest design patterns, and generate PR titles and descriptions. ","version":"Next","tagName":"h2"},{"title":"VS Code Guide","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR","content":"","keywords":"","version":"Next"},{"title":"Using CodeWise in Visual Studio Code​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#using-codewise-in-visual-studio-code","content":" The CodeWise workflow is fully compatible with Visual Studio Code. Since the hooks are installed in your Git repository, they will be triggered whether you use the command line or the editor's graphical interface.  There are two main ways to use Git in VS Code, and both activate CodeWise.    ","version":"Next","tagName":"h2"},{"title":"Method 1: Using the Integrated Terminal (Recommended)​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#method-1-using-the-integrated-terminal-recommended","content":" This is the most direct and recommended way, as you will see all of CodeWise's output in real-time.  ","version":"Next","tagName":"h2"},{"title":"1. Open the Integrated Terminal​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#1-open-the-integrated-terminal","content":" You can open a terminal directly in VS Code using the shortcut Ctrl + (backtick) or by going to theTerminal&gt;New Terminal` menu.  ","version":"Next","tagName":"h3"},{"title":"2. Follow the Standard Flow​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#2-follow-the-standard-flow","content":" With the terminal open, the steps are exactly the same as in the main guide:  Add your changes: git add . At this point, codewise-lint can be run manually for a preliminary analysis. Make the commit: git commit -m &quot;implements new feature&quot; The pre-commit hook will be triggered, and you will see the codewise-lint analysis directly in the terminal. Push to GitHub: git push The pre-push hook will be triggered. Watch the terminal to see the Pull Request creation and to answer any questions about the remote (origin or upstream).    ","version":"Next","tagName":"h3"},{"title":"Method 2: Using the GUI (Source Control Panel)​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#method-2-using-the-gui-source-control-panel","content":" If you prefer to use the visual interface for Git in VS Code, CodeWise will also work. The key is to keep an eye on the integrated terminal to see the tool's messages.  ","version":"Next","tagName":"h2"},{"title":"1. Stage Your Changes​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#1-stage-your-changes","content":" Open the Source Control panel in the sidebar (icon with three connected dots).Modified files will appear under &quot;Changes&quot;. Click the + icon next to each file to stage them (equivalent to git add).  ","version":"Next","tagName":"h3"},{"title":"2. Make the Commit​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#2-make-the-commit","content":" At the top of the Source Control panel, type your commit message in the text box. Click the &quot;check&quot; icon or press Ctrl + Enter to commit. ⚠️ Attention: At this moment, the pre-commit hook will be triggered in the background. Open the Integrated Terminal (Ctrl + ) to see the output from codewise-lint`.  ","version":"Next","tagName":"h3"},{"title":"3. Push to GitHub​","type":1,"pageTitle":"VS Code Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use CW-PR#3-push-to-github","content":" After committing, a &quot;Sync Changes&quot; or &quot;Publish Branch&quot; button will appear in the Source Control panel. Click it to send your changes. ⚠️ Attention: The pre-push hook will be triggered now. It is essential that you watch the Integrated Terminal, as codewise-pr may ask questions (like the choice between origin and upstream) that will require your input to continue. The push process in the GUI will only complete after the CodeWise hook finishes its execution. ","version":"Next","tagName":"h3"},{"title":"Setting Up Your Development Environment","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/development_setup","content":"","keywords":"","version":"Next"},{"title":"1. Fork and Clone the Repository​","type":1,"pageTitle":"Setting Up Your Development Environment","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/development_setup#1-fork-and-clone-the-repository","content":" First, create your own fork of the official CodeWise repository on GitHub. Then, clone your fork to your local machine:  # Replace YOUR_USERNAME with your GitHub username git clone https://github.com/YOUR_USERNAME/CodeWise.git cd CodeWise   ","version":"Next","tagName":"h3"},{"title":"2. Create a Virtual Environment​","type":1,"pageTitle":"Setting Up Your Development Environment","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/development_setup#2-create-a-virtual-environment","content":" It is crucial to work within a virtual environment to manage dependencies correctly.  # Create the environment python3 -m venv .venv # Activate the environment # On Linux/WSL: source .venv/bin/activate # On Windows (PowerShell): .\\.venv\\Scripts\\activate   ","version":"Next","tagName":"h3"},{"title":"3. Install Dependencies in Editable Mode​","type":1,"pageTitle":"Setting Up Your Development Environment","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/development_setup#3-install-dependencies-in-editable-mode","content":" Instead of installing the package from PyPI, you will install it from the local source code in &quot;editable&quot; mode. This allows your changes to the code to be reflected immediately when you run the tool.  # Install all required dependencies for development pip install -e .   This command reads the setup.py file and links the codewise-lib package to your source code.  ","version":"Next","tagName":"h3"},{"title":"4. Configure the API Key​","type":1,"pageTitle":"Setting Up Your Development Environment","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/development_setup#4-configure-the-api-key","content":" For testing, you still need a valid Google Gemini API key. Create a .env file in the project root, as described in the main installation guide.  GEMINI_API_KEY=YOUR_TEST_KEY_HERE MODEL_NAME=gemini-2.0-flash   ","version":"Next","tagName":"h3"},{"title":"5. Running the Tool Locally​","type":1,"pageTitle":"Setting Up Your Development Environment","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/development_setup#5-running-the-tool-locally","content":" With the setup complete, you can now run the tool directly from the source code for testing purposes. The main entry point is codewise_lib/main.py. For example:  # Example of running the tool in 'lint' mode on a test repository python -m codewise_lib.main --repo /path/to/another/project --branch main --mode lint   You are now ready to start developing new features and improvements for CodeWise! ","version":"Next","tagName":"h3"},{"title":"Installation Guide","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use in CLI CW-PR","content":"","keywords":"","version":"Next"},{"title":"Installation Guide​","type":1,"pageTitle":"Installation Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use in CLI CW-PR#installation-guide","content":" Follow these steps to install and configure CodeWise in any of your repositories.    Lib: https://pypi.org/project/codewise-lib  ","version":"Next","tagName":"h2"},{"title":"Step 1: Prerequisites​","type":1,"pageTitle":"Installation Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use in CLI CW-PR#step-1-prerequisites","content":" Before you start, ensure you have the following tools installed on your system:  Python (version 3.11 or higher).Git.GitHub CLI (gh): After installing from (https://cli.github.com), log in with your GitHub account by running gh auth login in your terminal (you only need to do this once per PC).    ","version":"Next","tagName":"h3"},{"title":"Step 2: Setting Up Your Repository​","type":1,"pageTitle":"Installation Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use in CLI CW-PR#step-2-setting-up-your-repository","content":" For each new repository where you want to use CodeWise, follow the steps below.  &quot;It's always a good idea to create a virtual environment in the root folder of the new repository to avoid dependency conflicts.&quot;    2.1 Create and Use a Virtual Environment​  To avoid conflicts with other Python projects, use a virtual environment (venv).  To Create the Environment: This command creates a .venv folder with a clean Python installation. Do this only once per repository.Remember that &quot;.venv&quot; is the name of the created folder; you can choose any other name for it.  (inside the repository root where the .git folder is)  # On Windows py -m venv .venv # On Linux/WSL python3 -m venv .venv   To Activate the Environment: Whenever you work on the project, you need to activate the environment. Tip for Windows/PowerShell: If the activation command gives an execution policy error, run this command first: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser # On Windows (PowerShell) .\\.venv\\Scripts\\activate # On Linux/WSL source .venv/bin/activate You'll know it worked because the name (.venv) will appear at the beginning of your terminal line.    2.2 Install the CodeWise Tool​  With the virtual environment active, install the library with pip.  pip install codewise-lib   It may take a while to install all dependencies the first time.  After installing the library, you can confirm everything is working with the command codewise-help    2.3 Configure the API Key (.env)​  For the AI to work, you need to configure your Google Gemini API key.  In the root of your project, create a file called .env. You can use the following commands in the terminal: Windows notepad .env Linux/WSL touch .env &amp;&amp; nano .env Inside the .env file, paste the following content, add your key, and save: GEMINI_API_KEY=YOUR_KEY_HERE MODEL_NAME=gemini-2.0-flash   ⚠️ Important: Remember to add the .env file to your .gitignore so you don’t push your secret key to GitHub, and make sure it’s an actual &quot;ENV file&quot; and not .txt or something similar.    ","version":"Next","tagName":"h3"},{"title":"Important Note: The CodeWise tool expects your remotes to follow the standard GitHub convention:​","type":1,"pageTitle":"Installation Guide","url":"/leds-tools-public/code_wise/code_wise_lib/Basic_Concepts/How to use in CLI CW-PR#important-note-the-codewise-tool-expects-your-remotes-to-follow-the-standard-github-convention","content":" origin: Should point to your personal fork of the repository.  upstream: (if you add it to the repository) Should point to the main repository you forked from.  If you start a brand-new repository from scratch, you must do an initial push with git push --no-verify before using the tool so that the GH CLI works properly when creating Pull Requests.  2.4 Now — only once — Activate Automation in the Repository with a command.​  In the root of the project where the .git folder is, run:  codewise-init --all   Use this command whenever you want to change where the PULL REQUEST WILL BE CREATED in the pre-push hooks, because if you add an upstream remote you will need to switch which remote the PR will be generated for.  Here is the Pull Request target configuration:  If your repository has an upstream remote configured, the installer will ask after you run codewise-init --all to set the default pre-push hook behavior:  An 'upstream' remote was detected. What should be the default behavior of 'git push' for this repository? 1: Create Pull Request in 'origin' (your fork) 2: Create Pull Request in 'upstream' (main project) Choose the default (1 or 2):   Your choice will be saved in the hook, and you won’t need to worry about it again. If there is no upstream, it will default to origin.  You’ll see a success message confirming that automation is active.  With this command the pre-commit and pre-push files will already have been added to your repository hooks.    Everything is now working in the repository you configured. If you want to install it in a new repository, just repeat the steps.  Using CodeWise  With the configuration complete, you now have access to the codewise-lint and codewise-pr commands both manually and automatically after installing the hooks.  Add your changes After modifying your files, add them to the staging area: git add . Here you can run the codewise-lint command to analyze the files and make adjustments before committing. Commit your changes git commit -m &quot;implement new feature&quot; At this moment, the pre-commit hook will be triggered, and codewise-lint will run a quick analysis in your terminal. Push to GitHub git push Now, the pre-push hook will be triggered. codewise-pr will ask which remote you want to push to if there is an upstream besides your origin, and then it will create/update your Pull Request with a title, description, and technical analysis generated by AI. ","version":"Next","tagName":"h2"},{"title":"Improvement Suggestions","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/improvement_suggestions","content":"","keywords":"","version":"Next"},{"title":"Suggestion 1: Support for Local AI Models via Ollama​","type":1,"pageTitle":"Improvement Suggestions","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/improvement_suggestions#suggestion-1-support-for-local-ai-models-via-ollama","content":" Concept​  Allow CodeWise to use language models (LLMs) running locally on the developer's machine through Ollama, instead of exclusively depending on the Google Gemini API.  Justification​  Security and Data Privacy: Source code would never leave the user's machine.Cost Reduction: Removes the dependency on paid API keys and consumption costs, making the tool more efficient.Offline Use: Would allow developers to use the tool without an internet connection.Flexibility: Users could choose the model that best suits their hardware and needs (e.g., Llama 3, Mistral, CodeLlama).  Risks and Considerations​  Hardware Requirements: Local models demand significant RAM and ideally a GPU.Analysis Quality: The quality of the analysis might vary and could potentially be lower than the Gemini API models.Setup Complexity: Adds an extra setup step for the user (installing and managing Ollama).    ","version":"Next","tagName":"h3"},{"title":"Suggestion 2: \"Code Mentor\" Agent with Educational Suggestions​","type":1,"pageTitle":"Improvement Suggestions","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/improvement_suggestions#suggestion-2-code-mentor-agent-with-educational-suggestions","content":" Concept​  Add a new AI agent to the team that acts as a mentor. Based on the analysis of S.O.L.I.D., architecture, and &quot;code smells,&quot; this agent would suggest articles, courses, or videos to help the developer improve their skills.  Justification​  Continuous Learning: Transforms the tool from a simple &quot;code reviewer&quot; into a platform for professional growth.Actionable Feedback: Instead of just pointing out an error, the tool would also offer a path to learning the solution.Junior Developer Onboarding: It would be extremely valuable for junior developers, providing personalized and contextualized guidance.  Implementation Idea​  An idea for implementing this is to create a new code_mentor_agent and a corresponding mentoring_task. After the main analysis is complete, this new agent would take the results as context and search for relevant educational links. The output would be a new &quot;Learning Suggestions&quot; section in the PR comment.  For a more advanced feature, a local JSON file could be used to track the history of errors, allowing the agent to identify recurring issues and provide more targeted feedback. ","version":"Next","tagName":"h3"},{"title":"Suggestions Summary","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/Suggestions CW-PR","content":"","keywords":"","version":"Next"},{"title":"Suggestion 1: Support for Local AI Models via Ollama​","type":1,"pageTitle":"Suggestions Summary","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/Suggestions CW-PR#suggestion-1-support-for-local-ai-models-via-ollama","content":" ","version":"Next","tagName":"h3"},{"title":"Concept​","type":1,"pageTitle":"Suggestions Summary","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/Suggestions CW-PR#concept","content":" Allow CodeWise to use language models (LLMs) running locally on the developer's machine through Ollama, instead of exclusively depending on the Google Gemini API.  Justification Security and Data Privacy: Companies with strict intellectual property policies could use the tool with the guarantee that their source code will never leave their machines.  Cost Reduction: We had issues with restrictions depending on the number of characters last semester, which limits the tool. We believe this can remove the need for paid API keys and the costs associated with Gemini API consumption, making the tool more efficient.  Offline Use: Developers could use the tool to analyze their code even without an internet connection.  Flexibility: It allows users to choose the model that best suits their hardware and needs (we find these relevant: Llama 3, Mistral, CodeLlama).  Some ideas/risks we find relevant:  -Hardware: Using local models requires more RAM and ideally a GPU, which can be a barrier for some users. -Depending on the model, the quality of the analysis may vary and could be lower than that of the Gemini API models. -It adds an extra setup step for the user (installing and managing Ollama).  ","version":"Next","tagName":"h3"},{"title":"Suggestion 2: \"Code Mentor\" Agent with Educational Suggestions​","type":1,"pageTitle":"Suggestions Summary","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/Suggestions CW-PR#suggestion-2-code-mentor-agent-with-educational-suggestions","content":" ","version":"Next","tagName":"h3"},{"title":"Concept​","type":1,"pageTitle":"Suggestions Summary","url":"/leds-tools-public/code_wise/code_wise_lib/How_To_Contribute/Suggestions CW-PR#concept-1","content":" We found the idea discussed with the professor to be interesting: adding a new AI agent to the team that, based on the analyses of S.O.L.I.D., architecture, and &quot;code smells&quot;, acts as a mentor, suggesting articles, courses, or videos to help the developer improve in areas where they are struggling.  Justification It transforms the tool from a simple &quot;code reviewer&quot; into a platform for professional growth and continuous learning. Instead of just pointing out an error (e.g., &quot;Violation of the Single Responsibility Principle&quot;), the tool also offers a path to the solution and learning. It would be extremely valuable for junior developers, who would receive personalized and contextualized guidance directly in their workflow. The tool could identify recurring knowledge gaps in a team, providing valuable insights for technical leadership.  Here is an idea we suggest:  Create a New Agent (config/agents.yaml):  Define a code_mentor_agent with the goal of &quot;analyzing the detected code problems and providing high-quality educational resources (links to articles, videos, or documentation) that help to understand and fix the root cause of the problem.&quot;  Create a New Task (config/tasks.yaml):  Define a mentoring_task that receives the consolidated output of the other analysis agents as its context.  The task would instruct the agent to identify the main concept behind the errors (e.g., &quot;SOLID&quot;, &quot;Clean Code&quot;, &quot;Design Patterns&quot;) and to find 1 or 2 relevant links for each concept.  Execute the New Task (codewise_lib/cw_runner.py):  After the main analysis_crew finishes, its output (task.output) would be used as input/context for a new Crew containing only the code_mentor_agent.  The output of the Mentor Agent would then be added to a new section in the Pull Request comment, with the title &quot;Learning Suggestions&quot;.  An idea would be to have a JSON file storing the history of errors after the analysis is done. In the same way the program creates a new folder in the user's repository to store the analyses with .md files, something similar could be done for the errors made in the repo.  Risks and Considerations Quality of Resources: The agent needs to be well-instructed to search for links from reliable sources to avoid suggesting poor-quality content. ","version":"Next","tagName":"h3"},{"title":"Project Plan — CodeWise","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan","content":"","keywords":"","version":"Next"},{"title":"Justification​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#justification","content":" The current version of CodeWise is fully dependent on the Google Gemini API, which incurs costs, limits offline use, and raises data privacy concerns for some organizations. Furthermore, while the tool provides excellent technical analysis, it lacks a mechanism to proactively help developers learn from their common mistakes.  ","version":"Next","tagName":"h2"},{"title":"SMART Objective​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#smart-objective","content":" Deliver an improved CodeWise library by the end of the semester, implementing functionalities for local AI model support (via Ollama) and an educational &quot;Code Mentor&quot; agent, transforming the tool into a more flexible and didactic platform.  ","version":"Next","tagName":"h2"},{"title":"Benefits​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#benefits","content":" Increase data privacy and reduce operational costs by allowing local AI model usage.Enable offline functionality for developers.Transform the tool from a code reviewer into a continuous professional growth platform.Accelerate the onboarding and skill development of junior developers.  ","version":"Next","tagName":"h2"},{"title":"Product​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#product","content":" An improved version of the codewise-lib Python library.Updated CLI tools (codewise-pr, codewise-lint, etc.) with new capabilities.  ","version":"Next","tagName":"h2"},{"title":"Requirements (main)​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#requirements-main","content":" Integrate support for local LLMs via Ollama, configurable through the .env file.Develop a new &quot;Code Mentor&quot; AI agent that suggests learning resources based on code analysis.Implement a mechanism to track recurring errors to provide more personalized feedback (using a local JSON file).Update all documentation to reflect the new features and setup processes.  ","version":"Next","tagName":"h2"},{"title":"External Stakeholders​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#external-stakeholders","content":" Development Leads and Project Managers (as users).LEDS / IFES Professor and Students.  ","version":"Next","tagName":"h2"},{"title":"Team​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#team","content":" ","version":"Next","tagName":"h2"},{"title":"Management​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#management","content":" Bernardo SimãoKaioMickele Altavilla  ","version":"Next","tagName":"h3"},{"title":"Project (Development)​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#project-development","content":" Pedro RenãGustavo SaraivaMatheus Magnago  ","version":"Next","tagName":"h3"},{"title":"Constraints​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#constraints","content":" Total deadline: 1 academic semester.Required technologies: Python, CrewAI, Git.Development budget: Voluntary academic hours.  ","version":"Next","tagName":"h2"},{"title":"Assumptions​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#assumptions","content":" The development team has the necessary skills in Python.All team members will be available according to the academic schedule.The GitHub and Gemini APIs will remain stable and accessible for comparative testing.  ","version":"Next","tagName":"h2"},{"title":"Delivery Group (Roadmap)​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#delivery-group-roadmap","content":" Deliveries  ","version":"Next","tagName":"h2"},{"title":"1st Delivery — \"Code Mentor\" Agent​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#1st-delivery--code-mentor-agent","content":" Objective: Implement the new agent for educational suggestions.  Acceptance Criteria:  New feature include a &quot;Learning Suggestions&quot; section with relevant links.A history.json file is created and updated to track recurring errors.    ","version":"Next","tagName":"h2"},{"title":"2nd Delivery — Local LLM Support via Ollama​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#2nd-delivery--local-llm-support-via-ollama","content":" Objective: Implement and document the integration with Ollama.  Acceptance Criteria:  CodeWise runs analyses using a local model selected via .env configuration.The installation guide is updated with instructions for Ollama.  ","version":"Next","tagName":"h2"},{"title":"Backlog (Prioritized)​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#backlog-prioritized","content":" Feature Roadmap  ID\tFeature\tDescription\tImportance\tProposal / Expected Result1\tCode Mentor Agent\tNew agent that suggests learning resources\t100\tAdd unique educational value and accelerate developer growth 2\tError History (JSON)\tTrack recurring errors to personalize feedback\t95\tMake the mentor's suggestions more intelligent and targeted 3\tOllama Integration\tAllow the tool to use local LLMs\t90\tSolve privacy/cost issues and enable offline use 4\tRefactor for Extensibility\tAdapt the architecture in crew.py and cw_runner.py to easily support the new features\t85\tEnsure the codebase remains clean and modular  ","version":"Next","tagName":"h2"},{"title":"Risks​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#risks","content":" Local LLM Performance: The speed and quality of local models may be a bottleneck compared to the Gemini API.Quality of Educational Links: The mentor agent might suggest low-quality or irrelevant resources if not properly prompted and guided.Schedule Conflicts: Academic demands may impact team availability.  Suggested Mitigations:  Thoroughly test and document the hardware recommendations for running Ollama.Start with a curated list of reliable sources for the mentor agent to use.Maintain clear communication and regular check-ins to monitor progress.  ","version":"Next","tagName":"h2"},{"title":"Success Metrics​","type":1,"pageTitle":"Project Plan — CodeWise","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/Project_Plan#success-metrics","content":" Both deliveries are completed by the end of the semester with all acceptance criteria met.The tool is demonstrably functional using at least one local model via Ollama.The &quot;Learning Suggestions&quot; appear correctly in the PR comments, with relevant links. ","version":"Next","tagName":"h2"},{"title":"Code Wise Documentation","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/two_code_wises","content":"","keywords":"","version":"Next"},{"title":"Code Wise Extension​","type":1,"pageTitle":"Code Wise Documentation","url":"/leds-tools-public/code_wise/two_code_wises#code-wise-extension","content":" Code Wise Extension is a Visual Studio Code (VS Code) extension that uses AI to analyze code, identifying architectural improvements, SOLID principle violations, code smells, and suggesting design patterns.  ","version":"Next","tagName":"h2"},{"title":"Code Wise Lib​","type":1,"pageTitle":"Code Wise Documentation","url":"/leds-tools-public/code_wise/two_code_wises#code-wise-lib","content":" Code Wise Lib is a Python library that uses AI to analyze code and automate Pull Request documentation through Git hooks. ","version":"Next","tagName":"h2"},{"title":"Project Management","type":0,"sectionRef":"#","url":"/leds-tools-public/code_wise/code_wise_lib/Project_management/ProjectM_Overview","content":"Project Management This section is dedicated to the management of the CodeWise project itself. It contains documents related to project planning, communication, and decision-making. As the project evolves under the new development team, we will add more artifacts here, such as: Roadmap: The long-term vision for the project.Release Plan: The plan for upcoming releases.Communication Plan: How the team communicates and stays in sync.Meeting Notes: Notes from team meetings.","keywords":"","version":"Next"},{"title":"Artifact Map","type":0,"sectionRef":"#","url":"/leds-tools-public/made/advanced_concepts/made_artifact_map","content":"Artifact Map This page focuses strictly on the mapping between MADE input components and the artifacts the tool generates. Use it as a quick reference to understand where outputs come from and what they are used for. Short mapping (inputs → primary artifacts): project → 01_overview.md, project metrics, and project-level charts (e.g., project-cfd.svg).team → data/db/team.json and team sections in generated reports.backlog → 02_backlogs.md, data/db/backlog.json, and data/db/issue.json.sprint → sprints/{sprint-name}.md, sprint charts (charts/cfd-{sprint-name}.svg, charts/throughput-{sprint-name}.svg) and data/db/timebox.json.roadmap → 03_roadmap.md and data/db/roadmap.json. Where files are typically written: Generated markdown: configurable output folder (common defaults: ./reports or ./project).Internal structured data: data/db/*.json (used by renderers and integrations).Charts and images: charts/ inside the generated output tree. Quick CI guidance: Prefer generating artifacts in CI and uploading them as build artifacts rather than committing large generated files to the repo.If you must commit generated artifacts, keep them small and stable to reduce merge conflicts.Add a lightweight job that runs npx made-cli generate (or your project's generator command) and validates that the run completes without errors. Cross-references: Examples and sample inputs: basic_concepts/3_made_examples.md.Architecture and extension points: advanced_concepts/2_made_tool_architecture.md. This file is intentionally concise — for step-by-step tutorials and in-depth walkthroughs see the basic and advanced concept pages referenced above.","keywords":"","version":"Next"},{"title":"What is MADE","type":0,"sectionRef":"#","url":"/leds-tools-public/made/basic_concepts/made_overview","content":"","keywords":"","version":"Next"},{"title":"What problems does MADE solve?​","type":1,"pageTitle":"What is MADE","url":"/leds-tools-public/made/basic_concepts/made_overview#what-problems-does-made-solve","content":" Before MADE: You spend hours manually creating GitHub issues, updating project boards, writing status reports, and keeping documentation in sync.  With MADE: You write one simple .made file describing your project, and MADE automatically generates:  📋 Organized documentation (with charts and timelines)🎯 GitHub issues and project boards📊 Progress reports and metrics🗺️ Project roadmaps  ","version":"Next","tagName":"h2"},{"title":"What you'll create with MADE​","type":1,"pageTitle":"What is MADE","url":"/leds-tools-public/made/basic_concepts/made_overview#what-youll-create-with-made","content":" MADE helps you work with familiar project concepts, but in a structured way:  Project: Basic info about your work (name, timeline, goals)Team: Who's working on whatBacklog: Your to-do list organized as Epics → Stories → TasksSprints: Time-boxed work periods with specific goalsRoadmap: High-level milestones and releases  Don't worry if some terms are new — we'll explain everything step by step!  ","version":"Next","tagName":"h2"},{"title":"Your first 5 minutes with MADE​","type":1,"pageTitle":"What is MADE","url":"/leds-tools-public/made/basic_concepts/made_overview#your-first-5-minutes-with-made","content":" Here's what a typical MADE workflow looks like:  Write a simple .made file describing your project (like filling out a form)Run one command to process the fileGet automatic documentation and optionally sync with GitHubUpdate your .made file as the project evolves  Example: Instead of manually creating 20 GitHub issues, you describe them once in your .made file, and MADE creates them all at once — with proper labels, assignments, and organization.  ","version":"Next","tagName":"h2"},{"title":"Why teams love MADE​","type":1,"pageTitle":"What is MADE","url":"/leds-tools-public/made/basic_concepts/made_overview#why-teams-love-made","content":" ✅ Saves time: Automate repetitive project setup tasks ✅ Stays in sync: One file keeps everything updated ✅ Team-friendly: Easy to review changes like code ✅ Flexible: Works for small teams or large projects ✅ Familiar: Uses tools you already know (VS Code, GitHub, Markdown)  ","version":"Next","tagName":"h2"},{"title":"Ready to get started?​","type":1,"pageTitle":"What is MADE","url":"/leds-tools-public/made/basic_concepts/made_overview#ready-to-get-started","content":" 👉 New to project management? Start with Prerequisites to set up your environment 👉 Want to see examples? Check out Examples to see MADE in action 👉 Prefer hands-on learning? Jump to VS Code Usage for an interactive experience  Take your time — MADE is designed to be learned gradually! ","version":"Next","tagName":"h2"},{"title":"Understanding MADE's Architecture: Tool vs Library","type":0,"sectionRef":"#","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib","content":"","keywords":"","version":"Next"},{"title":"Why This Matters​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#why-this-matters","content":" For Contributors: Understanding the architecture helps you know where to make changes For Integrators: Learn how to use MADE's library in your own applications For Curious Users: See how the magic happens behind the scenes  Key insight: MADE is split into two distinct parts that work together but can also work independently.    ","version":"Next","tagName":"h2"},{"title":"The Big Picture: Two-Part Architecture​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#the-big-picture-two-part-architecture","content":" Think of MADE like a restaurant:  The Tool (VS Code extension + CLI) = The friendly waiter who takes your orderThe Library (processing engine) = The skilled chef who prepares your meal  This separation means you can: ✅ Use the library directly in your own applications ✅ Create new user interfaces that connect to the same engine ✅ Test and develop each part independently    ","version":"Next","tagName":"h2"},{"title":"Part 1: MADE Tool (leds-tools-made)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#part-1-made-tool-leds-tools-made","content":" What it is: The user-facing parts — VS Code extension and CLI command  ","version":"Next","tagName":"h2"},{"title":"What the Tool Does for You​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#what-the-tool-does-for-you","content":" 🎯 Understands your .made files: Parses the DSL syntax and checks for errors 🎨 Provides a friendly interface: Syntax highlighting, autocomplete, right-click menus ⚡ Handles commands: When you click &quot;Generate Documentation&quot;, the tool coordinates everything 🔗 Connects the pieces: Takes your input and passes it to the processing library  ","version":"Next","tagName":"h3"},{"title":"Tool Architecture (For Developers)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#tool-architecture-for-developers","content":" 📁 leds-tools-made/ ├── 📁 application/ ← Domain logic (Project, Team, TimeBox classes) ├── 📁 language/ ← Langium grammar files (.made syntax rules) ├── 📁 static/ ← VS Code editor UI components ├── 📁 cli/ ← Command-line interface code └── 📁 extension/ ← VS Code extension hooks and commands   Key technologies:  Langium: Creates the .made language and provides intelligent editingVS Code Extension API: Integrates with your editorNode.js: Powers the CLI and background processing  Developer tip: If you want to add new DSL syntax or VS Code features, you'll work in this repository.    ","version":"Next","tagName":"h3"},{"title":"Part 2: MADE Library (leds-tools-made-lib)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#part-2-made-library-leds-tools-made-lib","content":" What it is: The processing engine that does the heavy lifting  ","version":"Next","tagName":"h2"},{"title":"What the Library Does for You​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#what-the-library-does-for-you","content":" ⚙️ Processes your data: Transforms .made content into useful structures 📋 Generates documentation: Creates beautiful Markdown reports with charts 📊 Creates visualizations: SVG charts, dependency graphs, timelines 🔗 Handles GitHub integration: Creates issues, projects, and milestones automatically  ","version":"Next","tagName":"h3"},{"title":"Library Architecture (For Developers)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#library-architecture-for-developers","content":" 📁 leds-tools-made-lib/ ├── 📁 models/ ← Data structures (Project, Sprint, Issue types) ├── 📁 markdown/ ← Report generation services ├── 📁 chart/ ← SVG chart creators (burndown, CFD, dependencies) ├── 📁 util/ ← Helper functions and utilities └── 📁 service/ ← GitHub API integration logic   Key services explained:  MarkdownService: The &quot;report writer&quot; that creates your documentationGitHubService: The &quot;GitHub connector&quot; that creates issues and projectsChartGenerators: The &quot;visualization artists&quot; that create graphs and diagramsDependencyAnalyzer: The &quot;relationship mapper&quot; that figures out task dependencies  Developer tip: If you want to add new output formats or integrations, you'll work in this repository.    ","version":"Next","tagName":"h3"},{"title":"Why Split Into Two Parts?​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#why-split-into-two-parts","content":" ","version":"Next","tagName":"h2"},{"title":"🧩 Modularity (Easier to Understand)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#-modularity-easier-to-understand","content":" Tool: &quot;How do users interact with MADE?&quot;Library: &quot;How does MADE process and generate outputs?&quot;Each part has a clear, focused purpose  ","version":"Next","tagName":"h3"},{"title":"🔄 Reusability (Use MADE Your Way)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#-reusability-use-made-your-way","content":" Use the library directly in Node.js applicationsCreate web interfaces, mobile apps, or other frontendsIntegrate MADE into existing CI/CD pipelines  ","version":"Next","tagName":"h3"},{"title":"🛠️ Maintainability (Easier to Develop)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#️-maintainability-easier-to-develop","content":" Test user interface separately from processing logicClear API boundaries prevent tangled codeDifferent teams can work on different parts  ","version":"Next","tagName":"h3"},{"title":"🚀 Extensibility (Future-Proof)​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#-extensibility-future-proof","content":" Add new user interfaces without changing the coreExtend processing capabilities independentlySupport plugin architectures  ","version":"Next","tagName":"h3"},{"title":"Integration Flow​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#integration-flow","content":"   ","version":"Next","tagName":"h2"},{"title":"Usage Patterns​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#usage-patterns","content":" ","version":"Next","tagName":"h2"},{"title":"Direct Library Usage​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#direct-library-usage","content":" import { ReportManager } from 'made-lib-beta'; const reportManager = new ReportManager(); await reportManager.githubPush(token, org, repo, project, epics, stories, tasks);   ","version":"Next","tagName":"h3"},{"title":"Tool-mediated Usage​","type":1,"pageTitle":"Understanding MADE's Architecture: Tool vs Library","url":"/leds-tools-public/made/advanced_concepts/made_tool_vs_lib#tool-mediated-usage","content":" # Via CLI npx made-cli github project.made # Via VS Code Extension # Right-click &gt; Generate GitHub Issues   This architecture allows MADE to be both user-friendly through the tool interface and powerful through direct library integration. ","version":"Next","tagName":"h3"},{"title":"How to Use MADE CLI — Step by Step","type":0,"sectionRef":"#","url":"/leds-tools-public/made/basic_concepts/made_cli_usage","content":"","keywords":"","version":"Next"},{"title":"What is the CLI?​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#what-is-the-cli","content":" The CLI (Command Line Interface) is MADE's text-based tool. Instead of clicking buttons, you type commands to tell MADE what to do. It's faster once you learn it, and perfect for automation.  Think of it like: Giving instructions to a very obedient assistant who does exactly what you tell them.    ","version":"Next","tagName":"h2"},{"title":"Step 1: Installation Options​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#step-1-installation-options","content":" You have two ways to use MADE's CLI:  ","version":"Next","tagName":"h2"},{"title":"Option A: Install Once, Use Everywhere (Recommended)​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#option-a-install-once-use-everywhere-recommended","content":" npm install -g made-cli   Benefit: Type made-cli from anywhere on your computer  ","version":"Next","tagName":"h3"},{"title":"Option B: Use Without Installing​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#option-b-use-without-installing","content":" npx made-cli --help   Benefit: No installation needed, but commands are longer  💡 Tip: If you're just trying MADE, use Option B. If you'll use it regularly, go with Option A.    ","version":"Next","tagName":"h3"},{"title":"Step 2: Your First Commands​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#step-2-your-first-commands","content":" ","version":"Next","tagName":"h2"},{"title":"Get Help (Start Here!)​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#get-help-start-here","content":" npx made-cli --help   What this does: Shows you all available commands and options When to use: When you forget command syntax or want to explore features  ","version":"Next","tagName":"h3"},{"title":"Generate Documentation​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#generate-documentation","content":" npx made-cli generate project.made -d ./documentation   What this does:  Reads your project.made fileCreates documentation in the ./documentation folderIncludes reports, charts, and organized information  What you'll see: New files appear in your documentation folder with names like 01_overview.md, 02_backlog.md, etc.  ","version":"Next","tagName":"h3"},{"title":"Sync with GitHub (Advanced)​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#sync-with-github-advanced","content":" npx made-cli github project.made   What this does: Creates GitHub issues and project boards based on your .made file What you need first: GitHub token setup (explained below)    ","version":"Next","tagName":"h3"},{"title":"Step 3: GitHub Integration Setup​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#step-3-github-integration-setup","content":" Want MADE to create GitHub issues automatically? Follow these steps:  ","version":"Next","tagName":"h2"},{"title":"3.1: Create a GitHub Token​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#31-create-a-github-token","content":" Go to GitHub.com → Settings → Developer settings → Personal access tokensClick &quot;Generate new token (classic)&quot;Select scopes: repo (and write:org if using organization)Copy the generated token (keep it safe!)  ","version":"Next","tagName":"h3"},{"title":"3.2: Create Environment File​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#32-create-environment-file","content":" Create a .env file in the same folder as your .made file:  GITHUB_TOKEN=your_actual_token_here GITHUB_ORG=your_github_username_or_org GITHUB_REPO=your_repository_name   Example:  GITHUB_TOKEN=ghp_1234567890abcdef GITHUB_ORG=mycompany GITHUB_REPO=myproject   ","version":"Next","tagName":"h3"},{"title":"3.3: Test GitHub Integration​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#33-test-github-integration","content":" npx made-cli github project.made   What happens: MADE creates issues, labels, and project structure in your GitHub repository    ","version":"Next","tagName":"h3"},{"title":"Complete Example Workflow​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#complete-example-workflow","content":" Here's a typical session from start to finish:  # 1. Create your project file (using any text editor) # Save as: project.made # 2. Generate documentation npx made-cli generate project.made -d ./docs # 3. Check what was created ls ./docs # 4. (Optional) Sync with GitHub npx made-cli github project.made   Expected results:  Documentation appears in ./docs folder(If GitHub integration) Issues appear in your GitHub repository    ","version":"Next","tagName":"h2"},{"title":"What MADE Creates for You​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#what-made-creates-for-you","content":" When you run generate, MADE produces:  📄 Documentation Files:  01_overview.md — Project summary and team info02_backlogs.md — Your organized task lists03_roadmap.md — Timeline and milestonessprints/ folder — Individual sprint reports  📊 Charts and Visuals:  SVG charts showing progressTimeline diagramsDependency graphs  🔗 GitHub Integration (optional):  Issues for each Epic, Story, and TaskProper labels and assignmentsProject boards and milestones    ","version":"Next","tagName":"h2"},{"title":"Troubleshooting Common Issues​","type":1,"pageTitle":"How to Use MADE CLI — Step by Step","url":"/leds-tools-public/made/basic_concepts/made_cli_usage#troubleshooting-common-issues","content":" &quot;Command not found&quot; → Make sure Node.js is installed: node -v  &quot;Permission denied&quot; → Try a different output folder: -d ./my-docs  &quot;GitHub token invalid&quot; → Check your .env file has the correct token and repository info  &quot;No .made file found&quot; → Make sure you're in the right folder and the file exists: ls *.made ","version":"Next","tagName":"h2"},{"title":"MADE Examples — Learn by Doing","type":0,"sectionRef":"#","url":"/leds-tools-public/made/basic_concepts/made_examples","content":"","keywords":"","version":"Next"},{"title":"How to use this page​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#how-to-use-this-page","content":" 👀 Read the examples — Each example is explained step-by-step ✏️ Try them yourself — Copy examples into your own .made files 🔧 Modify and experiment — Change values to see what happens 🚀 Run the commands — Use npx made-cli generate to see the results    ","version":"Next","tagName":"h2"},{"title":"Example 1: Your First Project (Start Here!)​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#example-1-your-first-project-start-here","content":" What this shows: Basic project setup with a team  project myproject { name: &quot;My Awesome Project&quot; description: &quot;A sample project to demonstrate MADE features&quot; startDate: 2024-01-01 dueDate: 2024-12-31 } team developers { name: &quot;Development Team&quot; description: &quot;Core development team&quot; teammember john { name: &quot;John Doe&quot; email: &quot;john@company.com&quot; discord: &quot;johndoe&quot; } teammember jane { name: &quot;Jane Smith&quot; email: &quot;jane@company.com&quot; discord: &quot;janesmith&quot; } }   What happens when you run this:  ✅ Creates a project overview document✅ Lists team members in generated reports✅ Sets up basic project structure  Try changing: Update the project name, add more team members, or change the dates    ","version":"Next","tagName":"h2"},{"title":"Example 2: Reusable Workflows​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#example-2-reusable-workflows","content":" What this shows: How to define processes you can reuse across different projects  process webdevelopment { name: &quot;Web Development Process&quot; description: &quot;Standard web development workflow&quot; activity planning { name: &quot;Planning Phase&quot; description: &quot;Project planning and requirements gathering&quot; task requirements { name: &quot;Gather Requirements&quot; description: &quot;Document functional and non-functional requirements&quot; } task architecture { name: &quot;Design Architecture&quot; description: &quot;Design system architecture and tech stack&quot; depends: webdevelopment.planning.requirements } } activity development { name: &quot;Development Phase&quot; description: &quot;Implementation and testing&quot; task coding { name: &quot;Code Implementation&quot; description: &quot;Implement features according to specifications&quot; } } }   Key concepts explained:  Process: A reusable workflow templateActivity: Major phases in your process (like &quot;Planning&quot; or &quot;Development&quot;)Task: Specific work items within activitiesdepends: Shows that one task must finish before another starts  Real-world benefit: Define this process once, then use it for every web project your team does!    ","version":"Next","tagName":"h2"},{"title":"Example 3: Organizing Work with Backlogs​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#example-3-organizing-work-with-backlogs","content":" What this shows: How to break down features into manageable pieces  backlog productbacklog { name: &quot;Product Backlog&quot; description: &quot;Main product features and requirements&quot; epic authentication { name: &quot;User Authentication System&quot; description: &quot;Implement secure user authentication&quot; process: webdevelopment Criterions: &quot;Support multiple auth methods&quot;, &quot;Secure password handling&quot; observation: &quot;Consider OAuth integration&quot; story login { name: &quot;User Login&quot; description: &quot;Basic username/password login functionality&quot; activity: webdevelopment.planning Requirements: &quot;Email validation&quot;, &quot;Password strength checking&quot; Criterions: &quot;Successful login redirects to dashboard&quot; task loginform { name: &quot;Create Login Form&quot; description: &quot;HTML form with validation&quot; task: webdevelopment.development.coding Deliverables: &quot;Login form component&quot;, &quot;Form validation&quot; } task authentication { name: &quot;Backend Authentication&quot; description: &quot;Server-side authentication logic&quot; depends: productbacklog.authentication.login.loginform Deliverables: &quot;Auth API endpoints&quot;, &quot;Session management&quot; } } story registration { name: &quot;User Registration&quot; description: &quot;New user account creation&quot; task regform { name: &quot;Registration Form&quot; description: &quot;User registration form with validation&quot; Deliverables: &quot;Registration form&quot;, &quot;Email verification&quot; } } } }   ","version":"Next","tagName":"h2"},{"title":"Sprint Planning​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#sprint-planning","content":" sprint sprint1 { name: &quot;Sprint 1 - Authentication&quot; description: &quot;Implement basic authentication features&quot; startDate: 2024-02-01 endDate: 2024-02-14 status: IN_PROGRESS sprintbacklog items { item productbacklog.authentication.login.loginform { assignee: developers.john dueDate: 2024-02-07 status: TODO complexity: MEDIUM } item productbacklog.authentication.login.authentication { assignee: developers.jane dueDate: 2024-02-12 status: TODO complexity: HIGH } item productbacklog.authentication.registration.regform { assignee: developers.john dueDate: 2024-02-14 status: TODO complexity: LOW } } }   ","version":"Next","tagName":"h2"},{"title":"Roadmap with Milestones​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#roadmap-with-milestones","content":" roadmap projectroadmap { name: &quot;Project Roadmap 2024&quot; description: &quot;Strategic development plan for the year&quot; milestone v1 { name: &quot;Version 1.0 - MVP&quot; description: &quot;Minimum viable product with core features&quot; startDate: 2024-01-01 dueDate: 2024-06-30 status: IN_PROGRESS release alpha { name: &quot;Alpha Release&quot; description: &quot;Initial feature set for testing&quot; version: &quot;0.1.0&quot; dueDate: 2024-03-31 status: IN_DEVELOPMENT item: productbacklog.authentication } release beta { name: &quot;Beta Release&quot; description: &quot;Feature-complete beta version&quot; version: &quot;0.9.0&quot; dueDate: 2024-06-15 status: PLANNED itens: productbacklog.authentication.login, productbacklog.authentication.registration } } }   ","version":"Next","tagName":"h2"},{"title":"Complete Example File​","type":1,"pageTitle":"MADE Examples — Learn by Doing","url":"/leds-tools-public/made/basic_concepts/made_examples#complete-example-file","content":" Made Example  This example demonstrates:  Project setup with team membersReusable process definitionBacklog with dependenciesSprint planning with assignmentsRoadmap with milestones and releasesProper dependency management between tasks ","version":"Next","tagName":"h2"},{"title":"Using MADE in VS Code — Your Interactive Guide","type":0,"sectionRef":"#","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage","content":"","keywords":"","version":"Next"},{"title":"Why Use the VS Code Extension?​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#why-use-the-vs-code-extension","content":" ✅ Smart editing: Autocomplete and syntax highlighting for .made files ✅ Instant feedback: See errors as you type ✅ One-click actions: Generate docs or sync GitHub with right-click menus ✅ Familiar interface: Use the editor you already know    ","version":"Next","tagName":"h2"},{"title":"Step 1: Install the MADE Extension​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#step-1-install-the-made-extension","content":" ","version":"Next","tagName":"h2"},{"title":"Method 1: Extension Marketplace (Recommended)​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#method-1-extension-marketplace-recommended","content":" Open VS CodePress Ctrl+Shift+X (or click the Extensions icon in the sidebar)Search for &quot;MADE - Leds - Beta&quot;Click &quot;Install&quot;  ","version":"Next","tagName":"h3"},{"title":"Method 2: Manual Installation (For Developers)​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#method-2-manual-installation-for-developers","content":" Download the .vsix file from the Releases pageIn VS Code: Ctrl+Shift+P → &quot;Extensions: Install from VSIX&quot;Select the downloaded file  🎉 Success indicator: You'll see syntax highlighting when you open .made files    ","version":"Next","tagName":"h3"},{"title":"Step 2: Create Your First Project​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#step-2-create-your-first-project","content":" ","version":"Next","tagName":"h2"},{"title":"2.1: Create the File​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#21-create-the-file","content":" Open a folder in VS Code (File → Open Folder)Create a new file: Right-click in Explorer → New FileName it project.made (the .made extension is important!)  ","version":"Next","tagName":"h3"},{"title":"2.2: Add Basic Content​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#22-add-basic-content","content":" Copy this starter template into your file:  project myproject { name: &quot;My First MADE Project&quot; description: &quot;Learning MADE step by step&quot; startDate: 2024-01-01 dueDate: 2024-12-31 } team developers { name: &quot;Development Team&quot; teammember me { name: &quot;Your Name Here&quot; email: &quot;your.email@example.com&quot; } }   💡 Notice: As you type, VS Code provides autocomplete suggestions and highlights syntax errors in red.    ","version":"Next","tagName":"h3"},{"title":"Step 3: Generate Documentation (The Magic Happens!)​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#step-3-generate-documentation-the-magic-happens","content":" ","version":"Next","tagName":"h2"},{"title":"Option 1: Right-Click Method (Easiest)​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#option-1-right-click-method-easiest","content":" Right-click on your project.made file in the Explorer panelSelect &quot;MADE: Generate Documentation&quot;Watch the magic: New files appear in a reports folder!  ","version":"Next","tagName":"h3"},{"title":"Option 2: Command Palette Method​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#option-2-command-palette-method","content":" Open your .made filePress Ctrl+Shift+P to open Command PaletteType &quot;MADE: Generate&quot; and select &quot;MADE: Generate Documentation&quot;  ","version":"Next","tagName":"h3"},{"title":"What You'll See​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#what-youll-see","content":" After generation, VS Code creates:  📁 reports/ 📄 01_overview.md ← Project summary 📄 02_backlogs.md ← Task lists 📄 03_roadmap.md ← Timeline 📁 sprints/ ← Sprint details   🔍 Tip: Click on the generated files to see beautifully formatted documentation!    ","version":"Next","tagName":"h3"},{"title":"Step 4: GitHub Integration (Optional but Powerful)​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#step-4-github-integration-optional-but-powerful","content":" Want MADE to create GitHub issues automatically? Here's how:  ","version":"Next","tagName":"h2"},{"title":"4.1: Set Up Your GitHub Connection​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#41-set-up-your-github-connection","content":" Create a .env file in the same folder as your project.madeAdd your GitHub details:  GITHUB_TOKEN=your_personal_access_token GITHUB_ORG=your_github_username GITHUB_REPO=your_repository_name   Where to get a token: GitHub.com → Settings → Developer settings → Personal access tokens  ","version":"Next","tagName":"h3"},{"title":"4.2: Sync with GitHub​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#42-sync-with-github","content":" Right-click your .made fileSelect &quot;MADE: Generate GitHub Issues&quot;Check your GitHub repository — issues appear automatically!    ","version":"Next","tagName":"h3"},{"title":"Step 5: Advanced Features​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#step-5-advanced-features","content":" ","version":"Next","tagName":"h2"},{"title":"Real-Time Error Checking​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#real-time-error-checking","content":" Red squiggles: Show syntax errors as you typeProblems panel: Ctrl+Shift+M to see all issuesHover tooltips: Place cursor over errors for explanations  ","version":"Next","tagName":"h3"},{"title":"Smart IntelliSense​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#smart-intellisense","content":" Auto-completion: Press Ctrl+Space for suggestionsSyntax hints: VS Code knows the MADE language structureReference links: Jump between related items with Ctrl+Click  ","version":"Next","tagName":"h3"},{"title":"Output Panel (For Debugging)​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#output-panel-for-debugging","content":" View → Output: Select &quot;MADE&quot; from dropdownSee generation logs: Detailed information about what MADE is doingDebug errors: Full error messages when something goes wrong    ","version":"Next","tagName":"h3"},{"title":"Troubleshooting Made Easy​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#troubleshooting-made-easy","content":" ","version":"Next","tagName":"h2"},{"title":"\"No syntax highlighting\"​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#no-syntax-highlighting","content":" Solution: Make sure your file ends with .made and the extension is installed  ","version":"Next","tagName":"h3"},{"title":"\"MADE commands not appearing\"​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#made-commands-not-appearing","content":" Solution: Restart VS Code after installing the extension  ","version":"Next","tagName":"h3"},{"title":"\"GitHub sync failed\"​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#github-sync-failed","content":" Solutions:  Check your .env file is in the correct locationVerify your GitHub token has repo permissionsEnsure repository name matches exactly (case-sensitive)  ","version":"Next","tagName":"h3"},{"title":"\"Generation errors\"​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#generation-errors","content":" Solutions:  Check the Problems panel (Ctrl+Shift+M) for syntax errorsLook at the Output panel for detailed error messagesStart with a simple example and build complexity gradually    ","version":"Next","tagName":"h3"},{"title":"Pro Tips for Power Users​","type":1,"pageTitle":"Using MADE in VS Code — Your Interactive Guide","url":"/leds-tools-public/made/basic_concepts/made_vscode_usage#pro-tips-for-power-users","content":" 🚀 Keyboard shortcuts: Set up custom shortcuts for MADE commands 📁 Workspace settings: Configure default output folders per project 🔄 Auto-generation: Set up file watchers to regenerate on save 🎨 Themes: MADE syntax works with all VS Code color themes ","version":"Next","tagName":"h2"},{"title":"Prerequisites — MADE (Complete Setup Guide)","type":0,"sectionRef":"#","url":"/leds-tools-public/made/basic_concepts/prerequisites","content":"","keywords":"","version":"Next"},{"title":"What you'll accomplish in this guide​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#what-youll-accomplish-in-this-guide","content":" ✅ All required software installed and working✅ Basic understanding of key concepts✅ A working MADE setup you can test✅ Knowledge of where to get help  Estimated time: 15-20 minutes  ","version":"Next","tagName":"h2"},{"title":"Quick plan (what this file covers)​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#quick-plan-what-this-file-covers","content":" Environment preparation checklistEssential concepts to understand before using MADEQuick verification commands and example usageCurated learning links and resources    ","version":"Next","tagName":"h2"},{"title":"Step 1: Setup Checklist (do these in order)​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#step-1-setup-checklist-do-these-in-order","content":" Follow these steps one by one — we'll explain each below:   Install Node.js (recommended LTS 16 or 18) — the engine that runs MADE Install Git and configure your name/email — for downloading code Install a code editor (VS Code recommended) — for writing project files Clone this repository and run npm ci — get MADE on your computer Have at least one .made example file (for example project.made) — something to test with  💡 Tip: Don't skip the verification steps below — they'll save you troubleshooting time later!    ","version":"Next","tagName":"h2"},{"title":"1) System requirements (software)​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#1-system-requirements-software","content":" Node.js (LTS): https://nodejs.org/ — install version 16.x or 18.x.npm (bundled with Node.js): https://docs.npmjs.com/Git: https://git-scm.com/docs — used to clone and manage the repository.VS Code (recommended): https://code.visualstudio.com/ — for extension usage and editing.  Quick verification commands (PowerShell):  node -v npm -v git --version   Tip: use npm ci in CI environments or when you want a reproducible install; use npm install while actively developing.    ","version":"Next","tagName":"h2"},{"title":"2) Essential concepts (what's useful to know)​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#2-essential-concepts-whats-useful-to-know","content":" Command line basics: cloning repositories, running scripts (e.g. npm run build), and inspecting files. Quick start: What is Git? JavaScript / TypeScript: MADE is written in TypeScript. You don't need to be an expert, but basic knowledge helps. JavaScript (MDN): JavaScript GuideTypeScript handbook: TypeScript Handbook Markdown: MADE generates Markdown files; knowing Markdown helps customize templates and review outputs. Markdown guide: Markdown Guide GitHub (Issues / Projects / Actions): if you plan to use the GitHub integration, understand issues, milestones and projects. GitHub Issues: GitHub IssuesGitHub Projects: GitHub Projects Langium (optional, for language/grammar contributors): a framework used for building DSLs and language servers. Langium docs: Langium Docs Mermaid (optional): used to render diagrams and timelines inside Markdown. Mermaid: Mermaid    ","version":"Next","tagName":"h2"},{"title":"3) Expected project files and configuration​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#3-expected-project-files-and-configuration","content":" .made input files (e.g. project.made): contain project, team, backlog, and sprint definitions.    ","version":"Next","tagName":"h2"},{"title":"4) Quick commands (sanity checks)​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#4-quick-commands-sanity-checks","content":" Generate artifacts:  npx made-cli generate project.made -d ./reports   GitHub sync:  npx made-cli github project.made   Get help:  npx made-cli --help   Developing the extension (VS Code):  # in the extension folder npm ci npm run build # open in VS Code and press F5 to run the extension in dev mode     ","version":"Next","tagName":"h2"},{"title":"5) Common problems and how to fix them​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#5-common-problems-and-how-to-fix-them","content":" &quot;command not found&quot; → confirm Node/npm are in your PATH.Permission errors when writing to ./reports → change output folder or fix permissions.Missing GitHub API token → create a personal access token and export it as GITHUB_TOKEN or use a .env file.  Helpful links for troubleshooting:  GitHub personal access tokens: GitHub Personal Access Tokensnpm common errors: npm Common Errors    ","version":"Next","tagName":"h2"},{"title":"6) Recommended learning resources (curated links)​","type":1,"pageTitle":"Prerequisites — MADE (Complete Setup Guide)","url":"/leds-tools-public/made/basic_concepts/prerequisites#6-recommended-learning-resources-curated-links","content":" Node.js docs: Node.js Docsnpm docs: npm DocsPro Git book: Pro GitVS Code Extension (publishing): VS Code DocsJavaScript (MDN): JavaScript GuideTypeScript handbook: TypeScript HandbookMarkdown basic syntax: Markdown Basic SyntaxLangium (DSL/LSP): LangiumMermaid diagrams: MermaidDocusaurus (docs site): DocusaurusGitHub Issues &amp; Projects: GitHub Issues &amp; Projects ","version":"Next","tagName":"h2"},{"title":"Project Plan — MADE","type":0,"sectionRef":"#","url":"/leds-tools-public/made/project_management/made_project_plan","content":"","keywords":"","version":"Next"},{"title":"Justification​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#justification","content":" Starting project management requires a lot of time: today it's necessary to create tasks individually, which delays project start and reduces productivity. Automating issue and report generation will allow starting and managing projects with less friction.  ","version":"Next","tagName":"h2"},{"title":"SMART Objective​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#smart-objective","content":" Deliver an improved MADE extension and library in 4 months, consuming at most 100 hours of voluntary development, delivering functionalities that reduce management time and avoid issue duplication.  ","version":"Next","tagName":"h2"},{"title":"Benefits​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#benefits","content":" Speed up issue and report generation on GitHub.Facilitate team and project management.Increase productivity and reduce management costs and time.  ","version":"Next","tagName":"h2"},{"title":"Product​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#product","content":" Improved VS Code extension (MADE).Updated and modularized processing/refinement library (MADE-lib).  ","version":"Next","tagName":"h2"},{"title":"Requirements (main)​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#requirements-main","content":" Avoid GitHub issue duplication.Allow creation and use of new templates for issues and reports.Map MADE components to appropriate GitHub structures (issues, milestones, projects).Refactor code to follow event-driven paradigm.Document improvements and describe system functionalities.  ","version":"Next","tagName":"h2"},{"title":"External Stakeholders​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#external-stakeholders","content":" Project managersLEDSIFES students  ","version":"Next","tagName":"h2"},{"title":"Team​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#team","content":" ","version":"Next","tagName":"h2"},{"title":"Management​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#management","content":" Breno AmâncioBreno ScalzerJonathan SilvaJosias BorbaNathan RibeiroPaulo LopesRafael Borges  ","version":"Next","tagName":"h3"},{"title":"Project (development)​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#project-development","content":" Davi AlvarengaDouglas BolisHeitor OliveiraIsrael CarmoLucas MarianiLucas PianissolaVinícius Cunha  ","version":"Next","tagName":"h3"},{"title":"Constraints​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#constraints","content":" Total deadline: 4 months.Required technologies: TypeScript, Langium, MVC architecture.Development budget: maximum of 100 allocated hours (voluntary or sponsored).  ","version":"Next","tagName":"h2"},{"title":"Assumptions​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#assumptions","content":" All team members will be available according to schedule.There will be necessary funding/resources for execution.Project delivery within the 4-month deadline.  ","version":"Next","tagName":"h2"},{"title":"Delivery Group (roadmap by deliveries)​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#delivery-group-roadmap-by-deliveries","content":" 1st delivery — Docusaurus Documentation (1 sprint)  Objective: Structure MADE public documentation, include usage guides, examples and templates.Acceptance criteria: Docusaurus site published on gh-pages branch or as stable build; essential pages (overview, prerequisites, examples) ready.Deadline: 08/29/2025  2nd delivery — Map MADE components to GitHub (4 sprints)  Objective: Define and implement mapping between MADE components and GitHub artifacts (issues, milestones, projects)Acceptance criteria: mapping documented; proof of concept that correctly creates issues/milestones in test repository.Final deadline: 09/26/2025  3rd delivery — Avoid issue duplication and GitHub Templates (4 sprints)  Objective: Implement duplicate detection/avoidance and support for configurable issue templatesAcceptance criteria: integration execution without generating duplicates in multiple executions; templates applicable via .made-templates/ or config.Final deadline: 10/28/2025  4th delivery — Event-driven paradigm (4 sprints)  Objective: Refactor architecture to an event-based model, enabling plugins and greater extensibilityAcceptance criteria: documented architecture; important modules using EventBus and testable handlers; contribution documentation for plugins.Final deadline: 11/28/2025  ","version":"Next","tagName":"h2"},{"title":"Backlog (prioritized)​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#backlog-prioritized","content":" ID\tFeature\tDescription\tImportance\tProposal / Expected Result1\tAvoid issue duplication\tCompare existing issues and avoid creating duplicates\t100\tReduce repository noise and avoid duplicate work 2\tIssue Templates\tSupport for .made-templates/ and variables in templates\t95\tReusable templates per project, better formatting 3\tMADE→GitHub Mapping\tMap Project/Sprint/Team → Projects/Milestones/Assignees\t90\tMore natural integration with GitHub workflow 4\tEvent-driven refactor\tIntroduce EventBus and handlers for modular processing\t90\tBetter extensibility and unit tests 5\tMVC &amp; modular refactor\tSeparate core (lib) from IO and UI layer\t80\tFacilitate NPM package publication and reuse 6\tDocumentation and examples\tImprove docs, examples and contribution guides\t75\tReduce entry barrier and accelerate testing by contributors  ","version":"Next","tagName":"h2"},{"title":"Risks​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#risks","content":" Tools (CI, Docker, GitHub APIs) presenting problems or unavailability.Schedule conflicts between members, reducing planned deliveries.Unexpected absences or personal issues of members.External blocks that prevent progress (third-party dependencies, approvals).  Suggested mitigations:  Plan minimum contingency (10–15% buffer of estimated time).Weekly communications and availability confirmation before each sprint.Have a test repository to validate GitHub integrations without impacting production.  ","version":"Next","tagName":"h2"},{"title":"Success Metrics​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#success-metrics","content":" Deliveries completed on milestone dates with acceptance criteria met.Measurable reduction of issue duplication in tests (goal: &lt; 1% duplicates generated).Minimum unit test coverage in refactored modules (goal: 60%+ in critical areas).Total development time within the estimated 100-hour limit (monitor via simple timesheets).  ","version":"Next","tagName":"h2"},{"title":"Summary Timeline​","type":1,"pageTitle":"Project Plan — MADE","url":"/leds-tools-public/made/project_management/made_project_plan#summary-timeline","content":" 08/29/2025 — 1st Delivery (Docusaurus)09/26/2025 — 2nd Delivery (MADE→GitHub Mapping)10/28/2025 — 3rd Delivery (Avoid duplication + Templates)11/28/2025 — 4th Delivery (Event-driven) ","version":"Next","tagName":"h2"},{"title":"Project Management","type":0,"sectionRef":"#","url":"/leds-tools-public/made/project_management/overview","content":"Project Management This section is dedicated to the management of the MADE project itself. It contains documents related to project planning, communication, and decision-making. As the project evolves, we will add more artifacts here, such as: Roadmap: The long-term vision for the project.Release Plan: The plan for upcoming releases.Communication Plan: How the team communicates and stays in sync.Meeting Notes: Notes from team meetings.","keywords":"","version":"Next"},{"title":"How to Contribute","type":0,"sectionRef":"#","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute","content":"","keywords":"","version":"Next"},{"title":"Getting Started​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#getting-started","content":" ","version":"Next","tagName":"h2"},{"title":"Development Setup​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#development-setup","content":" Fork the repositoryClone your fork locallyInstall dependencies: Node 16+ recommended. Use a reproducible install: npm ci (or npm install for first-time installs)Build the project: npm run buildRun tests: npm test  ","version":"Next","tagName":"h3"},{"title":"Repository Structure​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#repository-structure","content":" leds-tools-made - VS Code extension and CLIleds-tools-made-lib - Core processing libraryleds-tools-made-docker - Containerized runtimeleds-tools-made-githubaction - GitHub Actions automation  ","version":"Next","tagName":"h3"},{"title":"Priority Feature Requests​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#priority-feature-requests","content":" We've identified several key improvements that would make MADE significantly better. These features represent excellent opportunities for contributors to make meaningful impact.  ","version":"Next","tagName":"h2"},{"title":"1. Avoid Duplication of Issues on GitHub​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#1-avoid-duplication-of-issues-on-github","content":" Problem: Currently, running the GitHub integration multiple times creates duplicate issues.  Solution Needed:  Compare existing repository issues before creationSkip issues that already exist based on title/description matchingProvide option to update existing issues instead of creating duplicates  Implementation Approach:  class GitHubDuplicationHandler { async getExistingIssues(org: string, repo: string): Promise&lt;GitHubIssue[]&gt; { // Query existing issues from repository } async shouldCreateIssue(newIssue: Issue, existingIssues: GitHubIssue[]): Promise&lt;boolean&gt; { // Compare titles, descriptions, labels // Return false if similar issue exists } }   Impact: Prevents cluttered repositories and improves workflow reliability.  ","version":"Next","tagName":"h3"},{"title":"2. Allow Use of GitHub Templates​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#2-allow-use-of-github-templates","content":" Problem: Issues are created with basic formatting, missing repository-specific templates.  Solution Needed:  Support custom issue templates for different issue types (Epic, Story, Task)Read templates from local folder structureAllow variable substitution in templates  Implementation Approach:  project/ ├── .made-templates/ │ ├── epic.md # Epic issue template │ ├── story.md # Story issue template │ └── task.md # Task issue template ├── project.made └── .env   Template Example:  &lt;!-- epic.md --&gt; ## Epic: {{title}} **Description**: {{description}} **Acceptance Criteria**: {{#each criterions}} - [ ] {{this}} {{/each}} **Related Stories**: &lt;!-- Will be populated automatically --&gt;   Impact: Better integration with existing GitHub workflows and repository standards.  ","version":"Next","tagName":"h3"},{"title":"3. Event-Based Programming Paradigm​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#3-event-based-programming-paradigm","content":" Problem: Current implementation uses condition-checking patterns, making it harder to extend and maintain.  Solution Needed:  Refactor core architecture to use event-driven patternsImplement observer pattern for component processingEnable plugin-based extensions through events  Implementation Approach:  interface MadeEvent { type: string; data: any; timestamp: Date; } class EventBus { private listeners: Map&lt;string, Function[]&gt; = new Map(); emit(event: MadeEvent): void { const handlers = this.listeners.get(event.type) || []; handlers.forEach(handler =&gt; handler(event)); } on(eventType: string, handler: Function): void { // Register event listener } } // Usage eventBus.on('backlog.processed', (event) =&gt; { // Generate backlog documentation }); eventBus.on('sprint.created', (event) =&gt; { // Update sprint metrics });   Impact: Improved extensibility, better separation of concerns, and easier testing.  ","version":"Next","tagName":"h3"},{"title":"4. Improve GitHub Integration Mapping​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#4-improve-github-integration-mapping","content":" Problem: Current GitHub integration doesn't leverage GitHub's native features optimally.  Solution Needed:  Better mapping of MADE components to GitHub native structuresUtilize GitHub Projects V2 custom fields more effectivelyImprove milestone and release management integration  Current vs Improved Mapping:  MADE Component\tCurrent GitHub Mapping\tImproved MappingEpic\tIssue with &quot;Epic&quot; label\tEpic issue with linked children Story\tIssue with &quot;Story&quot; label\tStory with proper parent Epic reference Task\tIssue with &quot;Task&quot; label\tTask with Story parent and proper assignees Sprint\tMilestone\tGitHub Project iteration field Process\tNot mapped\tGitHub Project template Dependencies\tDescription text\tGitHub issue blocking relationships  Implementation Ideas:  class ImprovedGitHubMapper { async createEpicWithChildren(epic: Epic): Promise&lt;void&gt; { // Create parent Epic issue // Create child Story issues with proper linking // Use GitHub's issue hierarchy features } async mapSprintToIteration(sprint: TimeBox): Promise&lt;void&gt; { // Use GitHub Projects V2 iteration fields // Better sprint planning integration } async setupDependencyBlocking(task: Task): Promise&lt;void&gt; { // Use GitHub's native issue blocking // Create proper dependency chains } }   Impact: More native GitHub experience, better project management integration.  ","version":"Next","tagName":"h3"},{"title":"Additional Contribution Opportunities​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#additional-contribution-opportunities","content":" ","version":"Next","tagName":"h2"},{"title":"Documentation Improvements​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#documentation-improvements","content":" Add more comprehensive examplesCreate video tutorialsImprove error messages and help text  ","version":"Next","tagName":"h3"},{"title":"Testing Enhancement​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#testing-enhancement","content":" Increase test coverageAdd integration tests with real GitHub APIPerformance testing for large projects  ","version":"Next","tagName":"h3"},{"title":"Feature Extensions​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#feature-extensions","content":" Support for more project management tools (Jira, Azure DevOps)Custom chart types and metricsAdvanced dependency analysis  ","version":"Next","tagName":"h3"},{"title":"Developer Experience​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#developer-experience","content":" Better error handling and debuggingImproved CLI output and progress indicatorsHot reload for development  ","version":"Next","tagName":"h3"},{"title":"Contribution Guidelines​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#contribution-guidelines","content":" ","version":"Next","tagName":"h2"},{"title":"Code Style​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#code-style","content":" Follow TypeScript best practicesUse meaningful variable and function namesAdd comprehensive JSDoc commentsInclude unit tests for new features  ","version":"Next","tagName":"h3"},{"title":"Pull Request Process​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#pull-request-process","content":" Create feature branch from mainImplement feature with testsUpdate documentationSubmit PR with clear descriptionAddress review feedback  ","version":"Next","tagName":"h3"},{"title":"Testing Requirements​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#testing-requirements","content":" Unit tests for new functionalityIntegration tests for GitHub featuresManual testing with example .made filesPerformance impact assessment  ","version":"Next","tagName":"h3"},{"title":"Getting Help​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#getting-help","content":" Open an issue for questions or bug reports Check existing issues before creating new ones Join community discussions Review architecture documentation first Where to start: look for issues labeled good-first-issue or help wanted, or try one of the items in the &quot;Priority Feature Requests&quot; section above.  ","version":"Next","tagName":"h2"},{"title":"Recognition​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/made/how_to_contribute/how_to_contribute#recognition","content":" Contributors will be:  Listed in project contributorsCredited in release notesInvited to maintainer discussions for significant contributions  These improvements would make MADE a more robust, user-friendly, and professionally viable project management tool. Each represents a meaningful opportunity to contribute to an active open-source project. ","version":"Next","tagName":"h2"},{"title":"Grammar Tokens","type":0,"sectionRef":"#","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens","content":"","keywords":"","version":"Next"},{"title":"🎯 What You'll Learn​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-what-youll-learn","content":" By the end of this page, you'll know:  Every token and syntax rule in the MADE DSLHow to write syntactically correct .made filesHow to extend the grammar for custom needsCommon patterns and best practices  ","version":"Next","tagName":"h2"},{"title":"🚀 Why Grammar Matters​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-why-grammar-matters","content":" Think of grammar as the rules of a language 📖:  Tokens are like words in a dictionaryGrammar rules are like sentence structureValidation catches mistakes before they cause problemsExtensions let you add new &quot;words&quot; to the language  Understanding grammar helps you:  ✅ Write valid .made files without syntax errors✅ Understand error messages when something goes wrong✅ Extend MADE with custom components✅ Debug complex projects more effectively    ","version":"Next","tagName":"h2"},{"title":"🔧 Technical Foundation​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-technical-foundation","content":" The MADE DSL uses Langium grammar to define its syntax. Langium is a powerful framework that turns grammar definitions into parsers, language servers, and VS Code extensions automatically!  ","version":"Next","tagName":"h2"},{"title":"📊 Grammar Structure Overview​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-grammar-structure-overview","content":" Here's how MADE's grammar is organized:  ","version":"Next","tagName":"h2"},{"title":"Main Grammar Entry Point​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#main-grammar-entry-point","content":" grammar Made import 'helpers' # 🛠️ Utility functions and common patterns import 'terminals' # 📝 Basic building blocks (strings, dates, numbers) import 'projects' # 🏢 Project definitions import 'backlog' # 📋 Work breakdown structures import 'processes' # ⚙️ Workflow definitions import 'timebox' # 📅 Sprint and iteration management import 'team' # 👥 People and roles import 'roadmap' # 🗺️ Long-term planning entry Model: (project=Project) # Every .made file needs a project (components+=(Team|Process|Backlog|TimeBox|Roadmap))* # Plus any number of these components   💡 Think of it as: A .made file is like a project folder that must contain one project description and can contain any number of supporting documents (teams, backlogs, processes, etc.).    ","version":"Next","tagName":"h3"},{"title":"🧱 Core Tokens - Your Building Blocks​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-core-tokens---your-building-blocks","content":" ","version":"Next","tagName":"h2"},{"title":"1. Project Definition 🏢​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#1-project-definition-","content":" What it does: Defines the overall project information  Project: 'project' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('startDate:' startDate=DATE)? ('dueDate:' dueDate=DATE)? ('completedDate:' completedDate=DATE)? '}';   📝 Copy-Paste Example:  project MyAwesomeProject { name: &quot;E-commerce Platform&quot; description: &quot;Building a modern online shopping experience&quot; startDate: 2024-01-15 dueDate: 2024-12-31 }   💡 Grammar Notes: id=ID means you give your project a unique identifier? means optional - you don't have to include all fieldsDates must be in YYYY-MM-DD format    ","version":"Next","tagName":"h3"},{"title":"2. Team Structure 👥​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#2-team-structure-","content":" What it does: Defines who's working on the project  Team: 'team' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? (teammember+=TeamMember)* '}'; TeamMember: 'teammember' id=ID '{' 'name:' name=STRING 'email:' email=STRING ('discord:' discord=STRING)? '}';   📝 Copy-Paste Example:  team DevelopmentTeam { name: &quot;Core Development Team&quot; description: &quot;Full-stack developers and designers&quot; teammember alice { name: &quot;Alice Johnson&quot; email: &quot;alice@company.com&quot; discord: &quot;alice#1234&quot; } teammember bob { name: &quot;Bob Smith&quot; email: &quot;bob@company.com&quot; } }   🎯 Pro Tip: Team member IDs (like alice, bob) can be referenced later when assigning work!    ","version":"Next","tagName":"h3"},{"title":"3. Process Definition ⚙️​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#3-process-definition-️","content":" What it does: Defines your team's workflow and activities  Process: 'process' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? (activities+=Activity)* '}'; Activity: 'activity' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('DefinitionDone:' definitionDone=STRING)? ('DefinitionReady:' definitionReady=STRING)? ('Learning:' learning=STRING)? ('Label:' label=ID)? (tasks+=TaskProcess)* '}';   📝 Copy-Paste Example:  process ScrumProcess { name: &quot;Agile Scrum Process&quot; description: &quot;Our team's agile development workflow&quot; activity Development { name: &quot;Development Phase&quot; description: &quot;Writing and testing code&quot; DefinitionDone: &quot;Code reviewed, tested, and merged&quot; DefinitionReady: &quot;Requirements clear, design approved&quot; Learning: &quot;Learn new frameworks as needed&quot; Label: development } }   💡 Why define processes? They create consistency and help new team members understand how work gets done.    ","version":"Next","tagName":"h3"},{"title":"4. Backlog Structure 📋​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#4-backlog-structure-","content":" What it does: Breaks down work into manageable pieces  Backlog: 'backlog' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? (items+=BacklogItem)* '}'; Epic: 'epic' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('process:' process=[Process:QualifiedName])? ('Criterions:' criterions=StringList)? ('observation:' observation=STRING)? (userstories+=UserStory)* '}'; UserStory: 'story' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('activity:' activity=[Activity:QualifiedName])? ('depends:' depends=ReferenceList)? ('Requirements:' requirements=StringList)? ('Criterions:' criterions=StringList)? ('observation:' observation=STRING)? (tasks+=Task)* '}'; Task: 'task' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('task:' taskRef=[TaskProcess:QualifiedName])? ('depends:' depends=ReferenceList)? ('Deliverables:' deliverables=StringList)? '}';   📝 Copy-Paste Example:  backlog ProductBacklog { name: &quot;E-commerce Product Backlog&quot; description: &quot;All features for our online store&quot; epic UserManagement { name: &quot;User Account Management&quot; description: &quot;Allow users to create and manage accounts&quot; Criterions: &quot;Secure login&quot;, &quot;Password recovery&quot;, &quot;Profile editing&quot; story UserRegistration { name: &quot;User Registration&quot; description: &quot;New users can create accounts&quot; Requirements: &quot;Email validation&quot;, &quot;Strong passwords&quot; task CreateRegistrationForm { name: &quot;Create Registration Form&quot; description: &quot;Build HTML form with validation&quot; Deliverables: &quot;HTML form&quot;, &quot;CSS styling&quot;, &quot;JavaScript validation&quot; } task SetupDatabase { name: &quot;Setup User Database&quot; description: &quot;Create user table and APIs&quot; Deliverables: &quot;Database schema&quot;, &quot;API endpoints&quot; } } } }   🎯 Hierarchy Explained: Epic → User Stories → Tasks. Like: Project → Features → Requirements → Implementation steps.    ","version":"Next","tagName":"h3"},{"title":"5. TimeBox (Sprint) Definition 📅​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#5-timebox-sprint-definition-","content":" What it does: Organizes work into time-bounded iterations  TimeBox: 'sprint' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('startDate:' startDate=DATE)? ('endDate:' endDate=DATE)? ('status:' status=SprintStatus)? ('comment:' comment=STRING)? ('completeDate:' completeDate=DATE)? (sprintbacklog+=SprintBacklog)* '}'; SprintBacklog: 'sprintbacklog' id=ID '{' (items+=SprintItem)* '}'; SprintItem: 'item' reference=[BacklogItem:QualifiedName] '{' ('assignee:' assignee=[TeamMember:QualifiedName])? ('dueDate:' dueDate=DATE)? ('startDate:' startDate=DATE)? ('completedDate:' completedDate=DATE)? ('status:' status=ItemStatus)? ('complexity:' complexity=Complexity)? '}';   📝 Copy-Paste Example:  sprint Sprint1 { name: &quot;Sprint 1 - User Foundation&quot; description: &quot;Basic user management features&quot; startDate: 2024-01-15 endDate: 2024-01-29 status: IN_PROGRESS sprintbacklog Sprint1Backlog { item ProductBacklog.UserManagement.UserRegistration { assignee: DevelopmentTeam.alice startDate: 2024-01-15 dueDate: 2024-01-25 status: DOING complexity: MEDIUM } } }   🔗 Reference Magic: Notice ProductBacklog.UserManagement.UserRegistration - this refers to the user story we defined earlier!    ","version":"Next","tagName":"h3"},{"title":"6. Roadmap Structure 🗺️​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#6-roadmap-structure-️","content":" What it does: Plans long-term milestones and releases  Roadmap: 'roadmap' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? (milestones+=Milestone)* '}'; Milestone: 'milestone' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('startDate:' startDate=DATE)? ('dueDate:' dueDate=DATE)? ('completedDate:' completedDate=DATE)? ('status:' status=MilestoneStatus)? ('depends:' depends=[Milestone:QualifiedName])? (releases+=Release)* '}'; Release: 'release' id=ID '{' ('name:' name=STRING)? ('description:' description=STRING)? ('version:' version=STRING)? ('dueDate:' dueDate=DATE)? ('releasedDate:' releasedDate=DATE)? ('status:' status=ReleaseStatus)? (('item:' item=[BacklogItem:QualifiedName]) | ('itens:' items=ReferenceList))? '}';   📝 Copy-Paste Example:  roadmap ProductRoadmap { name: &quot;E-commerce Platform Roadmap&quot; description: &quot;Major milestones for our platform launch&quot; milestone MVP { name: &quot;Minimum Viable Product&quot; description: &quot;Basic store functionality&quot; startDate: 2024-01-15 dueDate: 2024-06-30 status: IN_PROGRESS release V1_0 { name: &quot;Version 1.0&quot; description: &quot;First public release&quot; version: &quot;1.0.0&quot; dueDate: 2024-06-30 status: IN_DEVELOPMENT itens: ProductBacklog.UserManagement, ProductBacklog.ProductCatalog } } }   🎯 Strategic Planning: Roadmaps help you think beyond sprints to major product milestones and releases.    ","version":"Next","tagName":"h3"},{"title":"🔤 Terminal Definitions - The Basic Building Blocks​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-terminal-definitions---the-basic-building-blocks","content":" These are the fundamental data types MADE understands:  ","version":"Next","tagName":"h2"},{"title":"Basic Types​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#basic-types","content":" terminal ID: /[_a-zA-Z][\\w_]*/; # Identifiers (like variable names) terminal STRING: /&quot;[^&quot;]*&quot;/; # Text in quotes terminal DATE: /\\d{4}-\\d{2}-\\d{2}/; # Dates in YYYY-MM-DD format terminal INT returns number: /[0-9]+/; # Whole numbers   📝 Examples:  # ID examples (identifiers) project MyProject # ✅ Valid team development_team # ✅ Valid epic user-management # ❌ Invalid (no hyphens) # STRING examples name: &quot;My Awesome Project&quot; # ✅ Valid description: &quot;Building cool stuff&quot; # ✅ Valid name: My Project # ❌ Invalid (needs quotes) # DATE examples startDate: 2024-01-15 # ✅ Valid dueDate: 2024-12-31 # ✅ Valid startDate: &quot;2024-01-15&quot; # ❌ Invalid (no quotes for dates) startDate: 01/15/2024 # ❌ Invalid (wrong format)   ","version":"Next","tagName":"h3"},{"title":"Enumerations - Predefined Values​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#enumerations---predefined-values","content":" enum SprintStatus: PLANNED | IN_PROGRESS | CLOSED; enum ItemStatus: TODO | DOING | DONE; enum Complexity: LOW | MEDIUM | HIGH; enum MilestoneStatus: PLANNED | IN_PROGRESS | COMPLETED | CANCELLED; enum ReleaseStatus: PLANNED | IN_DEVELOPMENT | RELEASED | CANCELLED;   📝 Usage Examples:  sprint Sprint1 { status: IN_PROGRESS # ✅ Valid # status: Active # ❌ Invalid (not in enum) } item MyTask { status: DOING # ✅ Valid complexity: HIGH # ✅ Valid # complexity: EXTREME # ❌ Invalid (not in enum) }   💡 Why enums? They prevent typos! MADE will catch if you write INPROGRESS instead of IN_PROGRESS.  ","version":"Next","tagName":"h3"},{"title":"Helper Types - Advanced Patterns​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#helper-types---advanced-patterns","content":" StringList: values+=STRING (',' values+=STRING)*; ReferenceList: references+=[BacklogItem:QualifiedName] (',' references+=[BacklogItem:QualifiedName])*; QualifiedName: ID ('.' ID)*;   📝 Examples:  # StringList - Multiple text values Requirements: &quot;User authentication&quot;, &quot;Data validation&quot;, &quot;Error handling&quot; Criterions: &quot;Fast response&quot;, &quot;Secure&quot;, &quot;User-friendly&quot; # ReferenceList - Multiple references to other items depends: Epic1.Story1, Epic2.Story3, Epic1.Story2 # QualifiedName - Hierarchical references assignee: DevelopmentTeam.alice # Team.Member process: ScrumProcess.Development # Process.Activity item: ProductBacklog.UserAuth.Login # Backlog.Epic.Story     ","version":"Next","tagName":"h3"},{"title":"🔗 Advanced Grammar Features​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-advanced-grammar-features","content":" ","version":"Next","tagName":"h2"},{"title":"Cross-References - Linking Things Together​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#cross-references---linking-things-together","content":" What they do: Let you connect different parts of your project  // Reference to team member 'assignee:' assignee=[TeamMember:QualifiedName] // Reference to process activity 'activity:' activity=[Activity:QualifiedName] // Reference to other backlog items for dependencies 'depends:' depends=ReferenceList   📝 Real-World Examples:  # Assign work to specific team members item UserLogin { assignee: DevelopmentTeam.alice # Links to team member } # Connect stories to processes story PaymentProcess { activity: EcommerceProcess.Payment # Links to process activity } # Define dependencies between work items story CheckoutFlow { depends: UserLogin, PaymentSetup # Must complete these first }   🎯 Why references matter: They create a connected web of project information that MADE can analyze for dependencies, workload, and progress tracking.  ","version":"Next","tagName":"h3"},{"title":"Optional Properties - Flexibility Built In​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#optional-properties---flexibility-built-in","content":" What they do: Let you include information when relevant  // Optional description field ('description:' description=STRING)? // Optional date fields ('startDate:' startDate=DATE)? ('dueDate:' dueDate=DATE)?   📝 Usage Patterns:  # Minimal project definition project QuickTest { name: &quot;Quick Test Project&quot; # No description, dates, etc. - that's fine! } # Detailed project definition project ComplexProject { name: &quot;Enterprise Platform&quot; description: &quot;Multi-year platform development&quot; startDate: 2024-01-01 dueDate: 2025-12-31 # All optional fields included }   💡 Start simple, add detail later: You can begin with minimal information and add details as your project evolves.  ","version":"Next","tagName":"h3"},{"title":"Collections - Multiple Items​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#collections---multiple-items","content":" What they do: Let you group related items together  // Multiple team members (teammember+=TeamMember)* // Multiple tasks in user story (tasks+=Task)* // Multiple items in sprint backlog (items+=SprintItem)*   📝 Collection Examples:  team BigTeam { name: &quot;Large Development Team&quot; # Multiple team members teammember alice { name: &quot;Alice&quot; email: &quot;alice@company.com&quot; } teammember bob { name: &quot;Bob&quot; email: &quot;bob@company.com&quot; } teammember charlie { name: &quot;Charlie&quot; email: &quot;charlie@company.com&quot; } } story ComplexStory { name: &quot;Complex Feature&quot; # Multiple tasks task DesignUI { name: &quot;Design User Interface&quot; } task ImplementBackend { name: &quot;Implement Backend Logic&quot; } task WriteTests { name: &quot;Write Test Cases&quot; } task Documentation { name: &quot;Update Documentation&quot; } }     ","version":"Next","tagName":"h3"},{"title":"🛡️ Validation Rules - Keeping Your Data Clean​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#️-validation-rules---keeping-your-data-clean","content":" MADE automatically validates your .made files to catch common mistakes:  ","version":"Next","tagName":"h2"},{"title":"Date Format Validation​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#date-format-validation","content":" What it catches: Incorrectly formatted dates  export function validateDates(node: any, accept: any) { const typeMeta = reflection.getTypeMetaData(node.$type); for (const prop of typeMeta.properties) { if (prop.name.match(/date$/i) &amp;&amp; typeof node[prop.name] === 'string') { const value = node[prop.name]; if (value &amp;&amp; !/^\\d{4}-\\d{2}-\\d{2}$/.test(value)) { accept('error', `Property &quot;${prop.name}&quot; must be in ISO 8601 format (YYYY-MM-DD)`, { node, property: prop.name }); } } } }   Examples of validation errors:  project MyProject { startDate: 2024/01/15 # ❌ Error: Use 2024-01-15 dueDate: &quot;Jan 15, 2024&quot; # ❌ Error: Use 2024-01-15 startDate: 2024-01-15 # ✅ Correct format }   ","version":"Next","tagName":"h3"},{"title":"Reference Validation​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#reference-validation","content":" What it catches: References to things that don't exist  ✅ Cross-references validated at parse time: If you reference DevelopmentTeam.alice, alice must exist in DevelopmentTeam✅ Scoped resolution: References are checked within their proper context✅ Dependency cycles detected: Prevents Task A depending on Task B while Task B depends on Task A  Examples:  team DevTeam { teammember alice { name: &quot;Alice&quot; email: &quot;alice@company.com&quot; } } sprint Sprint1 { sprintbacklog SB1 { item SomeStory { assignee: DevTeam.alice # ✅ Valid - alice exists # assignee: DevTeam.bob # ❌ Error - bob doesn't exist } } }   🚨 Validation Benefits: Catch mistakes early instead of finding out later when things don't work as expected!    ","version":"Next","tagName":"h3"},{"title":"🚀 Grammar Extension Points - Adding Your Own Features​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-grammar-extension-points---adding-your-own-features","content":" Want to extend MADE with custom components? Here's how:  ","version":"Next","tagName":"h2"},{"title":"Adding New Component Types​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#adding-new-component-types","content":" When to use: You need a new type of project component  // 1. Add to main grammar entry Model: (project=Project) (components+=(Team|Process|Backlog|TimeBox|Roadmap|CustomComponent))*; // 2. Define your new component CustomComponent: 'custom' id=ID '{' 'property:' property=STRING ('optionalField:' optionalField=STRING)? (items+=CustomItem)* '}'; // 3. Define sub-components if needed CustomItem: 'item' id=ID '{' 'value:' value=STRING '}';   📝 Real Example - Budget Component:  // Add budget tracking to MADE Budget: 'budget' id=ID '{' 'name:' name=STRING 'totalAmount:' totalAmount=INT ('currency:' currency=STRING)? (expenses+=Expense)* '}'; Expense: 'expense' id=ID '{' 'description:' description=STRING 'amount:' amount=INT ('category:' category=BudgetCategory)? ('assignee:' assignee=[TeamMember:QualifiedName])? '}'; enum BudgetCategory: DEVELOPMENT | MARKETING | INFRASTRUCTURE | MISC;   Usage in .made files:  budget ProjectBudget { name: &quot;Development Budget 2024&quot; totalAmount: 100000 currency: &quot;USD&quot; expense CloudServices { description: &quot;AWS hosting costs&quot; amount: 5000 category: INFRASTRUCTURE } expense DeveloperSalaries { description: &quot;Team salaries&quot; amount: 80000 category: DEVELOPMENT assignee: DevelopmentTeam.alice } }   ","version":"Next","tagName":"h3"},{"title":"Adding New Properties to Existing Components​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#adding-new-properties-to-existing-components","content":" When to use: You want to add fields to existing components  // Extend existing Task component Task: 'task' id=ID '{' 'name:' name=STRING ('description:' description=STRING)? ('priority:' priority=Priority)? # 🆕 New property ('estimatedHours:' hours=INT)? # 🆕 New property ('tags:' tags=StringList)? # 🆕 New property // ... existing properties '}'; // Add new enum for priority enum Priority: LOW | MEDIUM | HIGH | CRITICAL;   Updated usage:  task CriticalBugFix { name: &quot;Fix payment processing bug&quot; description: &quot;Critical issue affecting checkout&quot; priority: CRITICAL # 🆕 New field estimatedHours: 8 # 🆕 New field tags: &quot;bugfix&quot;, &quot;critical&quot; # 🆕 New field }   ","version":"Next","tagName":"h3"},{"title":"Best Practices for Extensions 🎯​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#best-practices-for-extensions-","content":" Do ✅\tDon't ❌\tWhyAdd optional fields first\tBreak existing syntax\tMaintains backward compatibility Use meaningful enum values\tUse generic names like &quot;TYPE1&quot;\tMakes intent clear Follow existing naming patterns\tInvent new conventions\tConsistency helps users Add validation rules\tSkip validation\tPrevents bad data Document new components\tAssume users will figure it out\tGood UX requires docs    ","version":"Next","tagName":"h3"},{"title":"🎓 Summary - Your Grammar Toolkit​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#-summary---your-grammar-toolkit","content":" ","version":"Next","tagName":"h2"},{"title":"Quick Reference Card 📋​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#quick-reference-card-","content":" Element\tSyntax\tExampleProject\tproject ID { ... }\tproject MyApp { name: &quot;My App&quot; } Team\tteam ID { ... }\tteam Devs { teammember alice { ... } } Sprint\tsprint ID { ... }\tsprint Sprint1 { name: &quot;First Sprint&quot; } Epic\tepic ID { ... }\tepic UserAuth { name: &quot;User Authentication&quot; } References\t[Type:QualifiedName]\tassignee: DevTeam.alice Lists\t&quot;item1&quot;, &quot;item2&quot;\ttags: &quot;urgent&quot;, &quot;frontend&quot; Dates\tYYYY-MM-DD\tstartDate: 2024-01-15  ","version":"Next","tagName":"h3"},{"title":"Common Patterns 🔄​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#common-patterns-","content":" Start with project: Every .made file needs exactly one projectDefine teams early: You'll reference team members in sprints and assignmentsBuild hierarchy: Epic → Stories → Tasks follows natural work breakdownUse references liberally: Connect related items for rich analysisAdd details gradually: Start minimal, add optional fields as needed  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting Tips 🔧​","type":1,"pageTitle":"Grammar Tokens","url":"/leds-tools-public/made/advanced_concepts/made_grammar_tokens#troubleshooting-tips-","content":" Error Type\tCommon Cause\tFixSyntax Error\tMissing quotes, brackets, or colons\tCheck for &quot;quotes&quot; around strings, {} around blocks Reference Error\tReferencing something that doesn't exist\tEnsure referenced items are defined first Date Format Error\tWrong date format\tUse YYYY-MM-DD format (e.g., 2024-01-15) Enum Error\tInvalid status/complexity value\tCheck valid enum values (e.g., TODO, DOING, DONE)  This grammar structure provides a solid foundation for the MADE DSL while maintaining flexibility for extensions and customizations. With these patterns, you can create rich, connected project descriptions that MADE can transform into powerful documentation and integrations! 🏗️ ","version":"Next","tagName":"h3"},{"title":"Tool Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture","content":"","keywords":"","version":"Next"},{"title":"🎯 Quick Overview​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-quick-overview","content":" MADE Tool processes .made files through this pipeline:  .made file → Language Server → ApplicationManager → Sprint Ceremonies → JSON Output → made-lib-beta Integration   Key Components:  Language Server: Parses and validates .made files using LangiumApplicationManager: Orchestrates processing through &quot;Sprint Ceremonies&quot; (Singleton pattern)Applications: Handle specific domains (Team, Process, Backlog, etc.)Builders: Construct objects using Builder patternmade-lib-beta: Generates final outputs (docs, GitHub integration)    ","version":"Next","tagName":"h2"},{"title":"🧱 Core Components​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-core-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Language Layer (src/language/) 📝​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#1-language-layer-srclanguage-","content":" made.langium - Grammar definition for the MADE DSL  Project: 'project' name=ID '{' components+=Component* '}'; Team: 'team' name=ID '{' teammember+=TeamMember* '}';   main.ts - Language server entry pointmade-validator.ts - Semantic validation rules  checks: { Project: validateProject, Team: validateTeamSize }   generated/ - Auto-generated AST types (don't edit these!)  ","version":"Next","tagName":"h3"},{"title":"2. Application Layer (src/cli/project_management/) 🏭​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#2-application-layer-srccliproject_management-","content":" ApplicationManager (Singleton) orchestrates processing through 6 &quot;Sprint Ceremonies&quot;:  MADE Backlog - Creates issues from epics/stories/tasksMADE Team - Processes team member assignmentsMADE Projects - Generates project structureMADE Processes - Creates reusable process templatesMADE Roadmap - Builds release planningMADE Documentation - Generates reports  Key Patterns:  AbstractApplication - Base class for all applications  abstract class AbstractApplication { protected db: LowSync&lt;any&gt;; abstract initialize(): Promise&lt;void&gt;; }   Builder Pattern - IssueBuilder, ProcessBuilder, etc.  const issue = new IssueBuilder() .setTitle(&quot;User Login&quot;) .setAssignee(teamMember) .build();   LowDB - JSON persistence for data storage  this.db.data = { issues: [], teams: [] }; this.db.write();   Service Layer - Utilities for file ops and HTTP calls  createFile(path, content); send(url, data, headers);   ","version":"Next","tagName":"h3"},{"title":"3. User Interfaces 🎨​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#3-user-interfaces-","content":" VS Code Extension (src/extension/main.ts)  Commands: made.generateDocumentation, made.generateGithubIssues  vscode.commands.registerCommand(&quot;made.generateDocumentation&quot;, () =&gt; { generateAction(filepath, { only_project_documentation: true }); });   Language server integration for syntax highlightingEnvironment variable support for GitHub integration  GITHUB_TOKEN=ghp_xxxx GITHUB_ORG=myorg GITHUB_REPO=myproject   CLI (src/cli/main.ts)  npx made-cli generate project.made -d ./output # Generate docs npx made-cli github project.made -t token -o org -r repo # Push to GitHub     ","version":"Next","tagName":"h3"},{"title":"🔄 Processing Flow​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-processing-flow","content":" .made file → Validation → AST Generation → ApplicationManager → Sprint Ceremonies → JSON Files → made-lib-beta → Outputs   Parse &amp; Validate: Langium parses .made file and validates syntax  const document = await langiumServices.shared.workspace.LangiumDocuments.getOrCreateDocument(uri); const parseResult = document.parseResult;   Extract Components: Sort AST nodes by type (Team, Backlog, etc.)  const teams = model.components.filter(c =&gt; c.$type === 'Team'); const backlogs = model.components.filter(c =&gt; c.$type === 'Backlog');   Run Ceremonies: ApplicationManager executes 6 initialization steps  for (const ceremony of this.ceremonies) { await ceremony.execute(); }   Build Objects: Use Builder pattern to create structured dataPersist Data: Save to JSON files using LowDBGenerate Outputs: made-lib-beta creates docs and GitHub integration    ","version":"Next","tagName":"h2"},{"title":"🔗 made-lib-beta Integration​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-made-lib-beta-integration","content":" MADE Tool handles parsing and data extraction. made-lib-beta handles business logic and outputs:  // After processing, integrate with library const reportManager = new ReportManager(); await reportManager.createReport(dbPath); // Generate docs await reportManager.githubPush(/* parameters */); // GitHub sync   Data Flow: MADE Tool (AST Processing) → JSON Files → made-lib-beta (Business Logic) → Outputs    ","version":"Next","tagName":"h2"},{"title":"🔧 Key Processing Functions​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-key-processing-functions","content":" These functions handle the core transformations:  // AST to Issue conversion function astEpicToIssue(epic: Epic, sprintId: string): Issue { return { id: epic.id, title: epic.name, sprint: sprintId }; } // Backlog processing function processBacklogs(backlogs: Backlog[]): Issue[] { return backlogs.flatMap(b =&gt; b.epics.map(e =&gt; astEpicToIssue(e, b.sprint))); } // Team assignment function buildAssigneeMap(team: Person[]): Map&lt;string, Person&gt; { return new Map(team.map(p =&gt; [p.role, p])); }   Pattern: AST Node → Processing Function → Structured Data → JSON Storage    ","version":"Next","tagName":"h2"},{"title":"🎨 VS Code Extension​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-vs-code-extension","content":" Two main commands: made.generateDocumentation and made.generateGithubIssues  // Extension activation export function activate(context: vscode.ExtensionContext): void { registerGeneratorCommand(context); // Documentation generator registerGitHubCommand(context); // GitHub integration client = startLanguageClient(context); // Language features }   Features: Syntax highlighting, auto-completion, validation, and commands through language server.  // Language server provides these features automatically: // - Syntax highlighting for .made files // - Error detection (red squiggles) // - Auto-completion as you type // - Hover information for elements     ","version":"Next","tagName":"h2"},{"title":"🔌 Extension Points​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-extension-points","content":" ","version":"Next","tagName":"h2"},{"title":"1. Langium Grammar Extensions​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#1-langium-grammar-extensions","content":" Extend the DSL syntax by modifying src/language/made.langium:  // Add new grammar rules CustomBlock: 'custom' name=ID '{' properties+=CustomProperty* '}'; CustomProperty: key=ID ':' value=STRING; // Extend existing rules Project: 'project' name=ID '{' // ... existing properties customBlocks+=CustomBlock* // ← Add your extension '}';   After grammar changes:  Run npm run langium:generate to regenerate AST typesUpdate validation rules in made-validator.tsAdd processing logic in ApplicationManager ceremonies  ","version":"Next","tagName":"h3"},{"title":"2. Processing Extensions​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#2-processing-extensions","content":" InitializationStep pattern for custom processing:  // Add custom initialization steps class CustomDataStep extends InitializationStep { execute(): void { // Your custom processing logic } }   Real extension points:  Langium Grammar: Add new DSL syntax and rules  // Add new component type CustomResource: 'resource' name=ID '{' properties+=Property* '}';   Sprint Ceremonies: Add new initialization steps  class ResourceProcessingStep extends InitializationStep { execute(): void { /* process custom resources */ } }   Builder Classes: Extend existing builders  class EnhancedIssueBuilder extends IssueBuilder { setPriority(p: string) { this.issue.priority = p; return this; } }   Service Functions: Add utility functions  export function validateEmail(email: string): boolean { return /\\S+@\\S+\\.\\S+/.test(email); }   Application Types: Create new applications  class ResourceApplication extends AbstractApplication { async initialize() { /* handle resources */ } }   Validation Rules: Add semantic validation in made-validator.ts  const validateTeamSize: ValidationCheck&lt;Team&gt; = (team, accept) =&gt; { if (team.teammember.length &gt; 10) { accept('warning', 'Large team size', { node: team }); } };     ","version":"Next","tagName":"h3"},{"title":"📚 Summary​","type":1,"pageTitle":"Tool Architecture","url":"/leds-tools-public/made/advanced_concepts/made_tool_architecture#-summary","content":" MADE Tool Architecture follows a clear pipeline:  Language Server - Parses .made files using LangiumApplicationManager - Orchestrates 6 &quot;Sprint Ceremonies&quot;Processing Functions - Transform AST to structured dataJSON Storage - Persist data using LowDBmade-lib-beta - Generate final outputs  Key Patterns: Singleton, Builder, Service Layer Extension Points: InitializationStep, Builders, Services  The architecture separates parsing (MADE Tool) from business logic (made-lib-beta), making it maintainable and extensible. ","version":"Next","tagName":"h2"},{"title":"Contribution Prerequisites","type":0,"sectionRef":"#","url":"/leds-tools-public/oraculo/basic_concepts/development_prerequisites","content":"","keywords":"","version":"Next"},{"title":"Contribution Prerequisites​","type":1,"pageTitle":"Contribution Prerequisites","url":"/leds-tools-public/oraculo/basic_concepts/development_prerequisites#contribution-prerequisites","content":" Knowledge you should have to contribute:  Docker: Overall, everything is ran by containers. Executed by the docker-compose.yml file. Dockerfile: How the image of the service is created.Containers: How they work and how the service is containerized.Docker network: How the services, each container, can talk to each other.Docker compose: How it configures all the containers. Python Fast API: How the Server/Client architecture works, internet requests and responses. Server/Client architecture, requests and responses.MVC architecture Vanna DB: How its configured How it receives the text input.How the sql is returned. OpenWeb UI: Function that sends text to the API endpoint Design Patterns Singleton: Enables only one instance of a class. ","version":"Next","tagName":"h2"},{"title":"Basic Concepts","type":0,"sectionRef":"#","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use","content":"","keywords":"","version":"Next"},{"title":"Installation Prerequisites​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#installation-prerequisites","content":" Project Files: Can be downloaded by zipfile or cloning the repository via git. Docker: All the containers are created with the needed technologies in the right environment via docker containers.  ","version":"Next","tagName":"h3"},{"title":"How to Install​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#how-to-install","content":" Follow these steps to run the project locally:  Clone the project to your local machine. Generate a personal Github token and insert it on GITHUB_TOKEN in the example.env file. Can be generated here: https://github.com/settings/tokens Generate a personal Gemini token and insert it on GEMINI_API_KEY in the example.envfile. Can be generated https://aistudio.google.com/app/apikey Rename the example.env file to .env In the main.py file: Update the variable repos to your repositories, following the pattern. The repositories must be acessible through your given token. While in the root of project, run the following commands to initiate the services. ps.: This, creating containers and setting up the environment inside the container, could take while To start the project: docker compose up -d To stop the project later, you can run: docker compose down   ","version":"Next","tagName":"h2"},{"title":"How to use​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#how-to-use","content":" After the Open Web UI container finishes setting up:  Go to Open web UI initial page: http://localhost:3000/Create your local account. Dont worry, your email wont be verifiedAfter logged in, go to http://localhost:3000/admin/functionsIn the Functions page, click on import functionsSelect the file pipeline_api.json in the src/assets/open_web_ui/ folderActivate the function through a slider on the top-right cornerReturn to the initial page with http://localhost:3000  AWS Configuration  If you want to deploy the project follow these steps below and the you can follow the how to use inside de server.  ","version":"Next","tagName":"h2"},{"title":"How to connect to AWS​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#how-to-connect-to-aws","content":" You can watch our video tutorial clicking here  ","version":"Next","tagName":"h2"},{"title":"Some commands that will be used to configure the AWS machine​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#some-commands-that-will-be-used-to-configure-the-aws-machine","content":" ","version":"Next","tagName":"h2"},{"title":"Generating SSH Key​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#generating-ssh-key","content":" ssh-keygen   cat ~/.ssh/id_rsa.pub   ","version":"Next","tagName":"h3"},{"title":"Setting up Docker​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/oraculo/basic_concepts/how_to_use#setting-up-docker","content":" sudo apt-get update   sudo apt-get install ca-certificates curl gnupg   sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg   echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release &amp;&amp; echo $VERSION_CODENAME) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null   sudo apt-get update   sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin   sudo groupadd docker   sudo usermod -aG docker $USER   newgrp docker  ","version":"Next","tagName":"h3"},{"title":"Oráculo: Team Wisdom in Real Time","type":0,"sectionRef":"#","url":"/leds-tools-public/oraculo/basic_concepts/overview","content":"","keywords":"","version":"Next"},{"title":"What is Oráculo?​","type":1,"pageTitle":"Oráculo: Team Wisdom in Real Time","url":"/leds-tools-public/oraculo/basic_concepts/overview#what-is-oráculo","content":" Oráculo is a system that accesses key team information via Git integration data to offer a real-time view of what's happening in the project. It was created to address the challenges of dispersed project data and manual analysis by using AI to transform raw GitHub data into natural language answers.    ","version":"Next","tagName":"h2"},{"title":"Mini-World: Project Scope and Context​","type":1,"pageTitle":"Oráculo: Team Wisdom in Real Time","url":"/leds-tools-public/oraculo/basic_concepts/overview#mini-world-project-scope-and-context","content":" In software development teams, project information is often spread across GitHub repositories, where tasks, issues, and pull requests are managed. Analyzing this data manually is time-consuming and makes it difficult to obtain a clear and real-time view of the project’s progress.  This causes problems such as:  Difficulty in identifying pending tasks and bottlenecks.Lack of agility in tracking team performance.Limited visibility for managers and advisors to support decision-making.  Oráculo aims to solve these challenges by providing a centralized AI-driven system for querying and analyzing project data.    ","version":"Next","tagName":"h2"},{"title":"Target System​","type":1,"pageTitle":"Oráculo: Team Wisdom in Real Time","url":"/leds-tools-public/oraculo/basic_concepts/overview#target-system","content":" Tool: Oráculo (Chatbot System).Main functions to be validated: Extract and organize data from GitHub repositories.Allow queries in natural language about project status.Provide clear insights into sprint progress and team performance.Ensure transparency and agility in project management.    ","version":"Next","tagName":"h2"},{"title":"Objectives​","type":1,"pageTitle":"Oráculo: Team Wisdom in Real Time","url":"/leds-tools-public/oraculo/basic_concepts/overview#objectives","content":" Provide a real-time view of project progress.Support managers in decision-making.Facilitate performance tracking of teams and individuals.    ","version":"Next","tagName":"h2"},{"title":"Git Integration​","type":1,"pageTitle":"Oráculo: Team Wisdom in Real Time","url":"/leds-tools-public/oraculo/basic_concepts/overview#git-integration","content":" Connected to the team's repository, Oráculo answers key questions about development progress:  What tasks are pending for team X or product Y?Which sprint tasks are still open for product Y?  This helps to:  Identify bottlenecksGet insights on a specific feature in developmentTrack what’s still openSpeed up planning meetings  All answers are based on the latest state of repositories and team boards.    ","version":"Next","tagName":"h2"},{"title":"Rules and Restrictions​","type":1,"pageTitle":"Oráculo: Team Wisdom in Real Time","url":"/leds-tools-public/oraculo/basic_concepts/overview#rules-and-restrictions","content":" Must extract data from GitHub repositories.Queries must be answered through natural language processing (NLP).Data must be stored and structured in a PostgreSQL database.System must ensure transparency and reliability in the information provided.    ℹ Transparency, context, and agility. Oráculo exists to turn raw data into better decisions. ","version":"Next","tagName":"h2"},{"title":"Advanced Concepts","type":0,"sectionRef":"#","url":"/leds-tools-public/oraculo/advanced_concepts/architecture","content":"","keywords":"","version":"Next"},{"title":"Architecture​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/oraculo/advanced_concepts/architecture#architecture","content":" ","version":"Next","tagName":"h2"},{"title":"Roles​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/oraculo/advanced_concepts/architecture#roles","content":" Components mapped by role  Component\tRole\tDescriptionOpenWebUI\tInterface\tFrontend for user interaction, sends the question directly to web api endpoint. FastAPI\tBackend/API\tProcessing questions and response coordenation Airbyte\tETL\tImports github external data and loads it in the database Vanna.AI\tLLM / IA\tConverts questions to SQL based on natural language Gemini\tLLM / IA\tConverts questions and given SQL query into the answer Postgres/Chromadb\tBanco de Dados\tStores collected data used by Gemini    ","version":"Next","tagName":"h3"},{"title":"Components​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/oraculo/advanced_concepts/architecture#components","content":" The set of technologies that compose the app.  🐳 Docker​  Used to isolate different services, that of being:  Database (Postgres)Backend (ETL + FastAPI)Frontend (OpenWeb UI)  On running bash docker compose up -d docker starts downloading and setting up the containers. The docker compose executing sequence is as follows: Database: Postgres setting and startup ↓ Backend: ETL process from start to finish, then, starts the web app listening. ↓ Frontend: Only stars after everything necessary (both services above).    🔄 Airbyte (ETL)​  On backend startup, automatically starts the ETL process, using Airbyte.  Extract: Via PyAirbyte, it access the github api, fetches de data and caches it.  Transform: Acess the cached data and stores it in local variables for the load process.  Load: Performs a sort of upsert, checking if a unique value exists in the table, if not, then executes insert into the database.    ","version":"Next","tagName":"h3"},{"title":"🔌 Fast API (Backend)​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/oraculo/advanced_concepts/architecture#-fast-api-backend","content":" The API starts after the ETL process is concluded.  Fast API is started via uvicorn and starts listening on port: 8000.  Now the web server is ready to accept requests.  API Usage​  Locally, you can access:  Fast API: http://localhost:8000  Once the app is running, you can send POST requests to localhost:8000/ask, with a JSON with a &quot;question&quot; field in the JSON body. For example:  { &quot;question&quot;: &quot;What was user x last commit?&quot; }   The app will send the input through Vanna, Gemini, then return the answer.    🧠 Vanna.ai (LLM)​  Converts natural language questions into accurate SQL queries for your database, after recognizing your schema and was recently trained with customized questions.  In the execution flow, its accessed right after receiving input from the user and before calling the Gemini API.  The SQL generated by Vanna will be run and the query result will be sent to Gemini with the question.    🧠 Gemini (LLM)​  The Gemini model will simply receive the input together with the query results and is asked to form a response with this given context and data.  Its given output will be returned by the API, to the user interface.    🌐 OpenWebUI (Interface)​  Interface for user interaction, not complex at all.  Has to setup manually, inserting the function at startup.  The function works as a pipeline, so the service knows what to do with your input. In this case, send to the backend through the endpoint.    OpenWebUI Usage​  OpenWeb UI can be accessed:  OpenWebUI: http://localhost:3000  Click here to view the step-by-step setup. ","version":"Next","tagName":"h3"},{"title":"Library Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture","content":"","keywords":"","version":"Next"},{"title":"🎯 What You'll Learn​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-what-youll-learn","content":" By the end of this page, you'll understand:  How MADE's library turns raw data into useful outputsThe role of each service in the processing pipelineHow to add your own renderers and integrationsBest practices for extending the library  ","version":"Next","tagName":"h2"},{"title":"🚀 Why Library Architecture Matters​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-why-library-architecture-matters","content":" Think of MADE's library like a professional kitchen 👨‍🍳:  Raw Ingredients (your data) come in from the toolSpecialized Chefs (services) each handle their expertiseKitchen Equipment (generators) create the final presentationsServing Staff (integrations) deliver results to the right places  This separation means:  ✅ Reusable: Use the library in any JavaScript/TypeScript project✅ Testable: Each service can be tested independently✅ Extensible: Add new outputs without changing existing code✅ Maintainable: Clear responsibilities for each component    ","version":"Next","tagName":"h2"},{"title":"🔧 Technical Foundation​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-technical-foundation","content":" The MADE Library (leds-tools-made-lib) is the core processing engine that handles data transformation, documentation generation, and GitHub integration. It's designed to be used by the MADE Tool, but can also be used directly in your own projects!  ","version":"Next","tagName":"h2"},{"title":"📊 Architecture Overview​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-architecture-overview","content":" Here's how the library processes your data:    ","version":"Next","tagName":"h2"},{"title":"🎭 The Processing Pipeline​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-the-processing-pipeline","content":" Data Input 📥 - Your project data (from tool or direct usage)ReportManager 🎪 - The central coordinator that orchestrates everythingMarkdownService 📝 - Creates beautiful documentation filesGitHubService 🚀 - Handles GitHub API integrationsChartGenerators 📊 - Creates visual charts and diagramsOutputs ✨ - Documentation, GitHub issues, and visual charts  💡 Key Insight: Each component has a single responsibility and can be used independently or together!    ","version":"Next","tagName":"h3"},{"title":"🏗️ Core Components​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#️-core-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Data Models (model/models.ts) 📋​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#1-data-models-modelmodelsts-","content":" What it does: Defines the structure of all data flowing through the library  Think of these as blueprints that ensure everyone speaks the same language.  Primary Models - The Core Data Types​  // 🏢 Your Project Information interface Project { id: string; // Unique identifier name: string; // Project name description?: string; // What's this project about? startDate?: string; // When it begins dueDate?: string; // When it should finish } // 📋 Work Items (Epics, Stories, Tasks) interface Issue { id: string; // Unique identifier type: string; // &quot;epic&quot;, &quot;story&quot;, &quot;task&quot; subtype: string; // More specific classification title: string; // What needs to be done description?: string; // Detailed requirements labels?: string[]; // Tags for organization assignee?: TeamMember; // Who's responsible dependencies?: string[]; // What must be done first } // 📅 Time Periods (Sprints, Iterations) interface TimeBox { id: string; // Unique identifier name: string; // Sprint name (e.g., &quot;Sprint 1&quot;) description?: string; // Sprint goals startDate?: string; // When sprint starts endDate?: string; // When sprint ends status?: string; // &quot;planned&quot;, &quot;active&quot;, &quot;completed&quot; sprintItems: SprintItem[]; // What work is included }   🎯 Why TypeScript interfaces? They provide type safety - if you try to put a number where a string should go, TypeScript catches it immediately!    ","version":"Next","tagName":"h3"},{"title":"2. Report Manager (index.ts) 🎪​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#2-report-manager-indexts-","content":" What it does: The central coordinator that orchestrates all processing  Think of this as the project manager that delegates tasks to the right specialists.  Main Entry Points​  export class ReportManager { // 📄 Generate comprehensive documentation public createReport(dbPath: string): void { const markdownService = new MarkdownService(dbPath); markdownService.createManagementDocumentation(); } // 📥 Extract data FROM GitHub (GitHub → MADE) public async githubETL(token: string, org: string, project: string): Promise&lt;void&gt; { GitHubTokenManager.initialize(token); const githubService = new GitHubService(); await githubService.ETLProject(org, project); // Get project info await githubService.ETLIssue(org, project); // Get all issues await githubService.ETLBacklog(org, project); // Get backlog items await githubService.ETLTimeBox(org, project); // Get sprint info await githubService.ETLTeam(org); // Get team members } // 🚀 Push data TO GitHub (MADE → GitHub) public async githubPush(/* parameters */): Promise&lt;void&gt; { GitHubTokenManager.initialize(token); const pushService = new GitHubPushService(); await pushService.fullPush(org, repo, project, epics, stories, tasks); } }   Usage Examples​  // 📄 Generate documentation only const reportManager = new ReportManager(); reportManager.createReport('./project-data'); // 🔄 Two-way GitHub sync await reportManager.githubETL(token, 'myorg', 'myproject'); // GitHub → Local await reportManager.githubPush(token, 'myorg', 'myrepo', projectData); // Local → GitHub   💡 ETL stands for: Extract (get data), Transform (convert format), Load (save locally). It's like downloading, translating, and storing GitHub data!    ","version":"Next","tagName":"h3"},{"title":"3. Markdown Services (markdown/) 📝​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#3-markdown-services-markdown-","content":" What it does: Transforms your data into beautiful, readable documentation  Think of these as technical writers that know exactly how to present different types of information.  MarkdownService - The Documentation Orchestrator​  class MarkdownService { constructor(private dbPath: string) {} createManagementDocumentation(): void { this.generateBacklogDocumentation(); // 📋 Epic/Story/Task docs this.generateTimeBoxDocumentation(); // 📅 Sprint reports this.generateRoadmapDocumentation(); // 🗺️ Milestone planning this.generateProjectSummary(); // 📊 Overall overview } private generateBacklogDocumentation(): void { const backlogService = new MarkdownBacklogService(this.dbPath); backlogService.generate(); // Creates detailed backlog documentation } }   Specialized Documentation Services​  Service\tWhat It Creates\tPerfect ForMarkdownBacklogService\tEpic/Story/Task documentation\t📋 Understanding work breakdown MarkdownTimeBoxService\tSprint and iteration reports\t📅 Tracking progress over time MarkdownRoadmapService\tMilestone and release planning\t🗺️ Long-term planning MarkdownTeamService\tTeam structure and assignments\t👥 Understanding who does what  🎯 Output Example: These services create files like 01_project_overview.md, 02_backlogs.md, 03_sprints.md with professional formatting and charts!    ","version":"Next","tagName":"h3"},{"title":"4. Chart Generation (chart/) 📊​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#4-chart-generation-chart-","content":" What it does: Creates visual representations of your project data  Think of these as data visualization specialists that turn numbers into insights.  Chart Generator Examples​  // 📈 Cumulative Flow Diagram - Shows work flow over time class CumulativeFlowDiagram { generate(timeboxes: TimeBox[]): string { // Analyzes sprint data to show work progress trends return svgContent; // Returns ready-to-use SVG chart } } // ⚡ Project Throughput - Shows team velocity class ProjectThroughputGenerator { generate(issues: Issue[]): string { // Calculates how fast work is completed return svgContent; // Shows velocity trends } } // 🕸️ Dependency Analysis - Shows task relationships class ProjectDependencyAnalyzer { generateMermaidDiagram(issues: Issue[]): string { // Maps out which tasks depend on others return mermaidContent; // Creates dependency graph } }   Available Chart Types​  Chart Type\tWhat It Shows\tWhen To UseCumulative Flow\tWork progress over time\t📈 Understanding workflow health Throughput\tTeam velocity trends\t⚡ Measuring team performance Dependencies\tTask relationships\t🕸️ Managing complex projects Burndown\tRemaining work in sprint\t🔥 Sprint progress tracking  💡 Pro Tip: Charts are generated as SVG (scalable graphics) or Mermaid diagrams, so they look crisp at any size and work great in documentation!    ","version":"Next","tagName":"h3"},{"title":"5. GitHub Integration (service/) 🚀​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#5-github-integration-service-","content":" What it does: Handles all communication with GitHub's API  Think of these as API specialists that know how to speak GitHub's language fluently.  GitHubService - Data Extraction (GitHub → MADE)​  class GitHubService { // 📥 Extract project information from GitHub async ETLProject(org: string, projectName: string): Promise&lt;Project&gt; { const githubProject = await this.getProjectByTitle(org, projectName); const project = await this.mapGitHubProjectToProject(githubProject); // Save locally for processing FileSystemRepository.save('project.json', project); return project; } // 📥 Extract all issues from GitHub repository async ETLIssue(org: string, projectName: string): Promise&lt;Issue[]&gt; { // Gets issues, converts to MADE format, saves locally } }   GitHubPushService - Data Publishing (MADE → GitHub)​  class GitHubPushService { async fullPush( org: string, repo: string, project: Project, epics: Issue[], stories: Issue[], tasks: Issue[] ): Promise&lt;void&gt; { // 1. Create GitHub project const projectId = await this.pushProject(org, project); // 2. Create issues for each work item for (const epic of epics) { await this.pushIssue(org, repo, projectId, epic); } // ... creates stories and tasks too } private async pushProject(org: string, project: Project): Promise&lt;string&gt; { // Uses GraphQL mutation to create GitHub project const mutation = ` mutation CreateProject($input: CreateProjectV2Input!) { createProjectV2(input: $input) { projectV2 { id } } } `; return await this.graphqlRequest(mutation, variables); } }   GitHub Integration Capabilities​  Direction\tWhat Happens\tUse CaseGitHub → MADE\tImport existing projects\t📥 Starting with existing data MADE → GitHub\tCreate issues and projects\t🚀 Setting up new projects Bi-directional\tKeep everything in sync\t🔄 Ongoing project management  🔑 Authentication: Uses GitHub tokens for secure API access. The library handles all the complex GraphQL queries and REST API calls for you!    ","version":"Next","tagName":"h3"},{"title":"🔄 Data Flow: From Input to Output​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-data-flow-from-input-to-output","content":" Here's the complete journey your data takes through the library:  ","version":"Next","tagName":"h2"},{"title":"Step 1: Input Processing 📥​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#step-1-input-processing-","content":" // Data comes from MADE Tool or direct library usage const project: Project = { id: &quot;proj-1&quot;, name: &quot;My Awesome Project&quot;, description: &quot;Building the next big thing&quot; }; const issues: Issue[] = [ { id: &quot;epic-1&quot;, type: &quot;epic&quot;, title: &quot;User Authentication&quot;, /* ... */ } ];   What happens: Raw project data enters the system in a standardized format.  ","version":"Next","tagName":"h3"},{"title":"Step 2: Documentation Generation 📝​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#step-2-documentation-generation-","content":" // Create comprehensive, professional documentation const markdownService = new MarkdownService('./data'); markdownService.createManagementDocumentation(); // 📄 Output files created: // ├── 01_project_overview.md (Executive summary) // ├── 02_backlogs.md (Detailed work breakdown) // ├── 03_sprints.md (Sprint planning &amp; progress) // ├── 04_roadmap.md (Long-term milestones) // └── charts/ // ├── dependencies.svg (Task dependency graph) // ├── throughput.svg (Team velocity chart) // └── burndown.svg (Sprint progress chart)   ","version":"Next","tagName":"h3"},{"title":"Step 3: GitHub Integration 🚀​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#step-3-github-integration-","content":" // Push everything to GitHub for team collaboration await reportManager.githubPush(token, org, repo, project, epics, stories, tasks); // 🚀 GitHub artifacts created: // ├── GitHub Issues (one per Epic/Story/Task) // ├── GitHub Project (with proper columns and views) // ├── Milestones (for roadmap items) // ├── Labels (for categorization) // └── Assignments (team members linked to work)   🎯 The Magic: Your simple .made file becomes a complete project management setup with documentation, visual charts, and GitHub integration!    ","version":"Next","tagName":"h3"},{"title":"🛠️ Key Features & Patterns​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#️-key-features--patterns","content":" ","version":"Next","tagName":"h2"},{"title":"Repository Pattern 📁​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#repository-pattern-","content":" What it does: Provides a clean interface for data storage and retrieval  // Abstract interface that any storage can implement interface Repository&lt;T&gt; { save(filename: string, data: T): void; // Store data load(filename: string): T; // Retrieve data exists(filename: string): boolean; // Check if data exists } // File-based implementation (default) class FileSystemRepository&lt;T&gt; implements Repository&lt;T&gt; { save(filename: string, data: T): void { // Saves to JSON files on disk fs.writeFileSync(filename, JSON.stringify(data, null, 2)); } load(filename: string): T { // Loads and parses JSON files return JSON.parse(fs.readFileSync(filename, 'utf8')); } }   Why this pattern?  ✅ Flexible: Easy to switch from files to databases later✅ Testable: Mock repository for unit tests✅ Consistent: Same interface for all data operations  ","version":"Next","tagName":"h3"},{"title":"Dependency Analysis 🕸️​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#dependency-analysis-️","content":" What it does: Analyzes task relationships and detects problems  class DependencyGraph { addNode(id: string, dependencies: string[]): void { // Builds graph of task relationships } detectCycles(): string[][] { // Finds circular dependencies (A depends on B, B depends on A) // Returns: [[&quot;task-1&quot;, &quot;task-2&quot;, &quot;task-1&quot;]] for cycles found } getTopologicalOrder(): string[] { // Returns tasks in order they should be completed // Example: [&quot;foundation&quot;, &quot;walls&quot;, &quot;roof&quot;] } }   Real-world benefits:  🚨 Prevents deadlocks: Detects when Task A needs Task B, but Task B needs Task A📋 Smart ordering: Suggests the optimal order to complete tasks🎯 Risk identification: Highlights tasks that block many others  ","version":"Next","tagName":"h3"},{"title":"Chart Generation Pipeline 📊​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#chart-generation-pipeline-","content":" How charts are created:  Data Extraction 📥 const completedTasks = issues.filter(i =&gt; i.status === 'completed'); const sprintVelocity = calculateVelocity(completedTasks, timeboxes); Processing ⚙️ const chartData = sprintVelocity.map(sprint =&gt; ({ date: sprint.endDate, velocity: sprint.completedPoints })); Rendering 🎨 const svgChart = generateVelocityChart(chartData); // Creates professional SVG charts Integration 📝 const markdown = `## Team Velocity\\n\\n${svgChart}\\n\\nOur team completed...`; // Embeds charts directly in documentation     ","version":"Next","tagName":"h3"},{"title":"🚀 Extension Points: Adding Your Own Features​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-extension-points-adding-your-own-features","content":" Want to extend the library? Here are the main extension points:  ","version":"Next","tagName":"h2"},{"title":"Custom Chart Generators 📊​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#custom-chart-generators-","content":" When to use: You want to visualize data in a new way  class CustomChartGenerator extends BaseChartGenerator { generate(data: any[]): string { // Example: Generate team workload distribution chart const workloadData = this.calculateWorkload(data); const svgContent = this.renderWorkloadChart(workloadData); return svgContent; } private calculateWorkload(issues: Issue[]): WorkloadData[] { // Your custom calculation logic return issues.reduce((acc, issue) =&gt; { // Group by assignee, calculate story points, etc. }, []); } }   Steps to add:  Extend BaseChartGeneratorImplement your generate() methodRegister with ChartGeneratorRegistryUse in markdown services  ","version":"Next","tagName":"h3"},{"title":"Custom Markdown Services 📝​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#custom-markdown-services-","content":" When to use: You want new types of documentation  class CustomMarkdownService { constructor(private dbPath: string) {} generateCustomReport(): void { const data = this.loadProjectData(); const customContent = this.processCustomLogic(data); // Example: Generate compliance report const complianceReport = ` # Compliance Report ## Security Requirements ${this.generateSecuritySection(data)} ## Quality Gates ${this.generateQualitySection(data)} `; this.saveReport('compliance_report.md', complianceReport); } }   ","version":"Next","tagName":"h3"},{"title":"Custom GitHub Integrations 🚀​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#custom-github-integrations-","content":" When to use: You want to integrate with other tools via GitHub  class CustomGitHubIntegration extends GitHubService { async pushToCustomTool(issues: Issue[]): Promise&lt;void&gt; { // Example: Create Slack notifications for new issues for (const issue of issues) { if (issue.type === 'epic') { await this.notifySlack(`New epic created: ${issue.title}`); } } } async syncWithJira(issues: Issue[]): Promise&lt;void&gt; { // Example: Keep Jira tickets in sync with GitHub issues // Your custom integration logic here } }   ","version":"Next","tagName":"h3"},{"title":"Common Extension Scenarios 🎯​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#common-extension-scenarios-","content":" Want to Add...\tExtend...\tExample Use CaseNew chart type\tBaseChartGenerator\tRisk heat maps, Cost analysis New documentation\tMarkdownService\tCompliance reports, Architecture docs New output format\tReportManager\tPDF exports, Excel reports New integrations\tGitHubService\tSlack notifications, Jira sync New data sources\tRepository\tDatabase storage, API imports    ","version":"Next","tagName":"h3"},{"title":"🎓 Best Practices for Library Development​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-best-practices-for-library-development","content":" ","version":"Next","tagName":"h2"},{"title":"Code Organization 📁​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#code-organization-","content":" lib/ ├── model/ # 📋 Data definitions ├── service/ # 🚀 External integrations ├── markdown/ # 📝 Documentation generators ├── chart/ # 📊 Visualization generators ├── repository/ # 💾 Data persistence └── utils/ # 🛠️ Helper functions   ","version":"Next","tagName":"h3"},{"title":"Testing Strategy 🧪​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#testing-strategy-","content":" // Unit tests for each service describe('MarkdownBacklogService', () =&gt; { it('should generate backlog documentation', () =&gt; { const service = new MarkdownBacklogService('./test-data'); const result = service.generate(); expect(result).toContain('# Backlog Overview'); }); }); // Integration tests for full workflows describe('ReportManager Integration', () =&gt; { it('should create complete project documentation', async () =&gt; { const manager = new ReportManager(); await manager.createReport('./test-project'); // Verify all expected files are created expect(fs.existsSync('01_project_overview.md')).toBe(true); expect(fs.existsSync('charts/dependencies.svg')).toBe(true); }); });   ","version":"Next","tagName":"h3"},{"title":"Performance Considerations ⚡​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#performance-considerations-","content":" ✅ Lazy Loading: Only load data when needed✅ Caching: Cache expensive calculations✅ Streaming: Process large datasets incrementally✅ Parallel Processing: Generate charts and docs simultaneously  ","version":"Next","tagName":"h3"},{"title":"Error Handling 🛡️​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#error-handling-️","content":" class RobustService { async processData(data: ProjectData): Promise&lt;Result&gt; { try { const validated = this.validateInput(data); const processed = await this.transform(validated); return { success: true, data: processed }; } catch (error) { logger.error('Processing failed', { error, data }); return { success: false, error: error.message }; } } }     ","version":"Next","tagName":"h3"},{"title":"🎯 Next Steps for Contributors​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#-next-steps-for-contributors","content":" ","version":"Next","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#getting-started","content":" 📚 Study existing services to understand patterns🧪 Write tests first for any new functionality📖 Check TypeScript interfaces for data contracts🔍 Use the repository pattern for data access  ","version":"Next","tagName":"h3"},{"title":"Development Workflow​","type":1,"pageTitle":"Library Architecture","url":"/leds-tools-public/made/advanced_concepts/made_lib_architecture#development-workflow","content":" Fork and clone the library repositoryCreate feature branch for your enhancementAdd tests that cover your new functionalityUpdate documentation with usage examplesSubmit pull request with clear description  This architecture provides a robust foundation for data processing while maintaining extensibility for custom requirements. The modular design means you can enhance specific areas without affecting the whole system! 🏗️ ","version":"Next","tagName":"h3"},{"title":"How to Contribute","type":0,"sectionRef":"#","url":"/leds-tools-public/oraculo/how_to_contribute/","content":"","keywords":"","version":"Next"},{"title":"Suggestion 1: Conversation Memory in AI​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/oraculo/how_to_contribute/#suggestion-1-conversation-memory-in-ai","content":" Concept​  Add contextual memory to the chatbot, allowing it to keep track of previous user interactions. This way, sequential questions can be understood within the same context, without requiring repetition.  Why implement?​  Currently, each question to Oráculo is processed in isolation, forcing users to repeat context for every query. With memory, it would be possible to maintain a continuous dialogue, improving usability and making interactions more natural.  Benefits​  Enables chained queries (e.g., “Which tasks are open?” → “And from those, which belong to the current sprint?”).Reduces redundancy and saves user time.Makes the chatbot behave more like an intelligent personal assistant.    ","version":"Next","tagName":"h3"},{"title":"Suggestion 2: Graph Generation and Standardized Responses​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/oraculo/how_to_contribute/#suggestion-2-graph-generation-and-standardized-responses","content":" Concept​  Enable Oráculo to generate visual charts (bar, line, pie) from GitHub metrics, and apply a standard response format for all answers.  Why implement?​  Currently, the system only provides plain text responses, which can make it harder to interpret complex metrics. Visual outputs make results easier to understand and more useful for sprint reviews or team meetings. Standardized responses ensure that information is always presented consistently, supporting comparison and professional reporting.  Benefits​  Improves clarity of communication (e.g., sprint performance, number of open/closed issues).Easier analysis for managers who prefer visuals over text.Creates a more professional experience aligned with modern management tools.    ","version":"Next","tagName":"h3"},{"title":"Suggestion 3: Dynamic Token Management​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/oraculo/how_to_contribute/#suggestion-3-dynamic-token-management","content":" Concept​  Allow updating API tokens (e.g., GitHub, Gemini) directly through the system interface, without editing the .env file or restarting services.  Why implement?​  Currently, token replacement requires manual changes to the .env file and restarting the application. This process creates friction, especially for non-technical users, and interrupts workflow. With dynamic token management, users could update credentials in real time, ensuring better usability and flexibility.  Benefits​  Fast replacement of expired credentials.Reduces technical dependency by avoiding manual file editing.Increases efficiency by eliminating the need to restart the application. ","version":"Next","tagName":"h3"},{"title":"📌 Project Development Plan","type":0,"sectionRef":"#","url":"/leds-tools-public/oraculo/project_management/","content":"","keywords":"","version":"Next"},{"title":"📋 Backlog​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-backlog","content":" ID\tTeam\tFeature\tDescription\tImportance\tProposal1\tManagement\tMetric Results\tCollect, analyze, and document project metrics throughout development.\t100\tImprove performance tracking 2\tDevelopers\tDynamic Data Import\tUser inserting more repostories's data with the system running.\t90\tImprove user experience 3\tDevelopers\tLLM Memory Implementation\tImplement context in the conversation with the LLM.\t70\tImprove user chat experience 4\tDevelopers\tCentralized Data and Access Control\tDifferent repositories in one place with access control mapping to users.\t95\tImprove setup configuration and ensure data security 5\tDevelopers\tLLM Answers Generating Graphical Data\tDeliver graphic information through the LLM chat.\t80\tImprove LLM answers      ","version":"Next","tagName":"h2"},{"title":"📊 Project Metrics​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-project-metrics","content":" These are the management metrics chosen for the Oráculo project. Each metric indicates how it will be measured using GitHub data integrated into Oráculo, and its expected impact on improving project outcomes.  ","version":"Next","tagName":"h2"},{"title":"1. Committed vs. Completed​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#1-committed-vs-completed","content":" Measurement: Count the number of issues (or story points) marked as planned for the sprint (Committed) versus the number of issues closed in GitHub within that sprint (Completed). Oráculo will calculate the percentage with the formula: (Completed Work Items * 100) / (Committed Work Items)Impact: Provides visibility into the team’s ability to meet commitments and improves estimation accuracy. Discrepancies highlight unrealistic planning or blockers, allowing managers to act early and keep delivery predictable.    ","version":"Next","tagName":"h3"},{"title":"2. Team Velocity​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#2-team-velocity","content":" Measurement: Based on the sum of completed story points in GitHub issues per sprint. Oráculo will present historical velocity per sprint and calculate a rolling average across the last 3–4 sprints.Impact: Enables forecasting of future deliveries and workload capacity. Consistent velocity indicates maturity; sudden changes point to problems like absences, scope changes, or technical obstacles, helping managers anticipate risks.    ","version":"Next","tagName":"h3"},{"title":"3. Automated Test Coverage​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#3-automated-test-coverage","content":" Measurement: Integration with CI/CD pipelines (e.g., GitHub Actions) will provide reports on percentage of code covered by automated tests. Coverage = (Lines of Code Tested / Total Lines of Code) * 100. Data will be automatically collected after each pipeline execution.Impact: Ensures quality and reduces regression risks. High coverage means safer deployments, faster detection of anomalies, and more robust improvements in Oráculo without breaking existing features.    ","version":"Next","tagName":"h3"},{"title":"4. Cycle Time / Lead Time​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#4-cycle-time--lead-time","content":" Measurement: Cycle Time: Calculated from the time an issue is moved to “In Progress” until it is closed in GitHub.Lead Time: Calculated from the time an issue is created until it is closed. Data will be extracted directly from GitHub issue and pull request timestamps. Impact: Shorter times reflect greater agility and efficiency in delivery. Tracking delays highlights bottlenecks (e.g., review queues, unclear requirements) and supports process optimization for faster, more consistent releases.    ","version":"Next","tagName":"h3"},{"title":"🧩 Project Model Canvas​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-project-model-canvas","content":" ","version":"Next","tagName":"h2"},{"title":"🔍 Justifications​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-justifications","content":" Ease github data visualization via LLM chat.    ","version":"Next","tagName":"h3"},{"title":"🎯 Product​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-product","content":" Oráculo improvement.    ","version":"Next","tagName":"h3"},{"title":"🧠 SMART Goal​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-smart-goal","content":" Improve Oráculo overall usability and chat experience in up to 4 months with 3 managers and 3 developers.    ","version":"Next","tagName":"h3"},{"title":"✅ Requirements​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-requirements","content":" User must be able to add repositories through a screen;LLM should have memory, for context storage;User acess must be restricted to their respective repositories;    ","version":"Next","tagName":"h3"},{"title":"🎁 Benefits​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-benefits","content":" Flexibility in importing data from multiple repositories while running;Time optimization when analyzing project progress.    ","version":"Next","tagName":"h3"},{"title":"👥 External Stakeholders & Factors​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-external-stakeholders--factors","content":" Advisors, scholarship holders, staff, and other stakeholders involved in LEDS and FAPES.    ","version":"Next","tagName":"h3"},{"title":"🔮 Assumptions​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-assumptions","content":" There will be access to AWS servers;Use of Open-source dependencies.Improvements implemented in 4 months.    ","version":"Next","tagName":"h3"},{"title":"⚠️ Risks​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#️-risks","content":" 1. Lack of technical capacity of the developers​  Probability: 70%Mitigation: Rething the delivery deadlines.  2. Project complexity being increased by Paulo Sergio​  Probability: 50%  3. Withdrawal of team members​  Probability: 20%  4. Unaccessible dependencies​  Probability: 5%Mitigation: Search and study replacement dependencies.    ","version":"Next","tagName":"h3"},{"title":"👥 Team​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-team","content":" 🧭 Management:​  Lívia Hombre (Steadiness);Pedro Henrique Fonseca (Steadiness);Thiago Fabiano (Dominance);Felipe Trindade.  🛠️ Developers:​  Alicia Caporalli (Steadiness);Sofia Nascimento;Vitor Nascimento.    ","version":"Next","tagName":"h3"},{"title":"🧱 Team Topology​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-team-topology","content":" Platform Team Enables stream-aligned teams to deliver work autonomously. While stream-aligned teams maintain full ownership of their work, the platform team provides internal services and tools to support delivery.    ","version":"Next","tagName":"h3"},{"title":"📦 Deliverables​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-deliverables","content":" Management:​  Results with collected metrics  Developers:​  Dynamic Data Import;LLM Memory Implementation;Centralized Data and Access Control;LLM Answers Generating Graphical Data.    ","version":"Next","tagName":"h3"},{"title":"⛓ Constraints​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-constraints","content":" Delivery deadline: 4 months.    ","version":"Next","tagName":"h3"},{"title":"🗓 Timeline​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-timeline","content":" First delivery: 31/08Second delivery: 28/09Third delivery: 02/11Fourth delivery: 30/11    ","version":"Next","tagName":"h3"},{"title":"💰 Costs​","type":1,"pageTitle":"📌 Project Development Plan","url":"/leds-tools-public/oraculo/project_management/#-costs","content":" Developer Cost: R$1,000.00 × 7 members = R$7,000.00AWS Hosting Cost (4 months): R$ 5.0 × 120 days × 7 members= R$4,200.00Gemini API Cost: R$12.00 × 120 days × 7 members = R$10,080.00  Total: R$21,280.00​   ","version":"Next","tagName":"h3"},{"title":"Advanced Concepts","type":0,"sectionRef":"#","url":"/leds-tools-public/reportfy/advanced_concepts/advanced-concepts","content":"","keywords":"","version":"Next"},{"title":"Architecture​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/reportfy/advanced_concepts/advanced-concepts#architecture","content":" The bot starts and connects to Discord.Generates repository reports via Reportify.Reads Markdown files generated in ./Reports.Creates a prompt for the Gemini API with the report data.Receives the AI summary and sends it to the Discord channel.  ","version":"Next","tagName":"h2"},{"title":"Data Flow​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/reportfy/advanced_concepts/advanced-concepts#data-flow","content":" GitHub Repo → Reportify → Markdown Reports → Gemini API → Discord Bot → Discord Channel  ","version":"Next","tagName":"h2"},{"title":"Artifact Map​","type":1,"pageTitle":"Advanced Concepts","url":"/leds-tools-public/reportfy/advanced_concepts/advanced-concepts#artifact-map","content":" Reports/ → folder containing the generated reportsReportfyBot.py → main bot script.env → environment variables (tokens and keys) ","version":"Next","tagName":"h2"},{"title":"Basic Concepts","type":0,"sectionRef":"#","url":"/leds-tools-public/reportfy/basic_concepts/basic-concepts","content":"","keywords":"","version":"Next"},{"title":"ReportifyBot​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/reportfy/basic_concepts/basic-concepts#reportifybot","content":" A Discord bot integrated with the Reportify library and the Gemini (Google AI) API. It generates automatic reports of GitHub repositories and produces smart summaries that are sent to a channel on Discord.    ","version":"Next","tagName":"h2"},{"title":"How to use​","type":1,"pageTitle":"Basic Concepts","url":"/leds-tools-public/reportfy/basic_concepts/basic-concepts#how-to-use","content":" Run manually via GitHub Actions (workflow run-bot.yml). ","version":"Next","tagName":"h2"},{"title":"How to Contribute","type":0,"sectionRef":"#","url":"/leds-tools-public/reportfy/how_to_use/how_to_contribute","content":"","keywords":"","version":"Next"},{"title":"New Features​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/reportfy/how_to_use/how_to_contribute#new-features","content":" Create new Discord commandsAdd integration with other APIs or reports  ","version":"Next","tagName":"h2"},{"title":"Local Development​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/reportfy/how_to_use/how_to_contribute#local-development","content":" Clone the repository: git clone &lt;repo_url&gt;Create and activate a virtual environmentInstall dependencies: pip install -r requirements.txtConfigure .env with the correct keys  ","version":"Next","tagName":"h2"},{"title":"Best Practices​","type":1,"pageTitle":"How to Contribute","url":"/leds-tools-public/reportfy/how_to_use/how_to_contribute#best-practices","content":" Create a specific branch for each feature/bugfixTest locally before opening a Pull RequestDocument changes and workflow updates ","version":"Next","tagName":"h2"},{"title":"Project Management","type":0,"sectionRef":"#","url":"/leds-tools-public/reportfy/project_management/","content":"","keywords":"","version":"Next"},{"title":"Project Organization​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/reportfy/project_management/#project-organization","content":" Source code: repository rootDocumentation: docs/reportify/Reports: Reports/ (automatically generated)  ","version":"Next","tagName":"h2"},{"title":"Roadmap​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/reportfy/project_management/#roadmap","content":" Add new features for reportsOptimize prompts for Gemini APIAutomate testing and CI/CD  ","version":"Next","tagName":"h2"},{"title":"Version Control​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/reportfy/project_management/#version-control","content":" Main branch: mainFeature branches: feature/&lt;name&gt;Pull Requests reviewed before merging  ","version":"Next","tagName":"h2"},{"title":"History​","type":1,"pageTitle":"Project Management","url":"/leds-tools-public/reportfy/project_management/#history","content":" All important changes must be documented in this file or in the changelog ","version":"Next","tagName":"h2"},{"title":"Atention","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/overview","content":"Atention The architecture description was based on the most recent version in the Main branch of the Spark source repository, namely November 2024. Breif The Spark is a tool developed with Andes and is used as a plugin in VSCode, which forces its architecture to resemble other projects that have the same characteristics. Observe the graph below to have an overview of the architecture. Note that the folders are divided into two sections: the top and the bottom ones. Unfortunately, the code in the main branch of the repository is not stable, making it impossible to fully explain the completeness and exact communication between the layers. However, it is still possible to interpret their intended purpose. Thus, the top layer are explained in an incomplete and interpretive manner, while the bottom layer will be explained in detail.","keywords":"","version":"Next"},{"title":"A Brief About Grammar","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/advanced_study","content":"","keywords":"","version":"Next"},{"title":"Token Mapper​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#token-mapper","content":" Keyword\tCategory\tQualifier\tExamplesConfiguration\tName Space software_name\tSingle Item\tstring\tsoftware_name: &quot;free text&quot; about\tSingle Item\tstring\tabout: &quot;free text&quot; language\tSingle Item\tenum\tlanguage: csharp-clean-architecture  Attention: every &quot;string&quot; qualifier must be inside quotation marks (&quot;)  ","version":"Next","tagName":"h2"},{"title":"Language Token Mapper​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#language-token-mapper","content":" Enum Option\tDescriptioncsharp-clean-architecture\tspecificer the backend must be generated using .NET with Clean Architecture Architecture csharp-minimal-api\tspecificer the backend must be generated using .NET with Minimal API Architecture python\tspecifier the backend must be generated using Django rest framework with DJango MVC Architecture java\tspecifier the backend must be generated using SpringBoot with SpringBoot MVC Architecture  ","version":"Next","tagName":"h3"},{"title":"Setting Configuration​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#setting-configuration","content":" To start the section namespace include the keyword Configuration and start it block. Internal, it must have:  software_name (single item with string qualifier);about (single item with string qualifier); andlanguage (single item with enum qualifier).  Configuration Example   Configuration { software_name: &quot;name_of_the_software&quot; about: &quot;software description&quot; language: csharp-clean-architecture-custom }   The language token accept the keys specified here.  The Module NameSpace  This namespace refers to Domain Class Packages and/or program Packages/Modules. The module key word to refers to it was arbitrary chosed.  ","version":"Next","tagName":"h2"},{"title":"Token Mapper​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#token-mapper-1","content":" Keyword\tCategory\tName\tAcceptable Sub Name Spaces\tCorrect Examples\tWrong Examplesmodule\tName Space\tfree text with no special characters, inclunding numbers, &quot;\\&quot; based chars in ASCII and utf-8, and spaces.\tmodule, entity and enum\tmodule someName, module SomeName, module SOMENAME_NAME_WHY_YOU_IS_DOING_it\tmodule 1Name, module Module Name, module &lt;keyword&gt; entity\tName Space\tfree text with no special characters, inclunding numbers, &quot;\\&quot; based chars in ASCII and utf-8, and spaces\tenum\tentity someName, entity SomeName, entity SOMENAME_NAME_WHY_YOU_IS_DOING_it\tentity 1Name, entity Entity Name, entity &lt;keyword&gt; enum\tName Space\tfree text with no special characters, inclunding numbers, &quot;\\&quot; based chars in ASCII and utf-8, and spaces enum someName, enum SomeName, enum some_NaMe\tenum 1Name, enum Enum Name, enum &lt;keyword&gt;  ","version":"Next","tagName":"h2"},{"title":"Setting Module​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#setting-module","content":" Start insert the keyword module, set some module name and initialize the namespace block. Then, insert in it other modules, entitys or both. It must have at least one module or entity.  Module Example 1  module ModuleName { module SubModule {...} }   Module Example 2  entity EntityName {...}   Module Example 3  // some description comment module ModuleName { module SubModule {...} entity SomeEntity {...} }   Wrong Module Example  module ModuleName { // empty module :( }   The Class NameSpace  The class namespace have an diferent internal struct. Each item in it is an attribute... Check it out.  ","version":"Next","tagName":"h2"},{"title":"The Attribute Item​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#the-attribute-item","content":" The ttribute have the follow semantic:attributeName : &lt;qualifier&gt;  The most important qualifier are types, and it must be the first specified qualifier. After it, you could use to many other qualifiers, like blank, null, etc.  ","version":"Next","tagName":"h2"},{"title":"Attribute Qualifiers - Types Enum​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#attribute-qualifiers---types-enum","content":" Token\tDescriptionstring\trefers to strings attribute in referenced language integer\trefers to integers attribute in referenced language decimal\trefers to precising decimal representation attribute in referenced language (it could not be float or double) datetime\trefers to date and time attribute in referenced language date\trefers to date attribute in referenced language boolean\trefers to boolean attribute in referenced language uuid\trefers to Universal User Identfier attribute wich depends the tecnology implemented (example, in C# it use UUID class from .NET) email\trefers to email attribute wich depends the tecnology implemented (example, in Python it use EmailField class from Django) cpf\trefers to &quot;Cadastro de Pessoa Física&quot; attribute wich depends the tecnology implemented (example, in Python it use CPFField class from django-cpf-cnpj) [Specific for Brazil] cnpj\trefers to &quot;Cadastro Nacional de Pessoa Jurídica&quot; attribute wich depends the tecnology implemented (example, in Python it use CNPJField class from django-cpf-cnpj) [Specific for Brazil] currency\trefers to monetary manipulation attribute wich depends the tecnology implemented mobilePhoneNumber\trefers to mobile phones number attribute wich depends the tecnology implemented phoneNumber\trefers to landline phones number attribute wich depends the tecnology implemented  ","version":"Next","tagName":"h3"},{"title":"Attribute Qualifiers - Otehrs Enum​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#attribute-qualifiers---otehrs-enum","content":" Token\tDescriptionunique\trefers to unique attributes; some types, like uuid, it are implict blank\trefers to attributes could be blank null\trefers to attributes could be null min\twe don't know how use it, but it is here :) max\twe don't know how use it, but it is here :)  About blank and null​  Some databases technologys, like PostegressSQL and MySQL, diferes null attributes from blank attributes. The most part of REST API frameworks abrating the database technology, so this qualifiers will be passed to it. In other hand, some languages, like javascript, difers undefined from null objects, so the blank modifier will be interpreter as undefined and null will be interpreted as null.  About min and max attributes​  Yes, we don't know why it is here, but have rules to use. First, you can use each of them separatly. Next, you must pass some integer value affter the qualifier declaration, like min: 10. In end, if you use min and max together, you must specify the max first.  ","version":"Next","tagName":"h3"},{"title":"The Relations Items​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#the-relations-items","content":" To specify some relations between classes you will need the ManyToOne, OneToMany, OneToOne and ManyToMany keywords. Everyone work's at same. First, set some class reference (it can be from other module to). Next, set some keyword. In the end, specify the other side of relation.  Attention, the relation are seted in the referenced order, not referenced class. Check it example:  entity One {...} entity Two { one ManyToOne Two }   The code above will be translated in some generic OO Program Language Like  class One { Two target; } class Two { }   It is useful in analysis to center the order of viewing. Here's the example: You have a class diagram with the Product and Price classes. It is obvious that the product has some relationship with the price of the class. Correct? So how do you specify it in Spark?   entity Product {...} entity Price { OneToOne Product Price }    entity Price {...}   Both are correctly and probably do exactly the same thing in each implementation. By the way, check the first option. It's less intuitive at first glance, but the reasoning here is obvious that a product has some price, so we'll show it after, where it could be more useful than knowing (where we're studying the Product class).  ","version":"Next","tagName":"h2"},{"title":"The Enum NameSpace​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#the-enum-namespace","content":" The enum namepace are some of most simples to specify. Just start the enum namepace with enum keyword. Aftter, each free text inside will be option in the enum. To set some class attribute as an enum reference file, use the keyword uses.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"A Brief About Grammar","url":"/leds-tools-public/spark/advanced_concepts/advanced_study#examples","content":" Classes (with attributes and relations)  // Module Desscription module ModuleName { // entity Description entity ClassName { // attribute description attributeName : attributeType ClassName OneToOne ModuleName.AnotherClass } entity AnotherClass { attribute : attributeType enumReference uses MyEnum ClassName ManyToOne AnotherClass } enum MyEnum { op1 op2 op3 } }  ","version":"Next","tagName":"h2"},{"title":"Generated Documentation","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/documentationArchitecture","content":"","keywords":"","version":"Next"},{"title":"Generated Hierarchy​","type":1,"pageTitle":"Generated Documentation","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/documentationArchitecture#generated-hierarchy","content":" ","version":"Next","tagName":"h2"},{"title":"Package Diagram​","type":1,"pageTitle":"Generated Documentation","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/documentationArchitecture#package-diagram","content":" A PlantUML file named packagediagram.puml is generated, containing all packages in the Spark file; andA corresponding Markdown file is also created, which embeds the package diagram and lists all of it's packages.  ","version":"Next","tagName":"h3"},{"title":"Packages​","type":1,"pageTitle":"Generated Documentation","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/documentationArchitecture#packages","content":" For each package (also referred to as a module), Spark creates a dedicated folder. Each folder contains:  classdiagram.puml: a PlantUML file describing the classes within the package, including their attributes and relationships.A Markdown file documenting the classes in the package, similar in structure to the package diagram file.  ","version":"Next","tagName":"h3"},{"title":"Terminology Note​","type":1,"pageTitle":"Generated Documentation","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/documentationArchitecture#terminology-note","content":" In the documentation, the terms packages and classes are used. However, in Spark grammar these are referred to as modules and entities, respectively. In other words:  Package = ModuleClass = Entity ","version":"Next","tagName":"h2"},{"title":"Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/theBottomLayerOverview","content":"","keywords":"","version":"Next"},{"title":"Top Layer​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/theBottomLayerOverview#top-layer","content":"   ","version":"Next","tagName":"h2"},{"title":"Bottom Layer​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/theBottomLayerOverview#bottom-layer","content":"   The bottom layers are the most important parts of the project. This is where the real magic happens.  ","version":"Next","tagName":"h2"},{"title":"Src (Source)​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/theBottomLayerOverview#src-source","content":" The Src folder is automatically generated by a Langium project. It contains the most essential information and definitions of Spark.  ","version":"Next","tagName":"h2"},{"title":"Test​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/theBottomLayerOverview#test","content":" This folder is responsible for maintaining and structuring the Spark tests to ensure the integrity and accuracy of the generated code. ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/theCliFolder","content":"Introduction The CLI folder contains the necessary files to read the syntax definitions from the language folder, convert them into computational artifacts interpreted by JS/TS, and apply the commands needed to instantiate the project. This structure follows a very interesting principle: each folder contains a corresponding Generate.ts file, which is responsible for generating the directory structure at its level and/or invoking the Generate.ts of the subsequent level. Furthermore, within the context of this level in the CLI folder, each subfolder refers to a specific command and, depending on the layer, may include subdirectories for more specific application configurations. With these mechanisms, the code becomes not only extremely organized but also allows a clear visualization of the internal layer architectures without the need for diagramming. Understanding the Generate Structure Better Consider the following example code: Configuration { software_name: &quot;Example Software&quot; // Software's name about: &quot;This software is just an example&quot; // Description about the software language: python // Language and pattern used to develop the software database_name: &quot;DataBase&quot; // Database Name } module CoolModule { entity CoolGuy { name: string } } module BadModule { entity DummyGu { name: string } } When reading the .spark file above, VSCode will begin constructing the selected command by following the folder structure within the CLI level. In this structure, we have the folders: documentation;backend;frontend; andopa. The commands registered in VSCode are: generate project documentation;generate backend;generate frontend; andgenerate authorization; Sound familiar? Thus, each folder represents a command registered in VSCode. When a command is triggered, its specific generate file is located within the folder structure. Suppose you execute the command generate backend. Then, VSCode will call the Generator.ts file inside the CLI folder and pass the parameters defined in the configuration section of the .spark file. The Generator.ts file will then locate the specific generate file corresponding to the provided parameters—in our case, it accesses the backend folder (as the generation command is generate backend), then accesses the python folder (as specified in the project configuration), and finally calls the generate.ts file. The generate.ts file, in turn, understands its internal structure and proceeds to create the necessary folders at its level, continuing to call the respective generate.ts files at lower levels, until the entire folder structure is properly built. As the folders are created, the files belonging to each level are also generated. See Image 7 to check an graphic representation. Image 7: Generate struct representation","keywords":"","version":"Next"},{"title":"Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer","content":"","keywords":"","version":"Next"},{"title":"Top Layer​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#top-layer","content":"   ","version":"Next","tagName":"h2"},{"title":"Bottom Layer​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#bottom-layer","content":"   The top layer is, to some extent, independent from the others, since there is no communication between them. However, they certainly do communicate in the final and correct version of the tool.  ","version":"Next","tagName":"h2"},{"title":"Bin​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#bin","content":" This folder, normally used to store machine-compiled code, is responsible for containing the files that manage the execution of the available commands. These files are most likely executed via the Command Line Interface (CLI). Since the project is developed with NodeJS, it's possible to use JavaScript (JS) source code to access the system’s operating system calls (SCs). Therefore, there is no need for compiled code in this folder; all files here are JS source code, but their purpose is the same as that of a folder containing binary files.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#examples","content":" The examples folder contains files in the Spark format (.spark) with examples demonstrating how the tool's syntax works.  ","version":"Next","tagName":"h2"},{"title":"Images​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#images","content":" This folder contains images used in the repository’s documentation and in the tool’s documentation within VSCode. It is a folder with static files.  ","version":"Next","tagName":"h2"},{"title":"Models​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#models","content":" This folder is responsible for part of the documentation. It contains files that model the tool's reserved keywords and how they communicate and interact, using the Unified Modeling Language (UML).  The files are in the .vpp format, which is read by the Visual Paradigm tool. The files in question were created with an unidentified version of the tool. The graph below shows the internal content of the only file present in the folder, opened in the most recent version of the tool as of now, version 17.2. Therefore, it is not guaranteed that the internal content in the image is complete.    ","version":"Next","tagName":"h2"},{"title":"Scripts​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#scripts","content":" This folder is responsible for containing some code that will potentially be called by the bin folder but is not part of the CLI. Currently, its files are responsible for preparing the environment with the folder structure, ensuring that the generation of subsequent files does not encounter errors.  ","version":"Next","tagName":"h2"},{"title":"Static​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/understandTopLayer#static","content":" This folder is automatically generated by a Langium project along with Monaco to create static documentation for the tool under development. Since the documentation is now being created separately with an external tool, namely Docusaurus, it has been discontinued and no longer receives updates. ","version":"Next","tagName":"h2"},{"title":"Understanding the Language","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang","content":"","keywords":"","version":"Next"},{"title":"Configuration​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#configuration","content":" This constructor allows you to define:  Software NameDescription about the softwareLanguage desired to develop the information systemDatabase name   Configuration { software_name: &quot;MyCoolSoftware&quot; // Software's name about: &quot;MyCoolSoftware project example&quot; // Description about the software language: python // Language and pattern used to develop the software database_name: &quot;MyCoolSoftwareDB&quot; // Database Name }   For the language, we have the options: python, java, csharp-minimal-api, csharp-clean-architecture.  ","version":"Next","tagName":"h2"},{"title":"Class Diagram​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#class-diagram","content":" Spark allows you to organize a class diagram into Modules. The declaration of a module follows this pattern:  module Main { // Components of the module go here }   Inside each module, it is possible to define Entities, relations between entities, and Enums.  entity Project { name: string start_date: date end_date: date budget: decimal client: string sponsor: string goal: string project_father OneToMany Project time OneToMany Time status uses Status } enum Status { Ativo Cancelado Entregue }   ","version":"Next","tagName":"h2"},{"title":"Attribute and Relationship Types​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#attribute-and-relationship-types","content":" Entities have attributes, and the available types are: string, integer, decimal, datetime, date, boolean, uuid, email, cpf, cnpj, zipcode, currency, mobilePhoneNumber, phoneNumber, file, void.  Spark allows the following relationships:  OneToOneOneToManyManyToOneManyToMany  ","version":"Next","tagName":"h2"},{"title":"Use Cases​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#use-cases","content":" Spark provides comprehensive support for modeling use cases, allowing the definition of actors, events, and relationships between use cases.  ","version":"Next","tagName":"h2"},{"title":"Defining Actors​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#defining-actors","content":" Actors represent entities or roles interacting with the system. An actor can optionally extend another actor and include attributes like name.  actor ProjectManager name: &quot;Project Manager&quot; actor TeamMember name: &quot;Team Member&quot;   ","version":"Next","tagName":"h3"},{"title":"Defining Use Cases​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#defining-use-cases","content":" A use case describes a functionality of the system. It can include actors, events, descriptions, and inheritance from other use cases.  usecase ManageProjects extends BaseUseCase { name: &quot;Manage Projects&quot; description: &quot;Handles project management functionalities&quot; performer: ProjectManager, TeamMember event CreateProject { name: &quot;Create a Project&quot; description: &quot;Allows the creation of a new project&quot; action: &quot;Create&quot; } event AssignTask { name: &quot;Assign a Task&quot; description: &quot;Assigns tasks to team members&quot; action: &quot;Assign&quot; } }   ","version":"Next","tagName":"h3"},{"title":"Defining Events​","type":1,"pageTitle":"Understanding the Language","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang#defining-events","content":" Events are integral components of a use case. They represent actions or operations, with optional dependencies on other events.  event CreateProject { name: &quot;Create a Project&quot; description: &quot;Initiates the creation of a project&quot; action: &quot;Create&quot; depend: AssignTask }   Where:  Actors are the performers of the use case.Use Cases define the system's functionality.Events represent discrete operations within a use case. ","version":"Next","tagName":"h3"},{"title":"Welcome to Src Folder!","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/overview","content":"","keywords":"","version":"Next"},{"title":"Syntax Definition Files","type":1,"pageTitle":"Welcome to Src Folder!","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/overview##","content":"These files, represented by the Langium extension (.langium), are responsible for defining how the language’s syntax is structured. Each file contains a set of data that determines which reserved keywords (for context and typing) exist, which keywords are accepted in which contexts, and how they should be interpreted. In short, they define a set of Regular Expressions (Regex).    ","version":"Next","tagName":"h3"},{"title":"Construction Definition Files","type":1,"pageTitle":"Welcome to Src Folder!","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/src_folder/overview##","content":"These files are represented by JavaScript (.js) and TypeScript (.ts) extensions. They are programming code files that implement specific validation rules for the language, aimed at facilitating the development of language tests.   CLI  This folder is more relevant than the others. Due to its large number of subfolders and files, it will be explained in a separate section.  Extensions  This folder contains the configuration files for Spark as a VSCode extension. It defines which files should be read to extract grammar checkers, editing assistants — for example, automatically inserting a closing &quot;)&quot; when typing an opening &quot;(&quot;, as well as comment characters — and reserved keyword definitions. Additionally, it also registers commands that can be accessed via left-click on files with the .spark extension. ","version":"Next","tagName":"h3"},{"title":"Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/Explanning","content":"","keywords":"","version":"Next"},{"title":"Use in Spark​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/Explanning#use-in-spark","content":" With the use of the lib we needed to modify our source code of the spark generators, where all code generation logic was within the source code, with the use of our lib we removed all this part of the product logic and kept only the lib calls we created, keeping only one generator.ts within each respective language.  This leaves us with the source code structure like this:    These generators are where spark-generators-lib is called for each language, thus communicating with the generators and index within the lib. ","version":"Next","tagName":"h3"},{"title":"Spark Compiler Artifact Map","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/artifact_map","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Spark Compiler Artifact Map","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/artifact_map#introduction","content":" The Spark compiler receives models defined in its own language and generates code for different technologies (Java, Python, C#, etc.). Each language object (Entity, Enum, Service, etc.) is converted into specific artifacts, distributed in folders and files according to each generator's architecture.  ","version":"Next","tagName":"h2"},{"title":"Mapping Language Objects to Artifacts​","type":1,"pageTitle":"Spark Compiler Artifact Map","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/artifact_map#mapping-language-objects-to-artifacts","content":" Language Object\tGenerated Artifact (Java)\tGenerated Artifact (Python)\tGenerated Artifact (C# Minimal API)\tGenerated Artifact (C# Clean Architecture)Entity\tjava-generator/entity/model-generator.ts (Java class in Entity/)\tpython-generator/django/back/ (Django Model class)\tcsharp-generator/minimal-API-generator/webservice/model-generator.ts (C# class in Entities/)\tcsharp-generator/cleanArchitecture-generator/Domain/Entities/ (C# class in Entities/) Enum\tjava-generator/entity/enum-generator.ts (Java enum in Enums/)\tpython-generator/django/back/ (Python enum)\tcsharp-generator/minimal-API-generator/webservice/enum-generator.ts (C# enum in Enums/)\tcsharp-generator/cleanArchitecture-generator/Domain/Enums/ (C# enum in Enums/) Service\tjava-generator/entity/service-generator.ts (Java class in Services/)\tpython-generator/django/back/ (Python Service class)\tcsharp-generator/minimal-API-generator/webservice/generator.ts (C# class in Services/)\tcsharp-generator/cleanArchitecture-generator/Application/Services/ (C# class in Services/) DTO\tjava-generator/entity/dto-generator.ts (Java class in DTOs/)\tpython-generator/django/back/ (Python DTO class)\tcsharp-generator/minimal-API-generator/webservice/dto-generator.ts (C# class in DTOs/)\tcsharp-generator/cleanArchitecture-generator/Application/DTOs/ (C# class in DTOs/) Interface\tjava-generator/entity/interface-generator.ts (Java interface)\tpython-generator/django/back/ (Python interface)\tcsharp-generator/minimal-API-generator/webservice/interface-generator.ts (C# interface)\tcsharp-generator/cleanArchitecture-generator/Domain/Interfaces/ (C# interface) Validation\tjava-generator/entity/validation-generator.ts (Java class in Validation/)\tpython-generator/django/back/ (Python Validation class)\tcsharp-generator/minimal-API-generator/webservice/validation-generator.ts (C# class in Validation/)\tcsharp-generator/cleanArchitecture-generator/Domain/Validation/ (C# class in Validation/) Configuration\tjava-generator/webservice/config-generator.ts (Configuration file)\tpython-generator/django/back/ (Configuration file)\tcsharp-generator/minimal-API-generator/webservice/config-generator.ts (Configuration file)\tcsharp-generator/cleanArchitecture-generator/Application/Configuration/ (Configuration file)  ","version":"Next","tagName":"h2"},{"title":"Examples of Generated Paths​","type":1,"pageTitle":"Spark Compiler Artifact Map","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/artifact_map#examples-of-generated-paths","content":" Java: packages/java-generator/entity/model-generator.ts → Generates files in Entity/, Enums/, Services/, etc.Python: packages/python-generator/django/back/ → Generates models, enums, services, etc.C# Minimal API: packages/csharp-generator/minimal-API-generator/webservice/ → Generates entities, enums, services, DTOs, etc.C# Clean Architecture: packages/csharp-generator/cleanArchitecture-generator/Domain/, Application/, etc.  ","version":"Next","tagName":"h2"},{"title":"Notes​","type":1,"pageTitle":"Spark Compiler Artifact Map","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/artifact_map#notes","content":" The mapping may vary depending on the target technology and project configuration.For specific details, check each generator's files in the packages folder.    This map serves as a quick reference to understand how each Spark language object is converted into code artifacts in the different architectures supported by the compiler. ","version":"Next","tagName":"h2"},{"title":"Metamodel","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel","content":"","keywords":"","version":"Next"},{"title":"Model​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#model","content":"   ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#configuration","content":" Description: Represents the configuration settings of the system. This class is imported from the config package.Attributes: (Attributes are defined within the config package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"AbstractElement​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#abstractelement","content":" Description: An abstract representation of system elements. It serves as a base for more specific elements like Module and EnumX.Relationships: Inheritance: Module and EnumX inherit from AbstractElement.  ","version":"Next","tagName":"h3"},{"title":"ModuleImport​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#moduleimport","content":" Description: Represents an import statement for modules. This class is imported from the modules package.Attributes: (Attributes are defined within the modules package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"Actor​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#actor","content":" Description: Represents an actor in the system, typically a user or external system that interacts with the system's use cases.Attributes: (Attributes are defined within the entities or usescases package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"UseCase​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#usecase","content":" Description: Represents a use case within the system, defining a specific functionality or behavior that actors can perform.Attributes: (Attributes are defined within the usescases package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"Module​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#module","content":" Description: Represents a module within the system, which can contain various elements such as other modules, enums, or local entities.Attributes: name: A QualifiedName that uniquely identifies the module.comment: An optional Comment providing additional information about the module.elements: A collection of AbstractElement or LocalEntity instances contained within the module. Relationships: Has: May contain one Comment.Contains: Can contain multiple AbstractElement and LocalEntity instances.  ","version":"Next","tagName":"h3"},{"title":"EnumX​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#enumx","content":" Description: Represents an enumeration within the system. Inherits from AbstractElement.Attributes: (Attributes specific to the enumeration are defined within the entities package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"LocalEntity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#localentity","content":" Description: Represents a local entity within a module. This could be a class, interface, or other construct defined within a module.Attributes: (Attributes are defined within the entities package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"Comment​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#comment","content":" Description: Represents a comment within the grammar, providing additional context or explanations for modules.Attributes: content: A string containing the comment text.  ","version":"Next","tagName":"h3"},{"title":"QualifiedName​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#qualifiedname","content":" Description: Represents a qualified name used to uniquely identify elements within the system. Imported from the terminals package.Attributes: (Attributes are defined within the terminals package and are not detailed here.)  ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#configuration-1","content":" This class diagram provides a clear and organized view of the Configuration class within the SPARK grammar, demonstrating how it integrates various fragments to encapsulate different aspects of the system's configuration. By using fragments such as DataBaseName, Language, PackagePath, and Features, the model promotes reusability and consistency, ensuring that common configuration patterns are maintained across different components of the system. The optional association between Features and Entity allows for enhanced flexibility, enabling features to be contextually linked to specific entities as needed.    ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#configuration-2","content":" Description: The Configuration class encapsulates the system's configuration settings. It includes various attributes that define the software's name, description, database configuration, package paths, programming language, and feature settings. Attributes: name: A string representing the name of the software.description: A string providing an overview or details about the software.dataBaseName: An instance of the DataBaseName fragment specifying the database name.packagePath: An instance of the PackagePath fragment specifying the package path.language: An instance of the Language fragment specifying the programming language used.features: An instance of the Features fragment defining various features of the software. Relationships: Includes: DataBaseName: Defines the name of the database.PackagePath: Specifies the package path used in the system.Language: Indicates the programming language employed.Features: Details the features available, optionally associating them with specific entities.  ","version":"Next","tagName":"h3"},{"title":"DataBaseName​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#databasename","content":" Stereotype: &lt;&lt;fragment&gt;&gt;Description: Specifies the name of the database used by the system.Attributes: database_name: A string representing the database name.  ","version":"Next","tagName":"h3"},{"title":"Language​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#language","content":" Stereotype: &lt;&lt;fragment&gt;&gt;Description: Specifies the programming language used in the system.Attributes: language: An enumeration (LANGUAGETYPE) representing the programming language (e.g., Java, Python).  ","version":"Next","tagName":"h3"},{"title":"PackagePath​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#packagepath","content":" Stereotype: &lt;&lt;fragment&gt;&gt;Description: Specifies the package path used in the system.Attributes: package_path: An enumeration (LANGUAGETYPE) representing the package path.  ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#features","content":" Stereotype: &lt;&lt;fragment&gt;&gt;Description: Defines features of the system, optionally associating them with specific entities.Attributes: feature: An enumeration (FEATURE_TYPE) representing the type of feature.entity: An optional reference to an Entity using a QualifiedName.  ","version":"Next","tagName":"h3"},{"title":"Entity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#entity","content":"   ","version":"Next","tagName":"h2"},{"title":"Entity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#entity-1","content":" Description: The Entity interface is implemented by both LocalEntity and ImportedEntity. This allows these classes to be treated uniformly when establishing relationships and dependencies.Inheritance: LocalEntity ..|&gt; EntityImportedEntity ..|&gt; Entity  ","version":"Next","tagName":"h3"},{"title":"ModuleImport​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#moduleimport-1","content":" Description: Represents an import statement for modules. It specifies the package path, library, module name, and the entities being imported.Attributes: package_path: The path of the package as a string.library: The name of the library from which modules are imported.name: The name of the module.entities: A list of ImportedEntity instances representing the entities being imported. Relationships: Imports: Can import multiple ImportedEntity instances.  ","version":"Next","tagName":"h3"},{"title":"ImportedEntity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#importedentity","content":" Description: Represents an entity that is imported into a module. It holds the name of the entity.Attributes: name: The name of the imported entity.  ","version":"Next","tagName":"h3"},{"title":"LocalEntity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#localentity-1","content":" Description: Represents a local entity within a module. This could be a class, interface, or other construct defined within a module.Attributes: name: The name of the entity.superType: An optional reference to another Entity that this entity extends.is_abstract: A boolean flag indicating whether the entity is abstract.attributes: A collection of Attribute instances defining the entity's attributes.enumEntityAttributes: A collection of EnumEntityAtribute instances.relations: A collection of Relation instances defining relationships with other entities.functions: A collection of FunctionEntity instances defining the entity's functions. Relationships: Inherits: Implements the Entity interface.Contains: Can contain multiple Attribute, EnumEntityAtribute, Relation, and FunctionEntity instances.Has: May have an optional Comment.  ","version":"Next","tagName":"h3"},{"title":"FunctionEntity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#functionentity","content":" Description: Represents a function within an entity, detailing its name, parameters, and return type.Attributes: name: The name of the function.response: The data type of the function's return value.parameters: A collection of Parameter instances defining the function's parameters. Relationships: Has: Can contain multiple Parameter instances.  ","version":"Next","tagName":"h3"},{"title":"Parameter​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#parameter","content":" Description: Represents a parameter of a function within an entity.Attributes: elements: A collection of Element instances defining the parameter's elements. Relationships: Includes: Can contain multiple Element instances.  ","version":"Next","tagName":"h3"},{"title":"Element​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#element","content":" Description: Represents an individual element within a parameter, specifying its name and type.Attributes: name: The name of the element.type: The data type of the element.  ","version":"Next","tagName":"h3"},{"title":"Attribute​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#attribute","content":" Description: Represents an attribute of an entity, detailing its name, type, and various constraints.Attributes: name: The name of the attribute.type: The data type of the attribute.fullName: An optional string specifying the full name.unique: An optional boolean indicating if the attribute is unique.blank: An optional boolean indicating if the attribute can be blank.max: An optional integer specifying the maximum value.min: An optional integer specifying the minimum value.  ","version":"Next","tagName":"h3"},{"title":"EnumEntityAtribute​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#enumentityatribute","content":" Description: Represents an attribute of an enumeration within an entity.Attributes: name: The name of the enumeration attribute.type: A reference to an EnumX instance indicating the type of the enumeration.  ","version":"Next","tagName":"h3"},{"title":"EnumX​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#enumx-1","content":" Description: Represents an enumeration type within the system.Attributes: name: The name of the enumeration.attributes: A collection of AttributeEnum instances defining the enumeration's attributes. Relationships: Contains: Can contain multiple AttributeEnum instances.  ","version":"Next","tagName":"h3"},{"title":"AttributeEnum​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#attributeenum","content":" Description: Represents a single attribute within an enumeration.Attributes: name: The name of the enumeration value.fullName: An optional string specifying the full name of the enumeration value.  ","version":"Next","tagName":"h3"},{"title":"Relation (Abstract Class)​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#relation-abstract-class","content":" Description: An abstract class representing relationships between entities. Specific types of relationships (OneToOne, OneToMany, ManyToOne, ManyToMany) inherit from this class.  OneToOne​  Description: Represents a one-to-one relationship between two entities.Attributes: name: The name of the relationship.type: A reference to the related Entity.fullName: An optional string specifying the full name of the relationship.  OneToMany​  Description: Represents a one-to-many relationship between two entities.Attributes: name: The name of the relationship.type: A reference to the related Entity.fullName: An optional string specifying the full name of the relationship.  ManyToOne​  Description: Represents a many-to-one relationship between two entities.Attributes: name: The name of the relationship.type: A reference to the related Entity.fullName: An optional string specifying the full name of the relationship.  ManyToMany​  Description: Represents a many-to-many relationship between two entities.Attributes: name: The name of the relationship.type: A reference to the related Entity.fullName: An optional string specifying the full name of the relationship.by: An optional reference to a LocalEntity that mediates the relationship.  ","version":"Next","tagName":"h3"},{"title":"QualifiedName​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#qualifiedname-1","content":" Description: Represents a qualified name used to uniquely identify elements within the system. It typically follows the format ID(.ID)*, allowing for hierarchical naming.Attributes: id: A string representing the qualified name, composed of one or more identifiers separated by dots (e.g., com.example.project).  ","version":"Next","tagName":"h3"},{"title":"Comment​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#comment-1","content":" Description: Represents a comment within the grammar, providing additional context or explanations for modules or other elements.Attributes: content: A string containing the comment text.  ","version":"Next","tagName":"h3"},{"title":"UseCase​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#usecase-1","content":" This class diagram focuses on the Actor and UseCase elements defined in your SPARK grammar. It includes related classes such as Entity, QualifiedName, and Comment to fully represent the structure and relationships within your metamodel.    ","version":"Next","tagName":"h2"},{"title":"Actor​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#actor-1","content":" Description: Represents an actor within the system, typically a user or external system that interacts with use cases.Attributes: name: A QualifiedName that uniquely identifies the actor.entity: An Entity that the actor is associated with.superType: An optional reference to another Actor that this actor extends. Relationships: Is: Each Actor is associated with one Entity.Extends: An Actor can optionally extend another Actor, establishing an inheritance relationship.  ","version":"Next","tagName":"h3"},{"title":"UseCase​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#usecase-2","content":" Description: Represents a use case within the system, defining a specific functionality or behavior that actors can perform.Attributes: name: A QualifiedName that uniquely identifies the use case.superType: An optional reference to another UseCase that this use case extends.fullName: A string representing the full name of the use case.kind: An enumeration (Kind) indicating the type of use case (manage or view).performed: A collection of Actor instances that perform this use case.models: A collection of Entity instances that are involved in this use case.extend: An optional collection of UseCase instances that this use case extends.include: An optional collection of UseCase instances that this use case includes. Relationships: Extends: A UseCase can optionally extend another UseCase, establishing an inheritance relationship.Includes: A UseCase can optionally include other UseCase instances.Performed By: A UseCase is performed by one or more Actor instances.Models: A UseCase involves one or more Entity instances.  ","version":"Next","tagName":"h3"},{"title":"Entity​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#entity-2","content":" Description: An interface implemented by various entity classes (LocalEntity, ImportedEntity, etc.). Represents any entity within the system.Attributes: None (serves as a marker interface).Relationships: Implemented By: Actor implements the Entity interface.  ","version":"Next","tagName":"h3"},{"title":"QualifiedName​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#qualifiedname-2","content":" Description: Represents a qualified name used to uniquely identify elements within the system. Typically follows the format ID(.ID)*, allowing for hierarchical naming.Attributes: id: A string representing the qualified name, composed of one or more identifiers separated by dots (e.g., com.example.project).  ","version":"Next","tagName":"h3"},{"title":"Kind (Enumeration)​","type":1,"pageTitle":"Metamodel","url":"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel#kind-enumeration","content":" Description: Defines the type of use case.Values: manageview ","version":"Next","tagName":"h3"},{"title":"Back-end Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/backend_architeture","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"Back-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/backend_architeture#overview","content":" The generators, written in TypeScript, create the code, files, and folder structure for back-end applications in different languages.  Each language has a main generator that orchestrates the creation of the folder structure and calls the specific generators for each part of the application.    ","version":"Next","tagName":"h2"},{"title":"Generators by Language​","type":1,"pageTitle":"Back-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/backend_architeture#generators-by-language","content":" ","version":"Next","tagName":"h2"},{"title":"C#​","type":1,"pageTitle":"Back-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/backend_architeture#c","content":" The architecture for C# follows the Clean Architecture pattern.  └── backend/csharp/ └── clean-architecture-custom/ ├── project-generator.ts ├── Application/ │ ├── project-generator.ts │ └── generate.ts ├── Domain/ │ ├── project-generator.ts │ └── generate.ts ├── Infrastructure/ │ ├── project-generator.ts │ └── generate.ts └── WebAPI/ ├── project-generator.ts └── Controllers/ └── generate.ts   Generator Organization​  Main Generator: Creates the main solution file (.sln) which references the project files for the Domain, Application, Infrastructure, and WebAPI layers. Domain: Defines the business rules and entities. The project-generator.ts file creates the .csproj for the Domain layer. It includes references to NuGet packages such as EmailValidation, Flunt, and Serilog. Application: Contains the use cases and services. The project-generator.ts generates the .csproj for the Application layer. It references the Domain layer and includes packages like AutoMapper, DocsBRValidator, MediatR, and FluentValidation. Infrastructure: Provides implementation details for services defined in Domain and Application. Its project-generator.ts creates the .csproj and includes packages such as Microsoft.EntityFrameworkCore.SqlServer and SendGrid. WebAPI: Entry point for the application. The generate.ts in the Controllers directory generates the C# controllers (CRUD and other use cases).    ","version":"Next","tagName":"h3"},{"title":"Java​","type":1,"pageTitle":"Back-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/backend_architeture#java","content":" The architecture for Java uses the Spring Boot framework.  . └── backend/ └── java/ └── generator.ts   Generator Organization​  Main Generator: The generator.ts file is the entry point for Java code generation. It creates the target directory and then calls the specific generator function for Spring Boot to create the project.    ","version":"Next","tagName":"h3"},{"title":"Python​","type":1,"pageTitle":"Back-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/backend_architeture#python","content":" The architecture for Python uses the Django framework.  └── backend/ └── python/ └── generator.ts   Generator Organization​  Main Generator: The generator.ts file is the entry point for Python code generation. It creates the target directory and then calls the specific generator function for Django to create the project. ","version":"Next","tagName":"h3"},{"title":"Artifact Mapper","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map","content":"","keywords":"","version":"Next"},{"title":"Configuration Files (root)​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#configuration-files-root","content":" Artifact\tType\tDescription.browserslistrc\tConfiguration\tDefines browser support for build/transpilation. .editorconfig\tConfiguration\tCode style rules for editors. .env.dev\tConfiguration\tEnvironment variables for development. .gitignore\tConfiguration\tFiles/folders ignored by Git. package.json / package-lock.json\tDependencies\tDefines project dependencies and scripts. tsconfig.*.json\tTypeScript Config\tTypeScript compilation settings. vite.config.mts\tBuild Config\tVite bundler configuration. index.html\tBase Document\tMain HTML where the Vue app is mounted. components.d.ts / env.d.ts\tGlobal Typings\tGlobal TypeScript type definitions.    ","version":"Next","tagName":"h2"},{"title":"public/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#public","content":" Artifact\tType\tDescriptionfavicon.png\tStatic\tWebsite favicon. assets/images/\tStatic\tPublic images directly accessible.    ","version":"Next","tagName":"h2"},{"title":"src/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#src","content":" ","version":"Next","tagName":"h2"},{"title":"Main Files​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#main-files","content":" Artifact\tType\tDescriptionApp.vue\tVue Root\tRoot component of the application. main.ts\tEntry\tApplication entry point (mounts App and initializes plugins).  ","version":"Next","tagName":"h3"},{"title":"api/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#api","content":" Artifact\tType\tDescription*.ts\tServices\tInterfaces for API access (HTTP requests).  ","version":"Next","tagName":"h3"},{"title":"assets/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#assets","content":" Artifact\tType\tDescriptionlogo.png/svg\tStatic\tApplication logos. style.css\tStylesheet\tGlobal styles.  ","version":"Next","tagName":"h3"},{"title":"components/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#components","content":" Artifact\tType\tDescriptionCard.vue, DataTable.vue…\tUI Reusable\tGeneric reusable UI components. icons/\tUI\tCustom icons. sidenav/\tUI\tSidebar navigation components.  ","version":"Next","tagName":"h3"},{"title":"layouts/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#layouts","content":" Artifact\tType\tDescriptionDefault.vue, Plain.vue…\tLayouts\tPage skeletons (layout templates).  ","version":"Next","tagName":"h3"},{"title":"modules/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#modules","content":" Domain-specific modules (follow the same structure):  Folder / Artifact\tType\tDescriptionapi/\tServices\tAPI consumption for the entity. controllers/\tControllers\tBusiness/control logic of the entity. routes/\tNavigation\tRoutes for the entity. types/\tTypes\tType/interface definitions for the entity. views/\tViews\tPages for the entity (Create, List).  ","version":"Next","tagName":"h3"},{"title":"plugins/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#plugins","content":" Artifact\tType\tDescriptionpinia.ts\tPlugin\tState management configuration (Pinia). router.ts\tPlugin\tRouter configuration. vuetify.ts\tPlugin\tVuetify UI framework configuration. index.ts\tCentral\tCentral export point for plugins.  ","version":"Next","tagName":"h3"},{"title":"routes/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#routes","content":" Artifact\tType\tDescriptionindex.ts\tRoutes\tGlobal route definitions.  ","version":"Next","tagName":"h3"},{"title":"stores/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#stores","content":" Artifact\tType\tDescriptionauth.ts\tGlobal State\tAuthentication state management. ui.ts\tGlobal State\tUI state management (theme, navigation, etc.).  ","version":"Next","tagName":"h3"},{"title":"types/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#types","content":" Artifact\tType\tDescriptionui.ts\tTypes\tGlobal application types.  ","version":"Next","tagName":"h3"},{"title":"utils/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#utils","content":" Artifact\tType\tDescriptionregras.ts\tUtility\tHelper functions and business rules.  ","version":"Next","tagName":"h3"},{"title":"views/​","type":1,"pageTitle":"Artifact Mapper","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/artifact_map#views","content":" Artifact\tType\tDescriptionLogin.vue\tPage\tAuthentication page. ","version":"Next","tagName":"h3"},{"title":"Django Project Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Python","content":"","keywords":"","version":"Next"},{"title":"Layered Architecture​","type":1,"pageTitle":"Django Project Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Python#layered-architecture","content":"   The project follows a modular, domain-driven layered architecture. This structure facilitates the separation of responsibilities, system scalability, and ease of maintenance and testing. Below, we detail each layer and component with examples of their responsibilities.  ","version":"Next","tagName":"h2"},{"title":"Domain Layer — apps/moranguinho/​","type":1,"pageTitle":"Django Project Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Python#domain-layer--appsmoranguinho","content":" This folder represents a Django application specific to a system domain: the management of farmers and properties. Each functionality related to this domain is grouped here, promoting modularity and functional cohesion.  models.py — Data Models​  The models represent the core entities of the system, such as Farmer and Property. Each model is linked to a database table, and its attributes reflect the table's columns. Business rules related to data behavior may also be included here.  api_views.py — API Controllers​  This file contains the interfaces that handle REST API requests. These controllers receive user requests, delegate logic to appropriate layers, and return responses. Examples include listing farmers, creating properties, and updating records.  serializers.py — Serialization and Validation​  Serializers convert Python objects into formats like JSON and handle both automatic and custom data validation. They act as an intermediary between database records and user-facing responses.  pagination.py, utils.py, signals.py — Supporting Features​  pagination.py: Manages pagination of list views.utils.py: Contains reusable utility functions (e.g., formatting, calculations).signals.py: Handles automatic actions triggered by events (e.g., creation of a new farmer).  test/ and features/ — Testing Layer​  test/: Contains unit and integration tests for component isolation.features/: Stores behavior-driven development (BDD) tests using Gherkin to simulate user behavior.  migrations/ — Database Version Control​  This folder includes Django migration files that track changes to the database schema over time, enabling safe evolution of the data model.  ","version":"Next","tagName":"h3"},{"title":"Global Project Settings — morango/​","type":1,"pageTitle":"Django Project Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Python#global-project-settings--morango","content":" This directory contains the core configuration files of the Django project.  settings.py: Defines project-wide settings such as database configuration, installed apps, middleware, and REST framework settings.urls.py: Defines main routes for the API and Django admin panel.wsgi.py and asgi.py: Handle communication between web servers and the application.    ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"Django Project Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Python#references","content":" Django Official DocumentationDecoding DDD: A Three-Tiered Approach to Django Projects – DjangoCon US    ","version":"Next","tagName":"h2"},{"title":"Improvement Points​","type":1,"pageTitle":"Django Project Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Python#improvement-points","content":" Project with growth potential: Split the moranguinho app into multiple smaller apps, such as farmers, properties, and reports. Each app would target a specific subdomain, improving maintenance, cohesion, and testability. ","version":"Next","tagName":"h2"},{"title":"Front-end Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/frontend","content":"","keywords":"","version":"Next"},{"title":"Generators​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/frontend#generators","content":" The generators, in TypeScript, creates the code, the files and the folders of the frontend.  The generators are organized acordingly with what they create.  The generators on the superiors parts create the structure and call the generators in the level below them. This generators will create a specific part of the code and the respective files and/or will create other folders and call their respective generators.  ","version":"Next","tagName":"h2"},{"title":"Generator's Organization​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/frontend#generators-organization","content":" ","version":"Next","tagName":"h2"},{"title":"Main Generator​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/frontend#main-generator","content":" Creates the App.vue and configuration files. Vue's main file.Calls the router (src/router). Creates the public folder.Creates the src folder.  ","version":"Next","tagName":"h3"},{"title":"frontend/public​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/frontend#frontendpublic","content":" Defines the public assets for the project, like the favicon image, but still nothing really substantial.  ","version":"Next","tagName":"h3"},{"title":"frontend/src​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/frontend#frontendsrc","content":" Folder with multiple subfolders. Each subfolder is responsible for part of the frontend components.  Api: Defines and manage same API features, like axios, vite token and admin interceptors. Assets: Defines the main style used in pages (tailwind) and same image files. Components: Defines the main components, like datatables, cards and sidenavs. Layouts: Defines the components disposition on the screen. Modules: Defines the work of mainly generated entitities, proving routes, stores, controllers, API's, views, in order to provides CRUD operations. Plugins: Imports Vuetify to style the components and define the default theme. Routes: Defines the routes for homepage, login, etc. Stores: Makes the user configurations (e.g.: authentication, followers, posts) and manage UI elements, as snackbars. Types: Defines password validation rules. Utils: Defines password validation rules. Views: Defines a simple Login page to aplication. ","version":"Next","tagName":"h3"},{"title":"C# Minimal API Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API","content":"","keywords":"","version":"Next"},{"title":"Layered Architecture​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#layered-architecture","content":" The backend follows a modular layered architecture, organizing components by domain and functionality. Each layer has a defined responsibility, as shown below:    ","version":"Next","tagName":"h2"},{"title":"Presentation Layer​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#presentation-layer","content":" Located in the Webservice/ folder.  Contains the Program.cs file, responsible for configuring and exposing HTTP routes, middlewares (Swagger, CORS, authentication), and app services.Acts as the UI of the API, handling direct interaction with clients.  ","version":"Next","tagName":"h3"},{"title":"Domain Layer​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#domain-layer","content":" Located in the Moranguinho/ folder.  Includes domain-specific logic and models such as Agricultor.cs, Propriedade.cs, and ContextDbFactory.cs.Organizes code by feature, improving maintainability and separation of concerns.  ","version":"Next","tagName":"h3"},{"title":"Shared Layer​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#shared-layer","content":" Located in the Shared/ folder.  Provides cross-cutting utilities and shared components like models, enums, and helper classes.Contains the ContextDb/ subfolder, which handles database access using EF Core (Entity Framework Core).  This structure enables a clean separation between domain logic, infrastructure, and service exposure.    ","version":"Next","tagName":"h3"},{"title":"Main Folders​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#main-folders","content":" ","version":"Next","tagName":"h2"},{"title":"Webservice​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#webservice","content":" Service exposure layer of the application.  Program.cs​  Initializes and configures the Minimal API app, sets up services, middlewares, and routes.  Endpoints and Middleware​  Responsible for exposing routes to external consumers, including Swagger setup, CORS policy, and authentication (if applicable).    ","version":"Next","tagName":"h3"},{"title":"Moranguinho​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#moranguinho","content":" Represents the core domain logic.  Agricultor.cs​  Defines the Agricultor entity and related domain logic.  Propriedade.cs​  Represents the Propriedade entity, modeling the domain structure for rural properties.  ContextDbFactory.cs​  A factory class used to instantiate the DbContext, especially useful for dependency injection or testing scenarios.    ","version":"Next","tagName":"h3"},{"title":"Shared​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#shared","content":" Shared resources and infrastructure.  ContextDb/​  Contains:  DbContext definition used by EF CoreEntity configurations and model mappingsResponsible for database interaction (CRUD operations, migrations, etc.)  Used across the entire application to maintain a centralized and consistent data access approach.    ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#references","content":" https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apishttps://www.infoq.com/articles/minimal-api-dotnet6/https://learn.microsoft.com/en-us/ef/core/    ","version":"Next","tagName":"h2"},{"title":"Improvement Points​","type":1,"pageTitle":"C# Minimal API Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Minimal-API#improvement-points","content":" Add Service Layer (optional): Including a service layer between endpoints and domain classes could improve the separation of business logic.Program.cs too big: Create the service layer, and routes configurations ","version":"Next","tagName":"h2"},{"title":"Java Spark Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java","content":"","keywords":"","version":"Next"},{"title":"Layered Architecture​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#layered-architecture","content":" Backend development in Java was structured in layers, organizing the system in hierarchies, each with its own responsibilities. The division was made as follows:    ","version":"Next","tagName":"h2"},{"title":"Data Layer​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#data-layer","content":" Responsible for entities and repositories (entity/ folder).  ","version":"Next","tagName":"h3"},{"title":"Application/API Layer​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#applicationapi-layer","content":" Includes controllers and exposed services (webservice/ folder).  This structure facilitated maintenance, testability, and the reuse of components.    ","version":"Next","tagName":"h3"},{"title":"Main Folders​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#main-folders","content":" ","version":"Next","tagName":"h2"},{"title":"Entity​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#entity","content":" models/​  Contains Java classes corresponding to entities defined in the .spark file (e.g., Agricultor, Propriedade). These entities reflect database tables and include JPA annotations.  repositories/​  Database access interfaces such as AgricultorRepository.java, which extend JpaRepository and are used for queries.  sql/​  SQL scripts useful for data replication setup and database constraint creation.  register/​  Stores project metadata, such as the morango-register.json file, which registers information about created modules and entities.  resources/​  Application configuration files such as application.properties, containing Spring Boot configurations.  ","version":"Next","tagName":"h3"},{"title":"Webservice​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#webservice","content":" Service exposure layer of the application. This is where application logic interfaces with the outside world (frontend or API consumers).  application/​  Contains the Application.java class that initializes the Spring Boot project.  controllers/​  REST/GraphQL controllers generated for each entity. Handle requests and define endpoints.  records/​  DTOs (Data Transfer Objects), which carry input and output data of the API. Example: AgricultorInput.java.  repositories/​  Serve as adapters between controllers and domain-layer repositories.  resources/graphql/​  Contains the schema.graphqls file, which defines the types, queries, and mutations of the GraphQL API, based on the entities defined in the .spark file.    ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#references","content":" https://www.alura.com.br/artigos/padroes-arquiteturais-arquitetura-software-descomplicadahttps://jeziellago.medium.com/padr%C3%B5es-de-arquitetura-de-software-parte-i-a1d23c323a40    ","version":"Next","tagName":"h2"},{"title":"Improvement Points​","type":1,"pageTitle":"Java Spark Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Java#improvement-points","content":" Better naming of web repositories: AgricultorRepositoryWeb.java can be confused with AgricultorRepository.java. More specific names like AgricultorGraphQLAdapter would prevent such issues we encountered during analysis.Creation of a service layer: Adding an intermediate layer between controllers and repositories with pure business logic would increase separation of concerns. ","version":"Next","tagName":"h2"},{"title":"Clean Architecture Csharp","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean","content":"","keywords":"","version":"Next"},{"title":"Layered Architecture​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#layered-architecture","content":" The project follows Clean Architecture principles, with independent layers that isolate business rules, application logic, infrastructure, and user interface. Each layer only depends on the one below it, enabling low coupling and high cohesion.    ","version":"Next","tagName":"h2"},{"title":"Domain Layer — Moranguinho.Domain​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#domain-layer--moranguinhodomain","content":" This layer represents the core domain of the system, containing entities, business rules, and fundamental contracts.  Entities/ — Domain Entities​  Contains core entities like Agricultor, Propriedade, etc. Each entity encapsulates specific business behavior such as CPF validation or property area constraints.  Enums/ — Enumerations​  Defines fixed types used in the domain, contains baseEnum.cs.  Interfaces/ — Repository/Service Contracts​  Defines interfaces like IAgricultorRepository, IValidadorPropriedade, enabling dependency inversion and isolated testing.  Validation/ — Validation Rules​  Contains specific validation rules applied directly to entities or value objects.  Common/ — Abstractions and Utilities​  Base classes like BaseEntity, can contain abstractions and utilities.    ","version":"Next","tagName":"h3"},{"title":"Application Layer — Moranguinho.Application​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#application-layer--moranguinhoapplication","content":" Responsible for orchestrating system use cases and bridging presentation and domain layers.  UseCase/ — Use Cases​  Implements application processes like CriarAgricultor, BuscarPropriedadePorId, etc. Receives DTOs from the API and interacts with the domain and repositories. Example: BaseCase.cs.  Services/ — Application Services​  Auxiliary services used by use cases, such as productivity calculations or mapping utilities. Example: BaseService.cs, AgricultorService.cs.  DTOs/ — Data Transfer Objects​  Input and output objects for the application. Example folders: Request/, Response/, and Common/. Files: AgricultorRequest.cs, PropriedadeResponse.cs, etc.  Mappers/ — Object Converters​  Converts between domain entities and DTOs. Manual mapping used in files like AgricultorMapper.cs, PropriedadeMapper.cs.  Interfaces/ — Infrastructure Contracts​  Interfaces for services such as email sending, authentication, and repositories. Implemented in the Infrastructure layer.  Security/ — Security Abstractions​  Rules and contracts for authentication/authorization.  Configuration/ServiceExtensions.cs​  Registers all application services and configurations in the DI container.    ","version":"Next","tagName":"h3"},{"title":"Infrastructure Layer — Moranguinho.Infrastructure​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#infrastructure-layer--moranguinhoinfrastructure","content":" Contains concrete implementations of services and repositories, integrating with external systems like databases, security, etc.  Context/AppDbContext.cs​  EF Core DbContext implementation responsible for database access and entity mappings.  EntitiesConfiguration/​  Fluent API configuration for database mapping. Example: AgricultorConfiguration.cs, PropriedadeConfiguration.cs.  Repositories/​  Implements repositories defined in the domain. Examples: AgricultorRepository.cs, PropriedadeRepository.cs, and base implementations in Common/.  Security/​  Concrete implementations for security concerns, such as UserRepository.cs, RoleRepository.cs under Security/Repositories/.  ServiceExtensions.cs​  Registers infrastructure-level services into the DI container.    ","version":"Next","tagName":"h3"},{"title":"Presentation Layer — Moranguinho.WebAPI​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#presentation-layer--moranguinhowebapi","content":" The system's HTTP entry point, where requests arrive and are translated into application commands.  Controllers/​  Exposes API endpoints like POST /agricultores, GET /propriedades. Controllers: AgricultorController.cs, PropriedadeController.cs.  Extensions/​  Configuration for middleware, CORS, Swagger, authentication, etc. Files include JwtExtension.cs, CorsPolicy.cs, OData.cs.  Program.cs​  Application bootstrap file. Initializes the host, configures services, and defines the HTTP pipeline.  appsettings.json​  Configuration file for database connections, JWT keys, CORS, and API settings.  Scripts/​  Utility SQL scripts such as delete.sql, killdatabase.sql for local development or test resets.    ","version":"Next","tagName":"h3"},{"title":"Testing Layer — Moranguinho.Domain.Test and Moranguinho.Infrastructure.Test​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#testing-layer--moranguinhodomaintest-and-moranguinhoinfrastructuretest","content":" Dedicated layers for automated tests.  Moranguinho.Domain.Test​  Unit tests for domain entities and business rules. Focused on validation, behavior, and isolated logic. Files: AgricultorTest.cs, PropriedadeTest.cs.  Moranguinho.Infrastructure.Test​  Integration tests for repository behavior using EF InMemory. Files in Repositories/: AgricultorRepositoryTest.cs, PropriedadeRepositoryTest.cs. Includes appsettings.json and xunit.runner.json for test environment setup.  Testing framework: xUnit.    ","version":"Next","tagName":"h3"},{"title":". References​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#-references","content":" .NET - Usando a Clean Architecture - Jose Carlos MacorattiGithub CleanArchitecture - jasontaylordevGithub Clean Architecture Template - amantinband    ","version":"Next","tagName":"h2"},{"title":". Improvement Points​","type":1,"pageTitle":"Clean Architecture Csharp","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/backend/generated_arch/Csharp_Clean#-improvement-points","content":" Clearer Layer Separation: Ensure distinct responsibilities for each layer, avoiding overlap of concerns between the Application, Domain, and Infrastructure layers. Use of AutoMapper: Implement AutoMapper or similar libraries to simplify and automate the mapping between domain entities and DTOs, reducing boilerplate code and improving maintainability. ","version":"Next","tagName":"h2"},{"title":"Front-end Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/frontend_architecture","content":"","keywords":"","version":"Next"},{"title":"Generators​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/frontend_architecture#generators","content":" The generators, in TypeScript, creates the code, the files and the folders of the frontend.  The generators are organized acordingly with what they create.  The generators on the superiors parts create the structure and call the generators in the level below them. This generators will create a specific part of the code and the respective files and/or will create other folders and call their respective generators.  ","version":"Next","tagName":"h2"},{"title":"Generator's Organization​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/frontend_architecture#generators-organization","content":" ","version":"Next","tagName":"h2"},{"title":"Main Generator​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/frontend_architecture#main-generator","content":" Creates the App.vue and configuration files. Vue's main file.Calls the router (src/router). Creates the public folder.Creates the src folder.  ","version":"Next","tagName":"h3"},{"title":"frontend/public​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/frontend_architecture#frontendpublic","content":" Defines the public assets for the project, like the favicon image, but still nothing really substantial.  ","version":"Next","tagName":"h3"},{"title":"frontend/src​","type":1,"pageTitle":"Front-end Architecture","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/frontend_architecture#frontendsrc","content":" Folder with multiple subfolders. Each subfolder is responsible for part of the frontend components.  Api: Defines and manage same API features, like axios, vite token and admin interceptors. Assets: Defines the main style used in pages (tailwind) and same image files. Components: Defines the main components, like datatables, cards and sidenavs. Layouts: Defines the components disposition on the screen. Modules: Defines the work of mainly generated entitities, proving routes, stores, controllers, API's, views, in order to provides CRUD operations. Plugins: Imports Vuetify to style the components and define the default theme. Routes: Defines the routes for homepage, login, etc. Stores: Makes the user configurations (e.g.: authentication, followers, posts) and manage UI elements, as snackbars. Types: Defines password validation rules. Utils: Defines password validation rules. Views: Defines a simple Login page to aplication. ","version":"Next","tagName":"h3"},{"title":"Motivation","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/componentBasedArchitecture","content":"Before proceeding with the explanation of the specific architectures implemented, we must introduce the component-based architecture. Motivation In the early days of the internet, web applications and websites were developed in a static manner, meaning with little to no dynamically generated pages. The holy trinity—Hypertext Markup Language (HTML), Cascading Style Sheets (CSS), and JavaScript (JS)—was not used with the concern that it should update on its own without the need for server-side preprocessing of the pages. Therefore, languages like Hypertext Preprocessor (PHP) were used in monolithic structures, linking the frontend with the database through preprocessing. As time passed, the internet grew in importance, and many devices, particularly smartphones, needed to access it. Due to differences in screen sizes and compatibility, in order for a person using a mobile device to access a website with quality, it was often necessary to reimplement parts of the business logic in the responsive modules of the system, greatly increasing development costs. Thus, a migration process began from the monolithic structure to the separation of the frontend and backend, where the latter is mostly configured as a REST API. With the formal division between backend and frontend, the creation of responsiveness for a website to work on both computers and mobile devices no longer influences business logic; everything is contained in a single place. There are various ways to develop a frontend, and due to the difficulty of working solely and exclusively with the holy trinity, there was still a need for preprocessing HTML. Additionally, pure HTML, CSS, and JS do not provide built-in, easy-to-use tools for code reuse. Therefore, there was a need for a resource or concept to address all of the aforementioned issues. Components: One of the Possible Solutions Several proposals have been made to meet the demands of frontend development. One of the most successful is the use of components. It’s hard to say which tool implemented this feature first, but one of the most influential frameworks to adopt a component-based structure was React, which is still widely used today. Many other frameworks that came after React, such as Vue, Angular, and Next, also implement components, and all follow a very similar architecture. For this reason, we need to first understand the architecture from a general perspective before diving into specifics. What is a Component? A component is essentially a reusable piece of code that expands into HTML within another section of HTML. This feature is typically implemented through an abstraction of HTML that is preprocessed and then returned as raw HTML. Let’s take React as an example. In React, components are defined as the return value of a function, and that return is typically a string (or a JSX structure) containing HTML tags. Once a component function is defined, it can be imported into another file and used as if it were a native HTML tag within the return of another component. Here’s a code example: File1.jsx const ComponentName = () =&gt; { return ( &lt;&gt; &lt;span&gt;Hello World 1&lt;/span&gt; &lt;span&gt;Hello World 2&lt;/span&gt; &lt;/&gt; ); }; export default ComponentName; File2.jsx import ComponentName from &quot;path/to/component/File1.jsx&quot;; const OtherComponent = () =&gt; { return ( &lt;&gt; &lt;ComponentName /&gt; &lt;/&gt; ); }; Resulting HTML &lt;span&gt;Hello World 1&lt;/span&gt; &lt;span&gt;Hello World 2&lt;/span&gt; This is how HTML is used in React. Now notice — every HTML code in React is used in the form of a component, meaning everything is a component. Despite that, there is an informal division among components. Typically, the term component refers to a piece of code that is reused across multiple parts of the project. However, there are also components that serve a specific, single purpose. These specific components are commonly referred to as pages, templates, or views — depending on the author’s preference. Generalizing the Architecture With the foundational understanding of component-based architecture, all other architectures will generally follow a similar pattern regardless of the framework used. Typically, there is one folder for reusable components and another for pages, both located within a larger folder that contains the main source code files (usually named src in frameworks based on NodeJS). In addition, there is always some form of HTML abstraction and a way to import components into one another. Other functionalities, such as route configuration, API communication, and so on, are more flexible—although there are common implementation patterns and recommendations, they are not strictly defined.","keywords":"","version":"Next"},{"title":"Attention, Legacy Page","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy","content":"","keywords":"","version":"Next"},{"title":"1.1 Vue VS Vuetify VS Vite​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#11-vue-vs-vuetify-vs-vite","content":" The generated frontend relies on the participation of three main frameworks: Vue, Vuetify, and Vite.  Vue is the primary framework, meaning it is the most important in this list. It is responsible for component management, HTML preprocessing, object reactivity control, and more. Other frameworks and libraries can emerge from Vue, each serving a specific purpose.  Vuetify is one of these tools that emerge from Vue. It is essentially a collection of ready-to-use, reusable components, complete with a set of properties and useful features.  Lastly, Vite is an external tool used to optimize the development and build process of the project. With Vite, when editing code, a hot update is performed in real-time, applying only the changes made, which speeds up the development process. Additionally, when building the project, the site is optimized by Vite.    2. The Architecture    The project is divided into three layers: src, public, and cypress.  The public layer contains static files used in development.The cypress layer is responsible for containing the code that generates the basic pages for each entity — currently, it includes pages for listing, viewing, updating, creating, and deleting entities.The src folder contains the actual page files and scripts — the core of the frontend.  2.1 Src Folder    ","version":"Next","tagName":"h2"},{"title":"2.2 Router​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#22-router","content":" The router folder contains the configuration for the vue-router extension, which is responsible for managing the frontend endpoints. Currently, it has a single file that centralizes all the application's routes, but it is possible to break it up into separate files for smaller files and better organization.  ","version":"Next","tagName":"h2"},{"title":"2.3 Views​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#23-views","content":" This layer is responsible for containing the application's page components. Within it, there is a subdivision based on the packages defined in the Spark model. Inside each package, the defined entities have separate folders, each containing the reference files IndexEntity.vue, FormIndex.vue, and DetailsIndex.vue. These pages, together, automatically enable the basic operations for each entity (CRUD). The view layer can also consume the SCSS layer directly.  ","version":"Next","tagName":"h2"},{"title":"2.5 Service plus Composition​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#25-service-plus-composition","content":" The service layer is responsible for managing the HTTP requests from the frontend. With the help of a Factory, a series of EntityRequires files are created, each generating a set of requests defined in the composition/usesApi.ts file — including create, update, remove, list, and getById. In each EntityRequires, the basic endpoint URL for the entity's operations is hardcoded, which is then combined by the factory with the base URL of the API (the backend URL).  ","version":"Next","tagName":"h2"},{"title":"2.6 Components​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#26-components","content":" The components layer is intended to store components that can be reused across multiple pages. Currently, a Breadcrumbs component is generated, which helps the user navigate the site, indicating the navigation path at the top of the screen and providing a sidebar for navigation.    Image 7: Frontend Example. At top screen, the Breadcrumbs component.  ","version":"Next","tagName":"h2"},{"title":"2.7 SCSS and Layouts​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#27-scss-and-layouts","content":" The SCSS folder stores SCSS files (a variant of CSS) for custom styles that are shared across pages when needed. The layouts layer, on the other hand, contains configuration for the layout of certain elements throughout the application. As an example, the sidebar configuration is handled internally within the layouts folder. It can also be used to manage responsive behavior across the application.  ","version":"Next","tagName":"h2"},{"title":"2.8 Utils​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#28-utils","content":" The utils folder contains scripts that are used in various parts of the code but do not belong to a specific context. Simple functions for text manipulation or global configurations reside in the utils folder.  ","version":"Next","tagName":"h2"},{"title":"2.9 Plugins​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#29-plugins","content":" The plugins folder contains the configuration of external plugins used in the application. In this case, only Vite is used, so it is the only one present in this folder. Any new external plugin configurations should be added here.  ","version":"Next","tagName":"h2"},{"title":"2.10 Stores​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#210-stores","content":" The stores layer is responsible for storing configurations locally in the client's browser. For example, authentication cookie settings are handled here.  ","version":"Next","tagName":"h2"},{"title":"2.11 Theme​","type":1,"pageTitle":"Attention, Legacy Page","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/frontend/generated_arch/vuePlusVuetfy#211-theme","content":" The theme layer contains the application's color configuration. It is loaded by Vue itself and applies color styling across all layers of the application.  3. Suggestions for Improvements:  The view files are very large. In a single file, both interface control and entity manipulation are handled. It is preferable that for each page, a corresponding script be created to handle the entities, and the .vue file should deal only with the interface.  The routes file is very large. It would be better to create a folder for each module, and each entity should have its own routes file to make searching and reading easier.  The pages make little use of request interface definitions from each other. It would be better to have a layer to centralize the Data Transformation Objects from requests into JS objects.  Request handling is being done in a decentralized manner. It would be better to have a layer to configure and manage the requests and entities, while the views focus on displaying this data on the screen and calling these actions when necessary. ","version":"Next","tagName":"h2"},{"title":"Overview","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/OverView","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/OverView#features","content":" Automatic generation of Vue Modular frontend project structure.Full Tailwind CSS support.Integration with SEONLibImplementation for project abstraction.Folder and file organization based on frontend development best practices.    ","version":"Next","tagName":"h2"},{"title":"Technologies Used​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/OverView#technologies-used","content":" Vue.js (Modular Architecture)Tailwind CSSSEONLibImplementation (as source of Project Abstraction)    ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/OverView#prerequisites","content":" Have SEONLibImplementation installed and configured.Development environment configured with Node.js, if you wish to run and test the generated projects.    ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"Overview","url":"/leds-tools-public/spark/advanced_concepts/sparklib_advanced/OverView#installation","content":" # Clone this repository git clone https://github.com/guilhermbc/leds-tools-spark-lib.git # Access the project folder cd leds-tools-spark-lib # Install dependencies, if necessary npm install  ","version":"Next","tagName":"h2"},{"title":".spark File","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/how_to_use/file_examples/moranguinho","content":"In free translate, Litle Strawbery .spark File Configuration { software_name: &quot;Morango&quot; about: &quot;Moranguinho!&quot; language: csharp-clean-architecture } module Moranguinho { entity Agricultor{ nome: string identification: cpf email_x: email telefone: string foto: file Agricultor OneToMany Moranguinho.Propriedade } entity Propriedade { nome: string distrito: string } } Class Diagram Output","keywords":"","version":"Next"},{"title":"Language Hierarchy","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/how_to_use/writting_a_file","content":"","keywords":"","version":"Next"},{"title":"The Attribute Item​","type":1,"pageTitle":"Language Hierarchy","url":"/leds-tools-public/spark/basic_concepts/how_to_use/writting_a_file#the-attribute-item","content":" The attribute have the follow semantic:attributeName : &lt;qualifier&gt;  The most important qualifier are types, and it must be the first specified qualifier. After it, you could use to many other qualifiers, like blank, null, etc.  ","version":"Next","tagName":"h2"},{"title":"Attribute Qualifiers - Types Enum​","type":1,"pageTitle":"Language Hierarchy","url":"/leds-tools-public/spark/basic_concepts/how_to_use/writting_a_file#attribute-qualifiers---types-enum","content":" Token\tDescriptionstring\trefers to strings attribute in referenced language integer\trefers to integers attribute in referenced language decimal\trefers to precising decimal representation attribute in referenced language (it could not be float or double) datetime\trefers to date and time attribute in referenced language date\trefers to date attribute in referenced language boolean\trefers to boolean attribute in referenced language uuid\trefers to Universal User Identfier attribute wich depends the tecnology implemented (example, in C# it use UUID class from .NET) email\trefers to email attribute wich depends the tecnology implemented (example, in Python it use EmailField class from Django) cpf\trefers to &quot;Cadastro de Pessoa Física&quot; attribute wich depends the tecnology implemented (example, in Python it use CPFField class from django-cpf-cnpj) [Specific for Brazil] cnpj\trefers to &quot;Cadastro Nacional de Pessoa Jurídica&quot; attribute wich depends the tecnology implemented (example, in Python it use CNPJField class from django-cpf-cnpj) [Specific for Brazil] currency\trefers to monetary manipulation attribute wich depends the tecnology implemented mobilePhoneNumber\trefers to mobile phones number attribute wich depends the tecnology implemented phoneNumber\trefers to landline phones number attribute wich depends the tecnology implemented  ","version":"Next","tagName":"h3"},{"title":"Attribute Qualifiers - Otehrs Enum​","type":1,"pageTitle":"Language Hierarchy","url":"/leds-tools-public/spark/basic_concepts/how_to_use/writting_a_file#attribute-qualifiers---otehrs-enum","content":" Token\tDescriptionunique\trefers to unique attributes; some types, like uuid, it are implict blank\trefers to attributes could be blank null\trefers to attributes could be null  About blank and null​  Some databases technologys, like PostegressSQL and MySQL, diferes null attributes from blank attributes. The most part of REST API frameworks abrating the database technology, so this qualifiers will be passed to it. In other hand, some languages, like javascript, difers undefined from null objects, so the blank modifier will be interpreter as undefined and null will be interpreted as null.  ","version":"Next","tagName":"h3"},{"title":"The Relations Items​","type":1,"pageTitle":"Language Hierarchy","url":"/leds-tools-public/spark/basic_concepts/how_to_use/writting_a_file#the-relations-items","content":" To specify some relations between classes you will need the ManyToOne, OneToMany, OneToOne and ManyToMany keywords. Everyone work's at same. First, set some class reference (it can be from other module to). Next, set some keyword. In the end, specify the other side of relation.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"Language Hierarchy","url":"/leds-tools-public/spark/basic_concepts/how_to_use/writting_a_file#examples","content":" Classes (with attributes and relations)  // Module Desscription module ModuleName { // entity Description entity ClassName { // attribute description attributeName : attributeType ClassName OneToOne ModuleName.AnotherClass } entity AnotherClass { attribute : attributeType enumReference uses MyEnum ClassName ManyToOne AnotherClass } enum MyEnum { op1 op2 op3 } }  ","version":"Next","tagName":"h2"},{"title":"Guide Map","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/anchor","content":"","keywords":"","version":"Next"},{"title":"I Want to Use Spark​","type":1,"pageTitle":"Guide Map","url":"/leds-tools-public/spark/basic_concepts/anchor#i-want-to-use-spark","content":" ","version":"Next","tagName":"h2"},{"title":"Prerequisites​","type":1,"pageTitle":"Guide Map","url":"/leds-tools-public/spark/basic_concepts/anchor#prerequisites","content":" To use Spark, you must know System Analysis, at least class modeling. You can also see the following links:  Internet Text Content: Free Online Course; Books: Systems Analysis and Design (Howard Gould); Portuguese Content: Apostila de Análise de Sistemas;  To understand the Spark-generated architecture, you will need different content for each one...  For MVC-Based Architectures:  Internet Text Content: For Django MVC;For Spring Boot; Portuguese Content: O que é MVC;  For Clean Architecture-Based Architectures:  Book: Clean Architecture: A Craftsman's Guide to Software Structure and Design (Robert Martin); Portuguese Content: Clean Architecture com o Macoratti;  For Minimal API-Based Architectures:  Video Content: Learn Minimal API in C# .NET; Portuguese Content: Aprendendo a Minimal API em C# .NET;  About the frontend: it will generate a LEDS internal architecture, so it will be properly explained in section Front-end Architecture  If you want to understand what REST APIs are, you can also check:  PhD Thesis: Architectural Styles and the Design of Network-based Software Architectures; Internet Text Content: An Introduction to REST APIs.  ","version":"Next","tagName":"h3"},{"title":"Suggested Route​","type":1,"pageTitle":"Guide Map","url":"/leds-tools-public/spark/basic_concepts/anchor#suggested-route","content":" See Overview to understand the Spark principles and objectives;See Installation to install and use Spark;See Writing a File to learn how to write your first &quot;.spark&quot;; andSee File Examples to see example files.  ","version":"Next","tagName":"h3"},{"title":"For Advanced Users​","type":1,"pageTitle":"Guide Map","url":"/leds-tools-public/spark/basic_concepts/anchor#for-advanced-users","content":" See Understanding the Generated Code Architecture to understand the generated code architecture; For the Backend, see the section of the language and architecture you are intested in: For Clean Architecture C#, see Clean Architecture Csharp;For MVC Django Rest Framework Architecture in Python, see Python Architecture;For Minimal API C#, see Minimal API Csharp; andFor MVC Spring-Boot Architecture in Java, see Java Architecture. For the Frontend, made in Vue + Tailwind, as said before, see Front-end Architecture. ","version":"Next","tagName":"h3"},{"title":"First Steps","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/how_to_use/","content":"","keywords":"","version":"Next"},{"title":"Pre-Requisits:​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#pre-requisits","content":" Installed VSCode (any version; dubh).  ","version":"Next","tagName":"h2"},{"title":"Instalation​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#instalation","content":" Open Visual Studio Code;Click on Extensions;Search for &quot;Spark&quot;;Click to install the Spark extension by LEDS IFES; andHave Fun :)  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#features","content":" An integrated gramma validation to .spark files; andSimple access to Backend, Frontend and Project Documentation generation module.  ","version":"Next","tagName":"h2"},{"title":"How to Use​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#how-to-use","content":" Create a .spark file (e.g. my_spark_file.spark);Fill it with your class, packages and specific some project configuration and save it;Click with right mouse button (os api button 2); andSelect option you want (or generate all, or generate backend, or generate frontend or generate documentation).  Using it CLI in Node  ","version":"Next","tagName":"h2"},{"title":"Pre-Requisits​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#pre-requisits-1","content":" Have an good os (no, Windows is not a god os, use WSL instead);NodeJs (recoomend 20.x or better) installed in your machine; andNPM installed in your machine.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#installation","content":" On bash use the following comand: npx install spark-leds-beta.  ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#features-1","content":" Access only to all generation module mode.  ","version":"Next","tagName":"h2"},{"title":"How to Use​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#how-to-use-1","content":" On installed folder (where packages.json are) use the command npx spark-cli generate path/to/.spark/file.  ","version":"Next","tagName":"h2"},{"title":"Output​","type":1,"pageTitle":"First Steps","url":"/leds-tools-public/spark/basic_concepts/how_to_use/#output","content":" A folder named &quot;frontend&quot; with the frontend generated;A folder named &quot;backend&quot; with the backend generated; andA folder named &quot;docs&quot; with the documentation files.  Output Hierarchy Examples   ","version":"Next","tagName":"h2"},{"title":".spark File","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/how_to_use/file_examples/conecta_fapes","content":"","keywords":"","version":"Next"},{"title":"Generated Documentation​","type":1,"pageTitle":".spark File","url":"/leds-tools-public/spark/basic_concepts/how_to_use/file_examples/conecta_fapes#generated-documentation","content":"   ","version":"Next","tagName":"h2"},{"title":"Generated Backend​","type":1,"pageTitle":".spark File","url":"/leds-tools-public/spark/basic_concepts/how_to_use/file_examples/conecta_fapes#generated-backend","content":"   ","version":"Next","tagName":"h2"},{"title":"Generated Frontend​","type":1,"pageTitle":".spark File","url":"/leds-tools-public/spark/basic_concepts/how_to_use/file_examples/conecta_fapes#generated-frontend","content":"  ","version":"Next","tagName":"h2"},{"title":"Tool vs Library Architecture","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib","content":"","keywords":"","version":"Next"},{"title":"Spark Tool (leds-tools-spark)​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#spark-tool-leds-tools-spark","content":" ","version":"Next","tagName":"h2"},{"title":"Purpose​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#purpose","content":" The VS Code extension and CLI interface that provides user interaction and DSL parsing.  ","version":"Next","tagName":"h3"},{"title":"Key Responsibilities​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#key-responsibilities","content":" DSL Parsing: Interprets .Spark files using Langium grammarUser Interface: VS Code extension with syntax highlighting and commandsCLI Interface: Command-line tool for automationIntegration: Connects user input to the processing library  ","version":"Next","tagName":"h3"},{"title":"Core Components​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#core-components","content":" application/ # Domain applications (Project, Team, TimeBox, etc.) language/ # Langium DSL grammar and parser static/ # Monaco Editor UI files cli/ # Command-line interface extension/ # VS Code extension code   ","version":"Next","tagName":"h3"},{"title":"Technologies​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#technologies","content":" Langium: DSL creation and parsingVS Code Extension API: Editor integrationNode.js: CLI and backend processingTypeScript: Type-safe development  ","version":"Next","tagName":"h3"},{"title":"Spark Library (leds-tools-Spark-lib)​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#spark-library-leds-tools-spark-lib","content":" ","version":"Next","tagName":"h2"},{"title":"Purpose​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#purpose-1","content":" The core processing engine that generates documentation, charts, and handles GitHub integration.  ","version":"Next","tagName":"h3"},{"title":"Key Responsibilities​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#key-responsibilities-1","content":" Data Processing: Transforms parsed DSL into actionable data structuresDocumentation Generation: Creates markdown reports and documentationVisualization: Generates SVG charts and dependency diagramsGitHub Integration: Pushes data to GitHub Issues and Projects  ","version":"Next","tagName":"h3"},{"title":"Core Components​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#core-components-1","content":" models/ # Data models (Project, Sprint, Issue, etc.) markdown/ # Documentation generation services chart/ # SVG chart generators (CFD, throughput, dependencies) util/ # Common utilities and helpers service/ # GitHub API integration   ","version":"Next","tagName":"h3"},{"title":"Key Services​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#key-services","content":" MarkdownService: Orchestrates documentation generationGitHubService: Handles GitHub API operationsChartGenerators: Creates visual diagramsDependencyAnalyzer: Analyzes task relationships  ","version":"Next","tagName":"h3"},{"title":"Separation Benefits​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#separation-benefits","content":" ","version":"Next","tagName":"h2"},{"title":"1. Modularity​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#1-modularity","content":" Tool focuses on user interactionLibrary focuses on data processingClear separation of concerns  ","version":"Next","tagName":"h3"},{"title":"2. Reusability​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#2-reusability","content":" Library can be used independentlyMultiple frontends can use the same libraryDifferent deployment scenarios supported  ","version":"Next","tagName":"h3"},{"title":"3. Maintainability​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#3-maintainability","content":" Easier to test individual componentsClear API boundariesIndependent versioning possible  ","version":"Next","tagName":"h3"},{"title":"4. Extensibility​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#4-extensibility","content":" New frontends can be added easilyLibrary features can be extended independentlyPlugin architecture support  ","version":"Next","tagName":"h3"},{"title":"Integration Flow​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#integration-flow","content":"   ","version":"Next","tagName":"h2"},{"title":"Usage Patterns​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#usage-patterns","content":" ","version":"Next","tagName":"h2"},{"title":"Tool-mediated Usage​","type":1,"pageTitle":"Tool vs Library Architecture","url":"/leds-tools-public/spark/basic_concepts/SparkVsSparklib#tool-mediated-usage","content":" # Via CLI spark-cli generate path/to/spark/file # Via VS Code Extension # Right-click &gt; Generate All # Right-click &gt; Generate Backend # Right-click &gt; Generate Frontend # Right-click &gt; Project Documentation   This architecture allows Spark to be both user-friendly through the tool interface and powerful through direct library integration. ","version":"Next","tagName":"h3"},{"title":"What is Spark?","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/overview","content":"","keywords":"","version":"Next"},{"title":"Generated Artifacts​","type":1,"pageTitle":"What is Spark?","url":"/leds-tools-public/spark/basic_concepts/overview#generated-artifacts","content":" Backend: a pseudo REST API integrated with the SWAGGER tool in the following technologies (to be selected): Django Rest Framework + Python, in the Model View Controller architecture;Spring Boot + Java, in the Model View Controller architecture;.NET + C#, in the Minimal API and Clean Architecture architectures (to be selected). Frontend: a pseudo frontend integrated with the Backend using the technologies Node.js + Vue + Tailwind; with Vite as a testing dependency.  In addition, it also generates domain class diagrams using PlantUML along with texts in Markdown and CI/CD structures in GitLab.  ","version":"Next","tagName":"h2"},{"title":"Core Components​","type":1,"pageTitle":"What is Spark?","url":"/leds-tools-public/spark/basic_concepts/overview#core-components","content":" Spark uses a Domain-Specific Language (DSL) that consists of:  Configuration: Configuration and metadata;Package: Package Definition;Etity: Class Definition;enum: Enum Classes Definition; andtypes: Defines types for classes attributes.  ","version":"Next","tagName":"h2"},{"title":"How It Works​","type":1,"pageTitle":"What is Spark?","url":"/leds-tools-public/spark/basic_concepts/overview#how-it-works","content":" Write your project structure in .spark files using the DSL; andUse VS Code extension or CLI to process the files.  ","version":"Next","tagName":"h2"},{"title":"Benefits​","type":1,"pageTitle":"What is Spark?","url":"/leds-tools-public/spark/basic_concepts/overview#benefits","content":" Quicker start on big software projects; andPadronized code structure for backend and frontend code. ","version":"Next","tagName":"h2"},{"title":"Running Locally and Debugging","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug","content":"","keywords":"","version":"Next"},{"title":"Repository and branch​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#repository-and-branch","content":" All steps in this guide are intended to be run inside the LEDs Tools Spark repository on the developing branch:  Repository: https://github.com/leds-org/leds-tools-spark/tree/developing  Clone and check out the correct branch:  git clone https://github.com/leds-org/leds-tools-spark.git cd leds-tools-spark git fetch --all git checkout developing   Then run the following steps from the repository root.  ","version":"Next","tagName":"h2"},{"title":"1. Install Dependencies​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#1-install-dependencies","content":" Install the project dependencies defined in package.json.  npm i   Note: npm i is a shortcut for npm install.  ","version":"Next","tagName":"h2"},{"title":"2. Generate Code from Grammar​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#2-generate-code-from-grammar","content":" Translate your language's grammar (for example, a .langium file) into executable TypeScript. This generates the parser and core language server components.  npm run langium:generate   ","version":"Next","tagName":"h2"},{"title":"3. Compile the Project​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#3-compile-the-project","content":" Compile the entire TypeScript project (generated files + your custom code) into JavaScript so the extension can run.  npm run build   ","version":"Next","tagName":"h2"},{"title":"4. Launch the Development Environment​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#4-launch-the-development-environment","content":" Start a special VS Code instance with your extension loaded.  Press F5  This opens a new window named &quot;Extension Development Host&quot; where your extension is active for testing.  ","version":"Next","tagName":"h2"},{"title":"5. Test Language Features​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#5-test-language-features","content":" In the new VS Code window:  Create a new file using your language's file extension ( example.spark).Start writing code and verify that features work as expected: Syntax Highlighting: keywords, strings, and comments are colored correctly.Validation: errors and warnings are underlined in the editor.Code Completion: suggestions appear as you type (if implemented).  ","version":"Next","tagName":"h2"},{"title":"6. Use the Command-Line Interface (CLI)​","type":1,"pageTitle":"Running Locally and Debugging","url":"/leds-tools-public/spark/basic_concepts/how_to_use/run_and_debug#6-use-the-command-line-interface-cli","content":" The project includes a CLI to interact with your language outside VS Code (useful for code generation and batch processing).  Show available options:  node ./bin/cli   Generate code from a specific DSL file:  node ./bin/cli generate &lt;file&gt;   Example:  node ./bin/cli generate src/example.spark     Tips  If you're on Windows PowerShell, the above npm and node commands work the same.If generation or build fails, re-run step 2 (grammar generation) before building to ensure generated sources are up to date.Use the &quot;Developer: Toggle Developer Tools&quot; command in the Extension Development Host to inspect runtime logs. ","version":"Next","tagName":"h2"},{"title":"I Want to Improve the Spark Code","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/how_to_contribute/","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"I Want to Improve the Spark Code","url":"/leds-tools-public/spark/how_to_contribute/#prerequisites","content":" Here we will specify each major knowledge area you will need to know to improve the code. In each area, there are too many references. You don’t need to get all of them, just choose the ones that work best for you.  For Theoretical Principles, you will need to know about:  Automata Theory: Internet Text Content: Wikipedia, a Great Start;State Machines Reference;Chomsky Hierarchy; Books: Introduction to Automata Theory, Languages, and Computation, third edition (John E. Hopcroft, Rajeev Motwani, and Jeffrey D. Ullman); Video Content: A Complete Introduction to Computation Theory; Portuguese Content: Linguagens Formais e Autômatos, playlist;Linguagens Formais e Autômatos, fifth edition (Paulo Blauth Menezes);Apostila, Linguagens Formais e Autômatos; Domain-Specific Languages (DSL): Internet Text Content: Wikipedia, a Great Start;State Machines Reference; Articles and Papers: Ontology-Driven Development of Domain-Specific Languages; The Abstract Syntax Tree (AST) data structure: Wikipedia, a Great Start;Another Simple Explanation.  In the Technical Area, you will need:  Langium: Internet Text Content: Lib Reference; Object-Oriented Programming: Internet Content: Wikipedia, a Great Start;Advanced Content with Refactoring Guru; Video Content: What is OOP; Portuguese Content: Um bom começo com a Alura;Curso de POO do Gustavo Guanabara; TypeScript: Internet Text Content: Official Documentation;Official Handbook; Video Content: Learn TypeScript in 1 Hour; Portuguese Content: Cursinho de TypeScript.  ","version":"Next","tagName":"h2"},{"title":"Suggested Route​","type":1,"pageTitle":"I Want to Improve the Spark Code","url":"/leds-tools-public/spark/how_to_contribute/#suggested-route","content":" See An Advanced Study to understand the grammar tokens and their uses;See Metamodel to check the grammar metamodel;See Architecture to check the Spark source code architecture;See Library Architecture - Backend to check the library backend scoped architecture;See Library Architecture - Frontend to check the library frontend scoped architecture; ","version":"Next","tagName":"h2"},{"title":"Front-end Team Topology","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology","content":"","keywords":"","version":"Next"},{"title":"👥 Team Topology – SPARK​","type":1,"pageTitle":"Front-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology#-team-topology--spark","content":" ","version":"Next","tagName":"h2"},{"title":"📦 Team: Frontend (Responsible Group)​","type":1,"pageTitle":"Front-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology#-team-frontend-responsible-group","content":" Type: Stream-aligned team Mission: Develop a modern, understandable, and accessible interface for SPARK using Vue.js and Tailwind, enabling better user interaction with the platform. Main Deliverables: Interface built with Vue 3 + TailwindCSSGraphical and interactive visualization of entities and relationshipsIntegration with .spark filesInformative dashboardsClear frontend usage documentation Main Technologies: Vue.js 3TailwindCSSViteGitHub    ","version":"Next","tagName":"h3"},{"title":"🛠️ Collaborating Team: Backend​","type":1,"pageTitle":"Front-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology#️-collaborating-team-backend","content":" Type: Enabling teamRole: Provide technical support to the frontend team regarding the structure and rules of .spark files, data validation, and communication with generated services.    ","version":"Next","tagName":"h3"},{"title":"📚 Documentation​","type":1,"pageTitle":"Front-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology#-documentation","content":" Documentation hosted on DocusaurusDocumentation structure: Project overviewTechnologies usedDISC profiles of team membersBacklogCommunication PlanTeam Topology    ","version":"Next","tagName":"h3"},{"title":"🔄 Collaboration Format​","type":1,"pageTitle":"Front-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology#-collaboration-format","content":" Weekly summaries: Every week, each group posts a summary of what was done, pending tasks, and next steps.Group reviews: Whenever a stage is completed, a collective review will be conducted (async or via call).    ","version":"Next","tagName":"h3"},{"title":"💬 Communication​","type":1,"pageTitle":"Front-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/frontend_teamtopology#-communication","content":" Main channel: Discord (dedicated channel per team)Quick support: WhatsAppTask management: ","version":"Next","tagName":"h3"},{"title":"Back-end Team Envolved","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/backend_disc","content":"","keywords":"","version":"Next"},{"title":"Team DISC Profiles​","type":1,"pageTitle":"Back-end Team Envolved","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/backend_disc#team-disc-profiles","content":" Our team has taken the DISC assessment to identify each member's behavioral profile. This helps us better understand our strengths, working styles, and how we can collaborate more effectively.    ","version":"Next","tagName":"h2"},{"title":"Dominance (D)​","type":1,"pageTitle":"Back-end Team Envolved","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/backend_disc#dominance-d","content":" People with a Dominant profile are result-oriented, quick decision-makers, and thrive on challenges. They are great at leading initiatives and solving problems efficiently.  Caio Chiabai de Oliveira     ","version":"Next","tagName":"h3"},{"title":"Influence (I)​","type":1,"pageTitle":"Back-end Team Envolved","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/backend_disc#influence-i","content":" The Influence profile is associated with communicative, enthusiastic, and motivating individuals. They tend to inspire others and create a positive work environment.  Lucas Codeco     ","version":"Next","tagName":"h3"},{"title":"Steadiness (S)​","type":1,"pageTitle":"Back-end Team Envolved","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/backend_disc#steadiness-s","content":" People with this profile are patient, collaborative, and focused on maintaining harmony. They are reliable and consistent in their work.  Murilo Dias Arthur Valentim Caldeira Bruno Alves De Morais     ","version":"Next","tagName":"h3"},{"title":"Conscientiousness (C)​","type":1,"pageTitle":"Back-end Team Envolved","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/backend_disc#conscientiousness-c","content":" The Conscientiousness profile values rules, precision, and quality. These individuals are detail-oriented, analytical, and committed to technical excellence.  Diego Bourguignon Rangel  ","version":"Next","tagName":"h3"},{"title":"🗂️ Comunication Plan – SPARK (Frontend)","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan","content":"","keywords":"","version":"Next"},{"title":"1. Main Goal​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan#1-main-goal","content":" Ensure clear, efficient, and continuous communication among the members of the Software Project Management, Systems Project teams, and stakeholders, promoting alignment, progress tracking, and identification of obstacles.    ","version":"Next","tagName":"h2"},{"title":"2. Participants​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan#2-participants","content":" Name\tRole\tLevel of EngagementJoão Vitor Lopes\tGPS Team Leader\tHigh João Victor Vieira\tGPS Team Member\tHigh João Pedro Pagotto\tGPS Team Member\tHigh Alex Rossoni\tGPS Team Member\tHigh Davi Breda\tGPS Team Member\tHigh Thalison Vinícius\tGPS Team Member\tHigh Murilo Dias de Oliveira\tProject Development Team Leader\tHigh Lucas Gabriel Araújo\tProject Development Team Member\tHigh Bruno Alves\tProject Development Team Member\tHigh Arthur Valentim\tProject Development Team Member\tHigh Caio chiabai de Oliveira\tProject Development Team Member\tHigh Diego Bourguignon\tProject Development Team Member\tHigh    ","version":"Next","tagName":"h2"},{"title":"3. Comunication Channels​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan#3-comunication-channels","content":" Type of Comunication\tChannel\tGoal\tParticipants\tFrequencyFast Comunication\tDiscord + Whatsapp\tIssue resolution and quick notifications + direct communication between dev and manager\tGPS and PS Teams\tEvery day Sprint Planning\tGoogle Meet or In Person + Github Projects + PMC\tTasks Planning\tGPS Team\tWeekly Weekly\tGoogle Meet or In Person\tShare status and obstacles\tGPS and PS Teams\tWeekly    ","version":"Next","tagName":"h2"},{"title":"4. Comunication Routine​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan#4-comunication-routine","content":" Event\tFormat\tDuration\tFrequency\tFacilitator\tNotesReview and Planning\tOnline Meeting or In Person\t15-30 min\tWeekly\tLeader GPS Team\tUses PMC and Github Projects to review the previous steps and plan the next ones Weekly\tOnline Meeting or In Person\t45 min - 1 hour\tWeekly\tLeaders GPS and PS Team\tOne of the members of the Project Development Team answers the questions about the Ongoing Project, and lists impediments and issues that may arise    ","version":"Next","tagName":"h2"},{"title":"5. Responsables for Comunication​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan#5-responsables-for-comunication","content":" Content Type\tLead ResponsableTechnical Status\tPS Team Planning and Backlog\tGPS Team Meeting Facilitator\tFacilitator Comunication with stakeholders\tGPS and PS Team Leaders Technical Documentation\tProject Development Team    ","version":"Next","tagName":"h2"},{"title":"6. Good Practices​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/backend_communication_plan#6-good-practices","content":" Use asynchronous communication whenever possible.Avoid long or unfocused meetings.Keep all documents updated and accessible.Maintain ongoing comunication through Discord channels for each Team.Encourage frequent feedback. ","version":"Next","tagName":"h2"},{"title":"Team Member's DISC Personality","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/frontend_disc","content":"","keywords":"","version":"Next"},{"title":"1. Main Goal​","type":1,"pageTitle":"Team Member's DISC Personality","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/frontend_disc#1-main-goal","content":" Understand the pesonality of each member related to SPARK - Frontend Project and how the members of the teams can collaborate better to the development of the project.  ","version":"Next","tagName":"h2"},{"title":"2. DISC Tests Team GPS​","type":1,"pageTitle":"Team Member's DISC Personality","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/frontend_disc#2-disc-tests-team-gps","content":" Name\tDominance\tInfluence\tSteadliness\tConscientiounessLarissa Rangel\t12,50%\t45,00%\t35%\t7,50% Gabriel Barbosa\t7.32%\t19.51%\t58.78%\t24.39% Lorhan de Souza\t0%\t12.50%\t57.50%\t30% Thiago Carvalho\t20%\t52%\t15%\t12% Rodolfo\t-----------\t-----------\t-------------\t------------------  ","version":"Next","tagName":"h2"},{"title":"3.DISC Tests Team PS​","type":1,"pageTitle":"Team Member's DISC Personality","url":"/leds-tools-public/spark/project_management/2025-1_team_management/DISC/frontend_disc#3disc-tests-team-ps","content":" Name\tDominance\tInfluence\tSteadliness\tConscientiounessBruno Chevitarese\t37.50%\t7.50%\t22.50%\t32.50% Henrique de Souza Lima\t17.50%\t5%\t47.50%\t30% Guilherme Borges Cabral\t7%\t7%\t27%\t57% Nicolas Duarte Botelho\t20%\t12.50%\t25%\t42.50% Lucas Bruno Alves\t22.50%\t30%\t27.50%\t20% ","version":"Next","tagName":"h2"},{"title":"Back-end Team Topology","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology","content":"","keywords":"","version":"Next"},{"title":"👥 Team Topology – SPARK​","type":1,"pageTitle":"Back-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology#-team-topology--spark","content":" ","version":"Next","tagName":"h2"},{"title":"📦 Team: Backend (Responsible Group)​","type":1,"pageTitle":"Back-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology#-team-backend-responsible-group","content":" Type: Stream-aligned team Mission: Build the core services and API of SPARK using Python, Java, and .NET, enabling the platform to interact with the front-end and process the generated .spark files. Main Deliverables: REST APIs built with Django (Python), Spring Boot (Java), and .NET (Minimal API or Clean Architecture with CQRS)Data validation and processingIntegration with the front-end through clear API endpointsBackend usage documentation and API referenceScalable and maintainable codebase Main Technologies: Python (Django)Java (Spring Boot).NET (Minimal API or Clean Architecture with CQRS)PostgreSQL (or any other DB technology)GitHub    ","version":"Next","tagName":"h3"},{"title":"🛠️ Collaborating Team: Frontend​","type":1,"pageTitle":"Back-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology#️-collaborating-team-frontend","content":" Type: Enabling teamRole: Provide support to the back-end team by defining clear API specifications, assisting in data validation, and ensuring smooth integration with the front-end via API endpoints.    ","version":"Next","tagName":"h3"},{"title":"📚 Documentation​","type":1,"pageTitle":"Back-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology#-documentation","content":" Documentation hosted on DocusaurusDocumentation structure: Project overviewTechnologies usedDISC profiles of team membersBacklogCommunication PlanTeam Topology    ","version":"Next","tagName":"h3"},{"title":"🔄 Collaboration Format​","type":1,"pageTitle":"Back-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology#-collaboration-format","content":" Weekly summaries: Each team provides updates on what has been accomplished, what is pending, and the upcoming tasks for the week.Group reviews: Reviews are conducted whenever major milestones are reached, either asynchronously or through video calls.    ","version":"Next","tagName":"h3"},{"title":"💬 Communication​","type":1,"pageTitle":"Back-end Team Topology","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Team Topology/backend_teamtopology#-communication","content":" Main channel: Discord (dedicated channel per team)Quick support: WhatsApp/DiscordTask management: GitHub Issues/Kanban for sprint management ","version":"Next","tagName":"h3"},{"title":"🗂️ Comunication Plan – SPARK (Frontend)","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan","content":"","keywords":"","version":"Next"},{"title":"1. Main Goal​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan#1-main-goal","content":" Ensure clear, efficient, and continuous communication among the members of the Software Project Management, Systems Project teams, and stakeholders, promoting alignment, progress tracking, and identification of obstacles.    ","version":"Next","tagName":"h2"},{"title":"2. Participants​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan#2-participants","content":" Name\tRole\tLevel of EngagementLarissa Rangel\tGPS Team Leader\tMuito Alto Gabriel Barbosa\tProject Planner and Facilitator\tMuito alto Lorhan de Souza\tSupport Team Member\tMédio Thiago Carvalho\tSupport Team Member\tMédio Rodolfo\tSupport Team Member\tBaixo Bruno da Fonseca Chevitarese\tPS Team Leader\tMuito Alto Henrique de Souza Lima\tSupport Team Member\tMédio Guilherme Borges Cabral\tSupport Team Member\tMuito Alto Nicolas Duarte Botelho\tSupport Team Member\tMuito Alto Lucas Bruno Alves\tSupport Team Member\tBaixo    ","version":"Next","tagName":"h2"},{"title":"3. Comunication Channels​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan#3-comunication-channels","content":" Type of Comunication\tChannel\tGoal\tParticipants\tFrequencyFast Comunication\tDiscord\tIssue resolution and quick notifications\tGPS and PS Teams\tEvery day Sprint Planning\tGoogle Meet + Github Projects + PMC\tTasks Planning\tGPS Team\tWeekly Weekly\tGoogle Meet\tShare status and obstacles\tGPS and PS Teams\tWeekly    ","version":"Next","tagName":"h2"},{"title":"4. Comunication Routine​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan#4-comunication-routine","content":" Event\tFormat\tDuration\tFrequency\tFacilitator\tNotesReview and Planning\tOnline Meeting\t30 min\tWeekly\tLeader GPS Team\tUses PMC and Github Projects to review the previous steps and plan the next ones Weekly\tOnline Meeting\t45 min\tWeekly\tLeaders GPS and PS Team\tOne of the members of the Systems Project Team answer the questions about the Ongoing Project    ","version":"Next","tagName":"h2"},{"title":"5. Responsables for Comunication​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan#5-responsables-for-comunication","content":" Content Type\tLead ResponsableTechnical Status\tPS Team Planning and Backlog\tGPS Team Meeting Facilitator\tFacilitator Comunication with stakeholders\tGPS and PS Team Leaders Technical Documentation\tSupport Team Members    ","version":"Next","tagName":"h2"},{"title":"6. Good Practices​","type":1,"pageTitle":"🗂️ Comunication Plan – SPARK (Frontend)","url":"/leds-tools-public/spark/project_management/2025-1_team_management/Communication Plan/frontend_communication_plan#6-good-practices","content":" Use asynchronous communication whenever possible.Avoid long or unfocused meetings.Keep all documents updated and accessible.Maintain ongoing comunication through Discord channels for each Team.Encourage frequent feedback. ","version":"Next","tagName":"h2"},{"title":"GQM (Goal, Question, Metric)","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/metrics","content":"","keywords":"","version":"Next"},{"title":"Goal​","type":1,"pageTitle":"GQM (Goal, Question, Metric)","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/metrics#goal","content":" Ensure progress tracking based on objective metrics and facilitate anticipated decisions about scope, deadlines, and priorities.  ","version":"Next","tagName":"h2"},{"title":"Question 1​","type":1,"pageTitle":"GQM (Goal, Question, Metric)","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/metrics#question-1","content":" What is the rate of features completed over time?  Metric: Completed Features per Total Features Acronym: CF/TF Unit: Percentage of Features Description: Percentage indicating how many features have been completed compared to the total planned for delivery. Metric: Average Time to Complete a Feature Acronym: ATCF Unit: Day Description: Average number of days required to complete a feature. The calculation is based on already delivered features. Counting starts at the start of the sprint.  ","version":"Next","tagName":"h3"},{"title":"Question 2​","type":1,"pageTitle":"GQM (Goal, Question, Metric)","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/metrics#question-2","content":" What is the rate of tasks completed per completed feature?  Metric: Completed Tasks per Total Tasks of the Feature Acronym: CT/TT Unit: Percentage of Tasks Description: Percentage indicating how many tasks have been completed compared to the total created for a feature. Metric: Average Tasks per Feature Acronym: AT/F or AvgUnit: Task/Feature Description: Average number of tasks created per feature. The calculation considers both completed features and the feature currently in development. Metric: Completed Tasks per Average Tasks per Feature Acronym: CT/AvgUnit: Percentage of Tasks Description: Percentage indicating how many tasks were completed compared to the average number of tasks usually created per feature. Metric: Task per Feature Deviation from Average per FeatureAcronym: TFD/AvgUnit: TaskDescription: Indicates how the number of tasks in a given feature differs from the average number of tasks usually created per feature. ","version":"Next","tagName":"h3"},{"title":"PMC (Project Model Canvas)","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/pmc","content":"PMC (Project Model Canvas)","keywords":"","version":"Next"},{"title":"Frontend Team Members","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/team_members","content":"","keywords":"","version":"Next"},{"title":"GPS (project mamagement)​","type":1,"pageTitle":"Frontend Team Members","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/team_members#gps-project-mamagement","content":" Bruno ChevitareseHenrique de SouzaGuilherme BorgesLucas BrunoNicolas DuarteRenzo Fraga  ","version":"Next","tagName":"h2"},{"title":"PS (project development)​","type":1,"pageTitle":"Frontend Team Members","url":"/leds-tools-public/spark/project_management/2025-2_team_management/frontend_team/team_members#ps-project-development","content":" Davi AlvarengaLucas PianissolaMatheus Garcias ","version":"Next","tagName":"h2"},{"title":"Release Plan","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/future/release-plan","content":"","keywords":"","version":"Next"},{"title":"Version 1 for .NET​","type":1,"pageTitle":"Release Plan","url":"/leds-tools-public/spark/project_management/future/release-plan#version-1-for-net","content":" Estimated duration: 2 WeeksExpected delivery date: End of AugustFeatures: Tracing and Logging in .NET; Implement automated back-end tests + basic CRUD; Implement automated front-end tests + basic CRUD; Modifications suggested by the DEV team;  ","version":"Next","tagName":"h2"},{"title":"Version 2​","type":1,"pageTitle":"Release Plan","url":"/leds-tools-public/spark/project_management/future/release-plan#version-2","content":" Estimated duration: 4 WeeksExpected delivery date: SeptemberFeatures: Generation of authorization rules with OPA  ","version":"Next","tagName":"h2"},{"title":"Version 3​","type":1,"pageTitle":"Release Plan","url":"/leds-tools-public/spark/project_management/future/release-plan#version-3","content":" Estimated duration: 3 WeeksExpected delivery date: OctoberFeatures: Using AI Pipeline for inserting; Business Rules into domain classes (2 weeks); Inserting new attributes into existing classes (1 week);  ","version":"Next","tagName":"h2"},{"title":"Project's Developing Plan","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/overview","content":"","keywords":"","version":"Next"},{"title":"Important Dates​","type":1,"pageTitle":"Project's Developing Plan","url":"/leds-tools-public/spark/project_management/overview#important-dates","content":" Date\tDescription\tRelated Features22/09/2025\tStart of the works with the team\tnot a delivery date 28/09/2025\tFirst Delivery\t1 02/11/2025\tSecond Delivery (First Big Delivery)\t2.1, 2.2 and 2.3 30/11/2025\tThird Delivery (Second Big Delivery)\t3  ","version":"Next","tagName":"h2"},{"title":"Backlog - Frontend​","type":1,"pageTitle":"Project's Developing Plan","url":"/leds-tools-public/spark/project_management/overview#backlog---frontend","content":" ID\tFeature\tDescription\tImportance\tProposal1\tImplements the Github Actions Module\tImplementation of the generation of the GitHub Actions for the generated code\t85\tUnderstand how compilers works and a bit about spark-lib architecture 2.1\tGenerate a example case\tGenerate a example case and document the frontend architecture\t80\tBetter comprehension of the frontend architecture 2.2\tCorrections in the frontend generated code\tCorrections in the new frontend generation so it runs properly without the necessity of user made corrections\t100\tGenerated frontend works properly from the start 2.3\tDocumentation of the frontend generated code\tAddition of the generation of the documentation for the frontend generated code\t90\tDocumented frontend code generation 3\tCreation of the Module Doc Lib\tCreation of a modular lib to centralize reusable components of the Spark-Lib and Andes-Lib\t95\tReuseble modular lib for Spark and Andes  ","version":"Next","tagName":"h2"},{"title":"Frontend Development Plan (2025)​","type":1,"pageTitle":"Project's Developing Plan","url":"/leds-tools-public/spark/project_management/overview#frontend-development-plan-2025","content":" ID\tDescription\tExpected Time to Conclude (in weeks)\tRelated Feature1\tImplements the Github Actions Module\t1\t1 2\tStudy of the generated frontend code, Corrections in the generated frontend code, Documentation of the generated frontend code\t4\t2 3\tCreation of the Module Doc Lib\t4\t3  ","version":"Next","tagName":"h2"},{"title":"Timeline​","type":1,"pageTitle":"Project's Developing Plan","url":"/leds-tools-public/spark/project_management/overview#timeline","content":" ","version":"Next","tagName":"h2"},{"title":"Developing","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/How to contribute/testai_develop","content":"","keywords":"","version":"Next"},{"title":"Test.AI repository​","type":1,"pageTitle":"Developing","url":"/leds-tools-public/test_ai/How to contribute/testai_develop#testai-repository","content":" If you’d like to help improve this project, there are two main ways you can contribute: reporting issues and submitting pull requests. Don’t worry if you’re new to GitHub, the steps are simple!  ","version":"Next","tagName":"h2"},{"title":"Repository​","type":1,"pageTitle":"Developing","url":"/leds-tools-public/test_ai/How to contribute/testai_develop#repository","content":" All contributions happen in our GitHub repository: Repository  ","version":"Next","tagName":"h2"},{"title":"Reporting Issues (problems, bugs, or suggestions)​","type":1,"pageTitle":"Developing","url":"/leds-tools-public/test_ai/How to contribute/testai_develop#reporting-issues-problems-bugs-or-suggestions","content":" Create a GitHub account (if you don’t have one yet): https://github.com/join Go to the repository’s Issues tab: Issues Page Click on “New Issue”. Example: New Issue → Describe the problem → Submit Add a clear title and detailed description (screenshots help a lot!).  ","version":"Next","tagName":"h3"},{"title":"Submitting Pull Requests (code changes)​","type":1,"pageTitle":"Developing","url":"/leds-tools-public/test_ai/How to contribute/testai_develop#submitting-pull-requests-code-changes","content":" Fork the repository: click the “Fork” button at the top-right of the repo page. Clone your fork to your computer. Example:  git clone https://github.com/eduardo-pitanga/leds-tools-testai   Make your changes locally. Commit and push your changes to your fork. Open a Pull Request: Go to your forked repo on GitHub. Click “New Pull Request”. Select your branch and submit.  ","version":"Next","tagName":"h2"},{"title":"Guidelines for Pull Requests​","type":1,"pageTitle":"Developing","url":"/leds-tools-public/test_ai/How to contribute/testai_develop#guidelines-for-pull-requests","content":" Your code must be clean, clear, and easy to read. Add comments when necessary to explain tricky parts. Always follow best practices (naming conventions, indentation, reusable components, etc.). Avoid adding unnecessary files or unrelated changes. Test your code before submitting the PR.  ","version":"Next","tagName":"h3"},{"title":"Notes​","type":1,"pageTitle":"Developing","url":"/leds-tools-public/test_ai/How to contribute/testai_develop#notes","content":" No contribution is too small — even fixing typos helps! If you get stuck, check GitHub’s beginner guides: GitHub Docs. All contributions are reviewed before being merged. ","version":"Next","tagName":"h2"},{"title":"Test.AI","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/Basic Concepts/testai_overview","content":"","keywords":"","version":"Next"},{"title":"What is Test.AI​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_overview#what-is-testai","content":" Test.AI is a software that uses language models (LLMs) and artificial intelligence agents to efficiently generate automated test files. It operates in two main stages: Gherkin File Generation and Step Generation in C# using xUnit, based on requirement documents in the .andes format, as well as the generation of IEEE-standard test plans.  ","version":"Next","tagName":"h3"},{"title":"Key benefits:​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_overview#key-benefits","content":" Reduces test writing time.Generates consistent and readable test code.Produces IEEE-standard test plans.Integrates with VS Code and CLI for different usage scenarios.  ","version":"Next","tagName":"h3"},{"title":"How to use in Visual Studio Code:​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_overview#how-to-use-in-visual-studio-code","content":" Install the extension from the VS Code extensions tab.Use a .andes file or a Gherkin .feature file.To use the feateures, follow the steps in Getting Started.  ","version":"Next","tagName":"h3"},{"title":"Technologies Employed​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_overview#technologies-employed","content":" PythonCrewAINodejsAndes ","version":"Next","tagName":"h3"},{"title":"Technologies","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_crewai","content":"","keywords":"","version":"Next"},{"title":"CrewAI + Python​","type":1,"pageTitle":"Technologies","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_crewai#crewai--python","content":" ","version":"Next","tagName":"h2"},{"title":"What is CrewAI​","type":1,"pageTitle":"Technologies","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_crewai#what-is-crewai","content":" Crew AI is an open-source Python framework designed to create and orchestrate teams of AI agents, called “crews.” The concept is simple but powerful: instead of relying on a single generalist agent, you build a structured team where each agent has a clearly defined role—researcher, writer, analyst, strategist—and they collaborate to execute complex workflows with higher precision and less error.  ","version":"Next","tagName":"h3"},{"title":"What is Python​","type":1,"pageTitle":"Technologies","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_crewai#what-is-python","content":" Python is a high-level programming language known for being simple, readable, and versatile. It is widely used for web development, data analysis, artificial intelligence, automation, and many other areas. ","version":"Next","tagName":"h3"},{"title":"Suggestion of Next Features","type":0,"sectionRef":"#","url":"/leds-tools-public/spark/project_management/future/nextfeatures","content":"","keywords":"","version":"Next"},{"title":"Task 1: Generate Standard Descriptions for Functions​","type":1,"pageTitle":"Suggestion of Next Features","url":"/leds-tools-public/spark/project_management/future/nextfeatures#task-1-generate-standard-descriptions-for-functions","content":" Objective: Improve the quality and documentation of the generated code. The task consists of making SparkLib automatically add documentation comments (XML-docs for C#, Javadoc for Java, etc.) to all CRUD functions it creates.  Example (C#):  /// &lt;summary&gt; /// Creates a new instance of 'Product'. /// &lt;/summary&gt; /// &lt;param name=&quot;productDto&quot;&gt;The data object to create the Product.&lt;/param&gt; /// &lt;returns&gt;The newly created Product.&lt;/returns&gt; public async Task&lt;Product&gt; Create(ProductDTO productDto) { // ... generated code }   Suggested Action Plan:  Locate the CRUD Method Generators: Go to the generator folder you're working with (e.g., src/backend/csharp-generator/cleanArchitecture-generator/).Find the files responsible for each CRUD operation. For example, in Application/UseCase/Case/, you'll probably find files like CreateCase/generate.ts, UpdateCase/generate.ts, etc. Create Comment Templates: Within each of these files, before generating the method code, create a template string for the comment block.Use information from the entity's AST node and method to dynamically fill the template. Inject the Comment into the Final Code: Connect the generated comment block with the function code and return the complete string.  Tip: Create a helper function in src/util/generator-utils.ts to generate these comment blocks, avoiding code duplication.    ","version":"Next","tagName":"h3"},{"title":"Task 2: Generate Unit Tests for CRUD​","type":1,"pageTitle":"Suggestion of Next Features","url":"/leds-tools-public/spark/project_management/future/nextfeatures#task-2-generate-unit-tests-for-crud","content":" Objective: Make SparkLib generate basic unit tests for CRUD Use Cases or Services. Since CRUD functions don't have complex business rules, their tests are quite standardized and ideal for automation.  Suggested Action Plan:  Investigate the Test Structure: Look for folders like DomainTest or InfraTest within the C# generators (e.g., src/backend/csharp-generator/cleanArchitecture-generator/DomainTest/). Analyze the modeltest-generator.ts file. It should already give clues about how test generation is structured. The goal is to create something similar for Use Cases. Create a New Test Generator for Use Cases: Create a new folder and file structure to generate tests for the Application/Use Cases layer. For each generated UseCase (e.g., CreateProductUseCase), you should generate a corresponding test class (e.g., CreateProductUseCaseTests). Implement Test Generation Logic: Arrange: Generate code that creates mocks for dependency interfaces (mainly IRepository). Create an instance of the Use Case being tested, injecting the mocks. Act: Generate the call to the method being tested (e.g., _useCase.Handle(request, CancellationToken.None)). Assert: Generate assertions. For a Create test, you can verify that the repository's AddAsync method was called once. For GetById, verify that the result is not null. ","version":"Next","tagName":"h3"},{"title":"Communication","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/Project Management/testai_project_managment","content":"","keywords":"","version":"Next"},{"title":"Contact us​","type":1,"pageTitle":"Communication","url":"/leds-tools-public/test_ai/Project Management/testai_project_managment#contact-us","content":" Discord ","version":"Next","tagName":"h2"},{"title":"CrewAI + Python","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating","content":"","keywords":"","version":"Next"},{"title":"Generating Gherkin Tests with CrewAI​","type":1,"pageTitle":"CrewAI + Python","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating#generating-gherkin-tests-with-crewai","content":" CrewAI → framework for orchestrating agents (writers, reviewers and managers).Python 3 → main language.Dic/List → static typing..andes (file) → main input with the user case (use case to be transformed into test scenarios).YAML → defines agents, tasks and outputs.  ","version":"Next","tagName":"h2"},{"title":"What is the .andes file and how/where is it used​","type":1,"pageTitle":"CrewAI + Python","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating#what-is-the-andes-file-and-howwhere-is-it-used","content":" The .andes file is an input document that contains the use case description that will serve as the basis for generating Gherkin tests.  It is read at the script entrypoint (__main__) via:  with open(f&quot;andes/{file}.andes&quot;) as file: andes = file.read()   The content of .andes is passed as a parameter to the crew_gherkin function:  resultado = crew_gherkin(andes, strings)   In other words, .andes → feeds the writer/reviewer agents, which then generate automated test scenarios.  ","version":"Next","tagName":"h3"},{"title":"What is CrewAI and how/where is it used​","type":1,"pageTitle":"CrewAI + Python","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating#what-is-crewai-and-howwhere-is-it-used","content":" CrewAI is a library for coordinating multiple LLM Agents that interact with each other in a structured execution flow.  In this code, it is the engine for collaborative Gherkin test generation:  Each Agent is loaded from YAML definitions (AgentLoader). Eg: gherkin_writer writes the tests.E.g.: gherkin_reviewer reviews the tests.E.g.: manager_gherkin consolidates the final version. Each Task defines an action to be performed by the agent. Ex.: gherkin_code generates the initial code.E.g.: gherkin_review evaluates and adjusts.E.g.: manager_gherkin_task generates the final artifact (features/resposta.feature). Crew is instantiated and triggers the flow:  crew: Crew = Crew( agents=agents+[manager], tasks=tasks+[final_task], max_rpm=10, output_log_file=&quot;crew_log.txt&quot;, manager_llm=llm_low_temp, process=Process.sequential, verbose=True ) resultado = crew.kickoff()   It coordinates the sequential execution of agents and tasks until the production of the .feature file.  This is an automated pipeline for transforming use cases described in .andes files into Gherkin test scenarios. The code does this via CrewAI, orchestrating a team of agents (writers, reviewers and manager), who collaborate in multiple rounds of writing/revision until generating the final artifact:  Expected output: a .feature file ready to be used in BDD test automation.  ","version":"Next","tagName":"h3"},{"title":"XUnit Test Generation with CrewAI​","type":1,"pageTitle":"CrewAI + Python","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating#xunit-test-generation-with-crewai","content":" Python 3.x → main programming language.CrewAI → orchestration of agents that write, review, and manage test code.Custom Loaders (src.infrastructure.loaders) AgentLoader → initializes agents.TaskLoader → loads tasks.LLM_Loader → instantiates language models.read_yaml_strings → loads YAML configuration. YAML → defines agents, tasks, and output examples.External Files features/*.feature → main input, defines BDD scenarios.dtos/ → directory containing request/response classes (DTOs).docs/endpoints.txt → contains API endpoints mapped to features.  ","version":"Next","tagName":"h2"},{"title":"What is the .feature File and How/Where it is Used​","type":1,"pageTitle":"CrewAI + Python","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating#what-is-the-feature-file-and-howwhere-it-is-used","content":" The .feature file is the main input containing the BDD scenario description.  It is read at the script entrypoint (__main__): with open(f&quot;features/{file}.feature&quot;) as file: feature = file.read() Its content is used in three stages: Agent debate (crew_xunit_debate) → agents discuss how to implement the test. Info gatherer (info_gatherer_crew) → automatically locates: DTOs inside the dtos/ folder.Corresponding endpoint in docs/endpoints.txt. Code generation (crew_xunit_generation) → creates, reviews, and refines XUnit code.  The .feature file acts as the seed that drives the entire test generation process.  ","version":"Next","tagName":"h3"},{"title":"What is CrewAI and How/Where it is Used​","type":1,"pageTitle":"CrewAI + Python","url":"/leds-tools-public/test_ai/Advanced Concepts/testai_generating#what-is-crewai-and-howwhere-it-is-used","content":" CrewAI is the core component coordinating collaborative work among LLM agents. In this script, it is used in four main workflows:  crew_xunit_debate Defines a csharp_xunit_writer agent to create the initial test proposal.Creates up to 3 discussion agents that debate different solutions.Uses a result_analysis_manager agent to consolidate the final version.Produces an intermediate output at modalidade_bolsa_crew.cs. info_gatherer_crew Defines specialized agents: API Path Finder → reads endpoints.txt and finds the API route for the feature. File Search Specialist → searches DTOs in the dtos/ directory. Tasks executed: dto_file_find → extracts DTO class content.api_url_find → identifies the corresponding API URL. Outputs are written to: dto_code.txt → DTO code.api_url.txt → API URL. crew_xunit_generation Uses DTOs + API URL to generate XUnit test code.Pipeline: Initial proposal (xunit_code_proposal) → generates C# XUnit test code.Review (xunit_review) → refines the generated code. Logs results in crew_log.txt. manager_crew Consolidates results from three parallel executions of crew_xunit_generation. Uses the result_analysis_manager agent to produce the final consolidated test in:  resposta/VersionarModalidadeStepAI.cs   This code implements an intelligent pipeline for generating automated XUnit tests in C# from .feature specifications.  Expected output: C# test code generated under resposta/*.cs, derived from the .feature file, the actual API endpoint, and corresponding DTOs. ","version":"Next","tagName":"h3"},{"title":"Suggestions for Improvements","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/How to contribute/testai_improvements","content":"","keywords":"","version":"Next"},{"title":"Quality & Reliability​","type":1,"pageTitle":"Suggestions for Improvements","url":"/leds-tools-public/test_ai/How to contribute/testai_improvements#quality--reliability","content":" Add more unit and integration tests.Increase test coverage and track it with reports (per file/module).Standardize logging and error messages (clear, actionable, with codes/context).  ","version":"Next","tagName":"h2"},{"title":"Configuration & Maintenance​","type":1,"pageTitle":"Suggestions for Improvements","url":"/leds-tools-public/test_ai/How to contribute/testai_improvements#configuration--maintenance","content":" Modularize the code to ease maintenance and testing.Document the architecture and main flow.  ","version":"Next","tagName":"h2"},{"title":"New Features​","type":1,"pageTitle":"Suggestions for Improvements","url":"/leds-tools-public/test_ai/How to contribute/testai_improvements#new-features","content":" 1. .andes File Import  Upload and automatic reading of .andes files.Structured parsing to extract requirements, constraints, and functional descriptions.  2. Automatic Test Case Generation  Based on the .andes, the functionality should generate an IEEE standard Test Plan.  3. IEEE Compliance Validation  The generated plan goes through an automatic check to ensure that all mandatory IEEE sections are present.  4. Test Cases  Automated tests to ensure the correct functioning of the tool. ","version":"Next","tagName":"h2"},{"title":"Test.AI","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/Project Management/testai_minimundo","content":"","keywords":"","version":"Next"},{"title":"Context​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Project Management/testai_minimundo#context","content":" The Test.AI extension for VS Code uses AI to generate automated tests from code. Now, the team needs to create a new functionality that generates test plans, ensuring that it meets its requirements and that the test artifacts produced comply with IEEE standards (829/29119).    ","version":"Next","tagName":"h2"},{"title":"Test Target System​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Project Management/testai_minimundo#test-target-system","content":" Tool: Test.AI Extension (VSCode).New: Generation of complete Test Plans (IEEE 829/29119). -Main functions to be validated:Create IEEE Test Plan automatically from code + requirements.Generate mandatory sections of the standard (objective, scope, resources, schedule, risks, acceptance criteria, etc.).Export the plan in Markdown or PDF.Ensure consistency between Test Plans and Test Cases already suggested by Test.AI.    ","version":"Next","tagName":"h2"},{"title":"Actors​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Project Management/testai_minimundo#actors","content":" Managers: Gabriel, Ryan, Paulo Vitor.Developers: Dominic, Levi.Test.AI (Extension): generates Test Cases + IEEE Test Plans.    ","version":"Next","tagName":"h2"},{"title":"Objectives of the new functionality​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Project Management/testai_minimundo#objectives-of-the-new-functionality","content":" Generate test plans in the IEEE standard    ","version":"Next","tagName":"h2"},{"title":"Rules and Restrictions​","type":1,"pageTitle":"Test.AI","url":"/leds-tools-public/test_ai/Project Management/testai_minimundo#rules-and-restrictions","content":" Test Plans must follow the IEEE structure (without omissions in critical sections).The SmartCart system will be the main benchmark to validate the quality of test plans. ","version":"Next","tagName":"h2"},{"title":"How to Run Test.AI","type":0,"sectionRef":"#","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#prerequisites","content":" Before you begin, make sure you have the following software installed:  Python (including pip package manager)Visual Studio CodeNode.js (recommended)    ","version":"Next","tagName":"h3"},{"title":"STEP 1: Install the Python Library​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#step-1-install-the-python-library","content":" Open a terminal.Run the command:  pip install test-ai-leds   Make sure the Python Scripts directory is added to your PATH environment variable.  🔹 Windows​  Run:  pip show test-ai-leds   You will see a path similar to:  C:\\Users\\user\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages   Replace site-packages with Scripts, for example:  C:\\Users\\user\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\Scripts   Add this path to your system environment variables.  You can also use virtual environments to avoid global installation.  🔹 Linux​  Create a virtual environment:  python -m venv &lt;nome-da-venv&gt;   Activate the venv:  source &lt;caminho-da-venv&gt;/bin/activate   Install the library:  pip install test-ai-leds   Add the scripts path to .bashrc:  nano ~/.bashrc   Add at the end of the file:  export PATH=$PATH:/&lt;caminho-da-venv&gt;/bin   Then run:  source ~/.bashrc     ","version":"Next","tagName":"h3"},{"title":"STEP 2: Install the Test.AI Extension in VS Code​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#step-2-install-the-testai-extension-in-vs-code","content":" Open Visual Studio Code.Go to the Extensions tab (square icon or shortcut Ctrl + Shift + X).Search for Test.AI.Install the extension.    ","version":"Next","tagName":"h3"},{"title":"STEP 3: Configure the .env File​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#step-3-configure-the-env-file","content":" In the root folder of the repository (leds-tools-testai), create a file called .env with the following content:  LLM_MODEL=gemini/gemini-1.5-flash GEMINI_API_KEY=&lt;Sua Chave&gt; SWAGGER_PATH=&lt;Caminho para o Swagger&gt; DTO_SOURCE=&lt;Caminho para a pasta DTO&gt;   Example:​  LLM_MODEL=gemini/gemini-1.5-flash GEMINI_API_KEY=asduf24385HDSuyad43trfjedsig SWAGGER_PATH=C:/Users/usuario/OneDrive/Documentos/PS2/leds-tools-testai/dtos/swagger.json DTO_SOURCE=C:/Users/usuario/OneDrive/Documentos/PS2/leds-tools-testai/dtos     ","version":"Next","tagName":"h3"},{"title":"Features​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#features","content":" ","version":"Next","tagName":"h2"},{"title":"Feature 1: Generate Gherkin Code Files (Features, BDD)​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#feature-1-generate-gherkin-code-files-features-bdd","content":" Prerequisites​  An .andes file inside the andes folder located in (leds-tools-testai).  How to Run​  In the terminal, inside the repository (leds-tools-testai), run:  python src/application/use_cases/crew_gherkin.py   Enter the name of the .andes file (without the extension).The .feature file will be automatically generated in the features folder with the name resposta.feature.    ","version":"Next","tagName":"h3"},{"title":"Feature 2: Generate Feature Steps (C# with xUnit)​","type":1,"pageTitle":"How to Run Test.AI","url":"/leds-tools-public/test_ai/Basic Concepts/testai_guide#feature-2-generate-feature-steps-c-with-xunit","content":" Prerequisites​  A .feature file inside the features folder located in (leds-tools-testai).  How to Run​  In the terminal, inside the repository (leds-tools-testai), run:  python src/application/use_cases/crew_xUnit.py   Enter the name of the .feature file (without the extension).The resposta.cs file will be generated inside the resposta folder located in (leds-tools-testai).   ","version":"Next","tagName":"h3"},{"title":"TodoList - A Complete Pipeline","type":0,"sectionRef":"#","url":"/leds-tools-public/todo_list/","content":"","keywords":"","version":"Next"},{"title":"1. General Description​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#1-general-description","content":" The To-Do List system is an application that allows users to organize their daily tasks. Through it, the user can create, view, update, delete, and manage tasks, as well as organize them by categories, set deadlines, and track their status.  ","version":"Next","tagName":"h2"},{"title":"2. Features​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#2-features","content":" ","version":"Next","tagName":"h2"},{"title":"2.1. User Registration​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#21-user-registration","content":" Allow users to create an account in the system.Required data: Name, Email, Password.  ","version":"Next","tagName":"h3"},{"title":"2.2. User Authentication​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#22-user-authentication","content":" Allow login and logout.Secure authentication with encrypted password.  ","version":"Next","tagName":"h3"},{"title":"2.3. Task Management​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#23-task-management","content":" Create Task: Fields: Title, Description, Due Date, Priority, Status, Category (optional). Edit Task: Allow updating any task information. Delete Task: Allow removing a task from the system. List Tasks: View all registered tasks with filters by: status, due date, priority, and category. Change Status: Possible statuses: Pending, In Progress, Completed, Canceled.  ","version":"Next","tagName":"h3"},{"title":"2.4. Task Organization​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#24-task-organization","content":" Create and manage categories (e.g., Work, Study, Personal).Filter tasks by category.  ","version":"Next","tagName":"h3"},{"title":"2.5. Notifications (Optional)​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#25-notifications-optional","content":" Send reminders for tasks close to the due date (via email or in-system notification).  ","version":"Next","tagName":"h3"},{"title":"3. Functional Requirements​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#3-functional-requirements","content":" ID\tDescriptionRF01\tThe system must allow users to register with name, email, and password. RF02\tThe system must allow user authentication. RF03\tThe system must allow users to create new tasks. RF04\tThe system must allow users to edit existing tasks. RF05\tThe system must allow users to delete tasks. RF06\tThe system must list the user’s tasks. RF07\tThe system must allow changing the status of tasks. RF08\tThe system must allow users to create and manage categories. RF09\tThe system must allow filtering tasks by status, date, and category. RF10\tThe system may send notifications about pending or upcoming tasks.  ","version":"Next","tagName":"h2"},{"title":"4. Non-Functional Requirements​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#4-non-functional-requirements","content":" ID\tDescriptionRNF01\tThe system must have secure authentication with password encryption. RNF02\tIt must be a responsive application, working well on desktop and mobile. RNF03\tThe backend must be developed in [e.g., Node.js, Django, Spring Boot]. RNF04\tThe frontend must be developed in [e.g., Vue.js, React, Angular]. RNF05\tThe system must support at least 100 concurrent users. RNF06\tRequest response time must not exceed 2 seconds in 95% of cases.  ","version":"Next","tagName":"h2"},{"title":"5. Data Model​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#5-data-model","content":" User  id (UUID)name (string)email (string, unique)password (hash)  Category  id (UUID)name (string)user_id (UUID, FK)  Task  id (UUID)title (string)description (string)due_date (date)priority (enum: low, medium, high)status (enum: pending, in progress, completed, canceled)category_id (UUID, FK, optional)user_id (UUID, FK)  ","version":"Next","tagName":"h2"},{"title":"6. Main Flow​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#6-main-flow","content":" The user accesses the system and logs in or registers.  Once logged in, they see their task dashboard.  They can create a new task by filling in title, description, date, and initial status.  They can update the status as progress is made (e.g., pending → in progress → completed).  They can filter tasks by date, status, or category.  They can delete tasks that are no longer needed.  They track their tasks on the dashboard.  ","version":"Next","tagName":"h2"},{"title":"7. Technologies (Example)​","type":1,"pageTitle":"TodoList - A Complete Pipeline","url":"/leds-tools-public/todo_list/#7-technologies-example","content":" Frontend: Vue.js with Tailwind CSSBackend: Django Rest Framework or C#Database: PostgreSQLHosting: Render, Railway, or Vercel ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}