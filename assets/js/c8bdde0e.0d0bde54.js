"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[868],{1313:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>d});var a=s(4848),r=s(8453);const t={sidebar_position:2,title:"Understanding the Language"},i=void 0,o={id:"spark/advanced_concepts/spark_advanced/lang",title:"Understanding the Language",description:"Spark's language is composed of the following parts: Configuration, Class Diagram, and Use Cases.",source:"@site/docs/spark/advanced_concepts/2_spark_advanced/2_lang.md",sourceDirName:"spark/advanced_concepts/2_spark_advanced",slug:"/spark/advanced_concepts/spark_advanced/lang",permalink:"/leds-tools-public/spark/advanced_concepts/spark_advanced/lang",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Understanding the Language"},sidebar:"spark",previous:{title:"Metamodel",permalink:"/leds-tools-public/spark/advanced_concepts/spark_advanced/metamodel"},next:{title:"Architecture Overview",permalink:"/leds-tools-public/spark/advanced_concepts/spark_advanced/Architecture/overview"}},c={},d=[{value:"Configuration",id:"configuration",level:2},{value:"Class Diagram",id:"class-diagram",level:2},{value:"Attribute and Relationship Types",id:"attribute-and-relationship-types",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Defining Actors",id:"defining-actors",level:3},{value:"Defining Use Cases",id:"defining-use-cases",level:3},{value:"Defining Events",id:"defining-events",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Spark's language is composed of the following parts: Configuration, Class Diagram, and Use Cases."}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.p,{children:"This constructor allows you to define:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Software Name"}),"\n",(0,a.jsx)(n.li,{children:"Description about the software"}),"\n",(0,a.jsx)(n.li,{children:"Language desired to develop the information system"}),"\n",(0,a.jsx)(n.li,{children:"Database name"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'   Configuration {\r\n       software_name: "MyCoolSoftware" // Software\'s name\r\n       about: "MyCoolSoftware project example" // Description about the software\r\n       language: python // Language and pattern used to develop the software\r\n       database_name: "MyCoolSoftwareDB" // Database Name\r\n   }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For the ",(0,a.jsx)(n.code,{children:"language"}),", we have the options: ",(0,a.jsx)(n.code,{children:"python, java, csharp-minimal-api, csharp-clean-architecture"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"class-diagram",children:"Class Diagram"}),"\n",(0,a.jsx)(n.p,{children:"Spark allows you to organize a class diagram into Modules. The declaration of a module follows this pattern:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"module Main {\r\n   // Components of the module go here\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inside each module, it is possible to define Entities, relations between entities, and Enums."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"entity Project {\r\n   name: string\r\n   start_date: date\r\n   end_date: date\r\n   budget: decimal\r\n   client: string\r\n   sponsor: string\r\n   goal: string\r\n   project_father OneToMany Project\r\n   time OneToMany Time\r\n   status uses Status\r\n}\r\n\r\nenum Status {\r\n   Ativo\r\n   Cancelado\r\n   Entregue\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"attribute-and-relationship-types",children:"Attribute and Relationship Types"}),"\n",(0,a.jsxs)(n.p,{children:["Entities have attributes, and the available types are: ",(0,a.jsx)(n.code,{children:"string, integer, decimal, datetime, date, boolean, uuid, email, cpf, cnpj, zipcode, currency, mobilePhoneNumber, phoneNumber, file, void"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Spark allows the following relationships:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"OneToOne"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"OneToMany"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ManyToOne"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"ManyToMany"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"Spark provides comprehensive support for modeling use cases, allowing the definition of actors, events, and relationships between use cases."}),"\n",(0,a.jsx)(n.h3,{id:"defining-actors",children:"Defining Actors"}),"\n",(0,a.jsxs)(n.p,{children:["Actors represent entities or roles interacting with the system. An actor can optionally extend another actor and include attributes like ",(0,a.jsx)(n.code,{children:"name"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-langium",children:'actor ProjectManager name: "Project Manager"\r\nactor TeamMember name: "Team Member"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"defining-use-cases",children:"Defining Use Cases"}),"\n",(0,a.jsx)(n.p,{children:"A use case describes a functionality of the system. It can include actors, events, descriptions, and inheritance from other use cases."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-langium",children:'usecase ManageProjects extends BaseUseCase {\r\n    name: "Manage Projects"\r\n    description: "Handles project management functionalities"\r\n    performer: ProjectManager, TeamMember\r\n    event CreateProject {\r\n        name: "Create a Project"\r\n        description: "Allows the creation of a new project"\r\n        action: "Create"\r\n    }\r\n    event AssignTask {\r\n        name: "Assign a Task"\r\n        description: "Assigns tasks to team members"\r\n        action: "Assign"\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"defining-events",children:"Defining Events"}),"\n",(0,a.jsx)(n.p,{children:"Events are integral components of a use case. They represent actions or operations, with optional dependencies on other events."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-langium",children:'event CreateProject {\r\n    name: "Create a Project"\r\n    description: "Initiates the creation of a project"\r\n    action: "Create"\r\n    depend: AssignTask\r\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Where:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Actors"})," are the performers of the use case."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Use Cases"})," define the system's functionality."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Events"})," represent discrete operations within a use case."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(6540);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);