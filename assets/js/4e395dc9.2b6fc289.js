"use strict";(self.webpackChunkdocumentacao_leds_tools=self.webpackChunkdocumentacao_leds_tools||[]).push([[8949],{7690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=t(4848),r=t(8453);const o={sidebar_position:2,title:"Suggestion of Next Features"},i=void 0,c={id:"spark/project_managment/future/nextfeatures",title:"Suggestion of Next Features",description:"Task 1: Generate Standard Descriptions for Functions",source:"@site/docs/spark/6_project_managment/future/2_nextfeatures.md",sourceDirName:"spark/6_project_managment/future",slug:"/spark/project_managment/future/nextfeatures",permalink:"/leds-tools-public/spark/project_managment/future/nextfeatures",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Suggestion of Next Features"},sidebar:"spark",previous:{title:"Release Plan",permalink:"/leds-tools-public/spark/project_managment/future/release-plan"}},a={},l=[{value:"<strong>Task 1: Generate Standard Descriptions for Functions</strong>",id:"task-1-generate-standard-descriptions-for-functions",level:3},{value:"<strong>Task 2: Generate Unit Tests for CRUD</strong>",id:"task-2-generate-unit-tests-for-crud",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"task-1-generate-standard-descriptions-for-functions",children:(0,s.jsx)(n.strong,{children:"Task 1: Generate Standard Descriptions for Functions"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Objective:"})," Improve the quality and documentation of the generated code. The task consists of making ",(0,s.jsx)(n.code,{children:"SparkLib"})," automatically add documentation comments (XML-docs for C#, Javadoc for Java, etc.) to all CRUD functions it creates."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example (C#):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"/// <summary>\r\n/// Creates a new instance of 'Product'.\r\n/// </summary>\r\n/// <param name=\"productDto\">The data object to create the Product.</param>\r\n/// <returns>The newly created Product.</returns>\r\npublic async Task<Product> Create(ProductDTO productDto)\r\n{\r\n    // ... generated code\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Suggested Action Plan:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Locate the CRUD Method Generators:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Go to the generator folder you're working with (e.g., ",(0,s.jsx)(n.code,{children:"src/backend/csharp-generator/cleanArchitecture-generator/"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["Find the files responsible for each CRUD operation. For example, in ",(0,s.jsx)(n.code,{children:"Application/UseCase/Case/"}),", you'll probably find files like ",(0,s.jsx)(n.code,{children:"CreateCase/generate.ts"}),", ",(0,s.jsx)(n.code,{children:"UpdateCase/generate.ts"}),", etc."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create Comment Templates:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Within each of these files, before generating the method code, create a ",(0,s.jsx)(n.em,{children:"template string"})," for the comment block."]}),"\n",(0,s.jsx)(n.li,{children:"Use information from the entity's AST node and method to dynamically fill the template."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Inject the Comment into the Final Code:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connect the generated comment block with the function code and return the complete string."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tip:"})," Create a helper function in ",(0,s.jsx)(n.code,{children:"src/util/generator-utils.ts"})," to generate these comment blocks, avoiding code duplication."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"task-2-generate-unit-tests-for-crud",children:(0,s.jsx)(n.strong,{children:"Task 2: Generate Unit Tests for CRUD"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Objective:"})," Make ",(0,s.jsx)(n.code,{children:"SparkLib"})," generate basic unit tests for CRUD ",(0,s.jsx)(n.em,{children:"Use Cases"})," or ",(0,s.jsx)(n.em,{children:"Services"}),". Since CRUD functions don't have complex business rules, their tests are quite standardized and ideal for automation."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Suggested Action Plan:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Investigate the Test Structure:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Look for folders like ",(0,s.jsx)(n.code,{children:"DomainTest"})," or ",(0,s.jsx)(n.code,{children:"InfraTest"})," within the C# generators (e.g., ",(0,s.jsx)(n.code,{children:"src/backend/csharp-generator/cleanArchitecture-generator/DomainTest/"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Analyze the ",(0,s.jsx)(n.code,{children:"modeltest-generator.ts"})," file. It should already give clues about how test generation is structured. The goal is to create something similar for ",(0,s.jsx)(n.em,{children:"Use Cases"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create a New Test Generator for Use Cases:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a new folder and file structure to generate tests for the Application/Use Cases layer."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For each generated ",(0,s.jsx)(n.code,{children:"UseCase"})," (e.g., ",(0,s.jsx)(n.code,{children:"CreateProductUseCase"}),"), you should generate a corresponding test class (e.g., ",(0,s.jsx)(n.code,{children:"CreateProductUseCaseTests"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implement Test Generation Logic:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Arrange:"})," Generate code that creates mocks for dependency interfaces (mainly ",(0,s.jsx)(n.code,{children:"IRepository"}),"). Create an instance of the ",(0,s.jsx)(n.em,{children:"Use Case"})," being tested, injecting the mocks."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Act:"})," Generate the call to the method being tested (e.g., ",(0,s.jsx)(n.code,{children:"_useCase.Handle(request, CancellationToken.None)"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Assert:"})," Generate assertions. For a ",(0,s.jsx)(n.code,{children:"Create"})," test, you can verify that the repository's ",(0,s.jsx)(n.code,{children:"AddAsync"})," method was called once. For ",(0,s.jsx)(n.code,{children:"GetById"}),", verify that the result is not null."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);